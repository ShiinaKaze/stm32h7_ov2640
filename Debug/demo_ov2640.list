
demo_ov2640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e28  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a2e4  0800a2e4  0000b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  0800a2e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000051f8  24000018  0800a300  0000c018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005210  0800a300  0000c210  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001358a  00000000  00000000  0000c046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002972  00000000  00000000  0001f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d18  00000000  00000000  00021f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009f7  00000000  00000000  00022c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037584  00000000  00000000  00023657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015571  00000000  00000000  0005abdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a5a3  00000000  00000000  0007014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ca6ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034b4  00000000  00000000  001ca734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001cdbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a0a8 	.word	0x0800a0a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800a0a8 	.word	0x0800a0a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80005ce:	f000 f9fd 	bl	80009cc <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d2:	f000 feeb 	bl	80013ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d6:	f000 f839 	bl	800064c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005da:	f000 f95b 	bl	8000894 <MX_GPIO_Init>
	MX_DMA_Init();
 80005de:	f000 f931 	bl	8000844 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80005e2:	f000 f8e3 	bl	80007ac <MX_USART1_UART_Init>
	MX_DCMI_Init();
 80005e6:	f000 f8ad 	bl	8000744 <MX_DCMI_Init>
	/* USER CODE BEGIN 2 */
	OV2640_Init();
 80005ea:	f000 fdcf 	bl	800118c <OV2640_Init>
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t) pjpeg_buffer,
 80005ee:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <main+0x70>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80005f8:	2100      	movs	r1, #0
 80005fa:	4810      	ldr	r0, [pc, #64]	@ (800063c <main+0x74>)
 80005fc:	f001 f976 	bl	80018ec <HAL_DCMI_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (jpeg_new_frame) {
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <main+0x78>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0fa      	beq.n	8000600 <main+0x38>
			uint8_t *ptemp_buffer = (uint8_t*) pjpeg_buffer;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <main+0x70>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	607b      	str	r3, [r7, #4]

			memcpy(pusart_buffer, ptemp_buffer, USART_BUFFER_LENGTH);
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <main+0x7c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	f009 fd36 	bl	800a08c <memcpy>
			HAL_UART_Transmit_DMA(&huart1, pusart_buffer, USART_BUFFER_LENGTH);
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <main+0x7c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8000628:	4619      	mov	r1, r3
 800062a:	4807      	ldr	r0, [pc, #28]	@ (8000648 <main+0x80>)
 800062c:	f007 feda 	bl	80083e4 <HAL_UART_Transmit_DMA>
			jpeg_new_frame = 0;
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <main+0x78>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
		if (jpeg_new_frame) {
 8000636:	e7e3      	b.n	8000600 <main+0x38>
 8000638:	24000000 	.word	0x24000000
 800063c:	24000034 	.word	0x24000034
 8000640:	24005208 	.word	0x24005208
 8000644:	24000004 	.word	0x24000004
 8000648:	240000fc 	.word	0x240000fc

0800064c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	@ 0x70
 8000650:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000656:	224c      	movs	r2, #76	@ 0x4c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f009 fcea 	bl	800a034 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f009 fce4 	bl	800a034 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800066c:	2002      	movs	r0, #2
 800066e:	f005 f81d 	bl	80056ac <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b31      	ldr	r3, [pc, #196]	@ (800073c <SystemClock_Config+0xf0>)
 8000678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemClock_Config+0xf0>)
 800067c:	f023 0301 	bic.w	r3, r3, #1
 8000680:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000682:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <SystemClock_Config+0xf0>)
 8000684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemClock_Config+0xf4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <SystemClock_Config+0xf4>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemClock_Config+0xf4>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80006a4:	bf00      	nop
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemClock_Config+0xf4>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b2:	d1f8      	bne.n	80006a6 <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	@ 0x40
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 50;
 80006cc:	2332      	movs	r3, #50	@ 0x32
 80006ce:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006dc:	230c      	movs	r3, #12
 80006de:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 f817 	bl	8005720 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xb0>
		Error_Handler();
 80006f8:	f000 f994 	bl	8000a24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006fc:	233f      	movs	r3, #63	@ 0x3f
 80006fe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000708:	2308      	movs	r3, #8
 800070a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000718:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f005 fc56 	bl	8005fd4 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xe6>
		Error_Handler();
 800072e:	f000 f979 	bl	8000a24 <Error_Handler>
	}
}
 8000732:	bf00      	nop
 8000734:	3770      	adds	r7, #112	@ 0x70
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	58000400 	.word	0x58000400
 8000740:	58024800 	.word	0x58024800

08000744 <MX_DCMI_Init>:
/**
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_DCMI_Init+0x60>)
 800074a:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_DCMI_Init+0x64>)
 800074c:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000756:	2220      	movs	r2, #32
 8000758:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_DCMI_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000760:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800076c:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <MX_DCMI_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000774:	2208      	movs	r2, #8
 8000776:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_DCMI_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_DCMI_Init+0x60>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_DCMI_Init+0x60>)
 8000792:	f001 f831 	bl	80017f8 <HAL_DCMI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DCMI_Init+0x5c>
		Error_Handler();
 800079c:	f000 f942 	bl	8000a24 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24000034 	.word	0x24000034
 80007a8:	48020000 	.word	0x48020000

080007ac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80007b0:	4b22      	ldr	r3, [pc, #136]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	@ (8000840 <MX_USART1_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007b8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80007bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007f4:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_USART1_UART_Init+0x90>)
 80007f6:	f007 fda5 	bl	8008344 <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000800:	f000 f910 	bl	8000a24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	@ (800083c <MX_USART1_UART_Init+0x90>)
 8000808:	f009 fb49 	bl	8009e9e <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000812:	f000 f907 	bl	8000a24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	@ (800083c <MX_USART1_UART_Init+0x90>)
 800081a:	f009 fb7e 	bl	8009f1a <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000824:	f000 f8fe 	bl	8000a24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_USART1_UART_Init+0x90>)
 800082a:	f009 faff 	bl	8009e2c <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000834:	f000 f8f6 	bl	8000a24 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000fc 	.word	0x240000fc
 8000840:	40011000 	.word	0x40011000

08000844 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_DMA_Init+0x4c>)
 800084c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000850:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <MX_DMA_Init+0x4c>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_DMA_Init+0x4c>)
 800085c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	200b      	movs	r0, #11
 800086e:	f000 ff16 	bl	800169e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000872:	200b      	movs	r0, #11
 8000874:	f000 ff2d 	bl	80016d2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	200c      	movs	r0, #12
 800087e:	f000 ff0e 	bl	800169e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000882:	200c      	movs	r0, #12
 8000884:	f000 ff25 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400

08000894 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	4a39      	ldr	r2, [pc, #228]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ba:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b33      	ldr	r3, [pc, #204]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <MX_GPIO_Init+0x104>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <MX_GPIO_Init+0x104>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	4a23      	ldr	r2, [pc, #140]	@ (8000998 <MX_GPIO_Init+0x104>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000914:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <MX_GPIO_Init+0x104>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_GPIO_Init+0x104>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <MX_GPIO_Init+0x104>)
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_GPIO_Init+0x104>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SCCB_SIO_C_Pin | SCCB_SIO_D_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000946:	4815      	ldr	r0, [pc, #84]	@ (800099c <MX_GPIO_Init+0x108>)
 8000948:	f004 fe96 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, OV2640_PWDN_Pin | OV2640_RESET_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2106      	movs	r1, #6
 8000950:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <MX_GPIO_Init+0x10c>)
 8000952:	f004 fe91 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SCCB_SIO_C_Pin SCCB_SIO_D_Pin */
	GPIO_InitStruct.Pin = SCCB_SIO_C_Pin | SCCB_SIO_D_Pin;
 8000956:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800095a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0x108>)
 8000970:	f004 fcba 	bl	80052e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : OV2640_PWDN_Pin OV2640_RESET_Pin */
	GPIO_InitStruct.Pin = OV2640_PWDN_Pin | OV2640_RESET_Pin;
 8000974:	2306      	movs	r3, #6
 8000976:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_GPIO_Init+0x10c>)
 800098c:	f004 fcac 	bl	80052e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400
 800099c:	58020400 	.word	0x58020400
 80009a0:	58020c00 	.word	0x58020c00

080009a4 <HAL_DCMI_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi) {
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (jpeg_new_frame == 0) {
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_DCMI_FrameEventCallback+0x24>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <HAL_DCMI_FrameEventCallback+0x18>
		jpeg_new_frame = 1;
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <HAL_DCMI_FrameEventCallback+0x24>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
	}
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	24005208 	.word	0x24005208

080009cc <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80009de:	f000 fe93 	bl	8001708 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009ee:	231f      	movs	r3, #31
 80009f0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80009f2:	2387      	movs	r3, #135	@ 0x87
 80009f4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009fa:	2300      	movs	r3, #0
 80009fc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009fe:	2301      	movs	r3, #1
 8000a00:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 feb1 	bl	8001778 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a16:	2004      	movs	r0, #4
 8000a18:	f000 fe8e 	bl	8001738 <HAL_MPU_Enable>

}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_MspInit+0x30>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_MspInit+0x30>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x30>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	58024400 	.word	0x58024400

08000a64 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	@ 0x38
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a79      	ldr	r2, [pc, #484]	@ (8000c68 <HAL_DCMI_MspInit+0x204>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	f040 80ec 	bne.w	8000c60 <HAL_DCMI_MspInit+0x1fc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a88:	4b78      	ldr	r3, [pc, #480]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000a8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a8e:	4a77      	ldr	r2, [pc, #476]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000a98:	4b74      	ldr	r3, [pc, #464]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000a9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa6:	4b71      	ldr	r3, [pc, #452]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	4a6f      	ldr	r2, [pc, #444]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b69      	ldr	r3, [pc, #420]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	4a68      	ldr	r2, [pc, #416]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad4:	4b65      	ldr	r3, [pc, #404]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b62      	ldr	r3, [pc, #392]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	4a60      	ldr	r2, [pc, #384]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af2:	4b5e      	ldr	r3, [pc, #376]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b5a      	ldr	r3, [pc, #360]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a59      	ldr	r2, [pc, #356]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b56      	ldr	r3, [pc, #344]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b53      	ldr	r3, [pc, #332]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a51      	ldr	r2, [pc, #324]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c6c <HAL_DCMI_MspInit+0x208>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b3c:	2370      	movs	r3, #112	@ 0x70
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b4c:	230d      	movs	r3, #13
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4846      	ldr	r0, [pc, #280]	@ (8000c70 <HAL_DCMI_MspInit+0x20c>)
 8000b58:	f004 fbc6 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b5c:	2350      	movs	r3, #80	@ 0x50
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b6c:	230d      	movs	r3, #13
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	483f      	ldr	r0, [pc, #252]	@ (8000c74 <HAL_DCMI_MspInit+0x210>)
 8000b78:	f004 fbb6 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b7c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b8e:	230d      	movs	r3, #13
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4837      	ldr	r0, [pc, #220]	@ (8000c78 <HAL_DCMI_MspInit+0x214>)
 8000b9a:	f004 fba5 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bae:	230d      	movs	r3, #13
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	@ (8000c7c <HAL_DCMI_MspInit+0x218>)
 8000bba:	f004 fb95 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bce:	230d      	movs	r3, #13
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4829      	ldr	r0, [pc, #164]	@ (8000c80 <HAL_DCMI_MspInit+0x21c>)
 8000bda:	f004 fb85 	bl	80052e8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000be0:	4a29      	ldr	r2, [pc, #164]	@ (8000c88 <HAL_DCMI_MspInit+0x224>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000be6:	224b      	movs	r2, #75	@ 0x4b
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c0c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c14:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c24:	2203      	movs	r2, #3
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000c34:	4813      	ldr	r0, [pc, #76]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c36:	f001 f86b 	bl	8001d10 <HAL_DMA_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8000c40:	f7ff fef0 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c48:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <HAL_DCMI_MspInit+0x220>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	204e      	movs	r0, #78	@ 0x4e
 8000c56:	f000 fd22 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000c5a:	204e      	movs	r0, #78	@ 0x4e
 8000c5c:	f000 fd39 	bl	80016d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8000c60:	bf00      	nop
 8000c62:	3738      	adds	r7, #56	@ 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	48020000 	.word	0x48020000
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58021000 	.word	0x58021000
 8000c74:	58020000 	.word	0x58020000
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020c00 	.word	0x58020c00
 8000c80:	58020400 	.word	0x58020400
 8000c84:	24000084 	.word	0x24000084
 8000c88:	40020028 	.word	0x40020028

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	22c0      	movs	r2, #192	@ 0xc0
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f009 f9c1 	bl	800a034 <memset>
  if(huart->Instance==USART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a41      	ldr	r2, [pc, #260]	@ (8000dbc <HAL_UART_MspInit+0x130>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d17b      	bne.n	8000db4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cbc:	f04f 0201 	mov.w	r2, #1
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f005 fd0a 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cde:	f7ff fea1 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce2:	4b37      	ldr	r3, [pc, #220]	@ (8000dc0 <HAL_UART_MspInit+0x134>)
 8000ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ce8:	4a35      	ldr	r2, [pc, #212]	@ (8000dc0 <HAL_UART_MspInit+0x134>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cf2:	4b33      	ldr	r3, [pc, #204]	@ (8000dc0 <HAL_UART_MspInit+0x134>)
 8000cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <HAL_UART_MspInit+0x134>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc0 <HAL_UART_MspInit+0x134>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <HAL_UART_MspInit+0x134>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d1e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d42:	4619      	mov	r1, r3
 8000d44:	481f      	ldr	r0, [pc, #124]	@ (8000dc4 <HAL_UART_MspInit+0x138>)
 8000d46:	f004 facf 	bl	80052e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <HAL_UART_MspInit+0x140>)
 8000d4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d52:	222a      	movs	r2, #42	@ 0x2a
 8000d54:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d58:	2240      	movs	r2, #64	@ 0x40
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d88:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d8a:	f000 ffc1 	bl	8001d10 <HAL_DMA_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000d94:	f7ff fe46 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_UART_MspInit+0x13c>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2025      	movs	r0, #37	@ 0x25
 8000daa:	f000 fc78 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dae:	2025      	movs	r0, #37	@ 0x25
 8000db0:	f000 fc8f 	bl	80016d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000db4:	bf00      	nop
 8000db6:	37e8      	adds	r7, #232	@ 0xe8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020400 	.word	0x58020400
 8000dc8:	24000190 	.word	0x24000190
 8000dcc:	40020010 	.word	0x40020010

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <MemManage_Handler+0x4>

08000de8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e26:	f000 fb33 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <DMA1_Stream0_IRQHandler+0x10>)
 8000e36:	f002 fa95 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000190 	.word	0x24000190

08000e44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x10>)
 8000e4a:	f002 fa8b 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000084 	.word	0x24000084

08000e58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <USART1_IRQHandler+0x10>)
 8000e5e:	f007 fb41 	bl	80084e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	240000fc 	.word	0x240000fc

08000e6c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <DCMI_IRQHandler+0x10>)
 8000e72:	f000 fdfd 	bl	8001a70 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000034 	.word	0x24000034

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e84:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <SystemInit+0xe4>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <SystemInit+0xe4>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e94:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <SystemInit+0xe8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	d807      	bhi.n	8000eb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea0:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <SystemInit+0xe8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 030f 	bic.w	r3, r3, #15
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <SystemInit+0xe8>)
 8000eaa:	f043 0307 	orr.w	r3, r3, #7
 8000eae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <SystemInit+0xec>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f6c <SystemInit+0xec>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <SystemInit+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <SystemInit+0xec>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4929      	ldr	r1, [pc, #164]	@ (8000f6c <SystemInit+0xec>)
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <SystemInit+0xf0>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <SystemInit+0xe8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <SystemInit+0xe8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 030f 	bic.w	r3, r3, #15
 8000ee2:	4a21      	ldr	r2, [pc, #132]	@ (8000f68 <SystemInit+0xe8>)
 8000ee4:	f043 0307 	orr.w	r3, r3, #7
 8000ee8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <SystemInit+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <SystemInit+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <SystemInit+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <SystemInit+0xec>)
 8000efe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <SystemInit+0xf4>)
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <SystemInit+0xec>)
 8000f04:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <SystemInit+0xf8>)
 8000f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <SystemInit+0xec>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <SystemInit+0xfc>)
 8000f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <SystemInit+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <SystemInit+0xec>)
 8000f16:	4a19      	ldr	r2, [pc, #100]	@ (8000f7c <SystemInit+0xfc>)
 8000f18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <SystemInit+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <SystemInit+0xec>)
 8000f22:	4a16      	ldr	r2, [pc, #88]	@ (8000f7c <SystemInit+0xfc>)
 8000f24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <SystemInit+0xec>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <SystemInit+0xec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <SystemInit+0xec>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <SystemInit+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <SystemInit+0x100>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <SystemInit+0x104>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f4a:	d202      	bcs.n	8000f52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <SystemInit+0x108>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <SystemInit+0x10c>)
 8000f54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	52002000 	.word	0x52002000
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f74:	02020200 	.word	0x02020200
 8000f78:	01ff0000 	.word	0x01ff0000
 8000f7c:	01010280 	.word	0x01010280
 8000f80:	5c001000 	.word	0x5c001000
 8000f84:	ffff0000 	.word	0xffff0000
 8000f88:	51008108 	.word	0x51008108
 8000f8c:	52004000 	.word	0x52004000

08000f90 <Reset_Handler>:
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopFillZerobss+0xe>
 8000f94:	f7ff ff74 	bl	8000e80 <SystemInit>
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x12>)
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopFillZerobss+0x16>)
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x1a>)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:
 8000fa2:	58d4      	ldr	r4, [r2, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:
 8000fa8:	18c4      	adds	r4, r0, r3
 8000faa:	428c      	cmp	r4, r1
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopFillZerobss+0x1e>)
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x22>)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:
 8000fba:	42a2      	cmp	r2, r4
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>
 8000fbe:	f009 f841 	bl	800a044 <__libc_init_array>
 8000fc2:	f7ff fb01 	bl	80005c8 <main>
 8000fc6:	4770      	bx	lr
 8000fc8:	24080000 	.word	0x24080000
 8000fcc:	24000000 	.word	0x24000000
 8000fd0:	24000018 	.word	0x24000018
 8000fd4:	0800a2e8 	.word	0x0800a2e8
 8000fd8:	24000018 	.word	0x24000018
 8000fdc:	24005210 	.word	0x24005210

08000fe0 <ADC3_IRQHandler>:
 8000fe0:	e7fe      	b.n	8000fe0 <ADC3_IRQHandler>
	...

08000fe4 <Delay_us>:
/**
 * @brief  Microsecond delay
 * @param  Delay specifies the delay time length, in microseconds.
 * @retval None
 */
void Delay_us(uint32_t Delay) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	if (Delay > 0) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d017      	beq.n	8001022 <Delay_us+0x3e>
		SysTick->LOAD = SYSTICK_LOAD * Delay;		 // Set systick reload value
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <Delay_us+0x4c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <Delay_us+0x50>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0c9b      	lsrs	r3, r3, #18
 8000ffe:	490e      	ldr	r1, [pc, #56]	@ (8001038 <Delay_us+0x54>)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0x00;				  // Set SysTick Current Value to 0
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <Delay_us+0x54>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
		SysTick->CTRL = 0x00000005;	// Set SysTick clock source to use processor clock and enable timer
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <Delay_us+0x54>)
 8001010:	2205      	movs	r2, #5
 8001012:	601a      	str	r2, [r3, #0]
		while (!(SysTick->CTRL & 0x00010000)) // Wait for the timer to count to 0
 8001014:	bf00      	nop
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <Delay_us+0x54>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <Delay_us+0x32>
		{
		}
//		SysTick->CTRL = 0x00000004; // Disable timer
	}
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	24000008 	.word	0x24000008
 8001034:	431bde83 	.word	0x431bde83
 8001038:	e000e010 	.word	0xe000e010

0800103c <Delay_ms>:
/**
 * @brief  Millisecond delay
 * @param  Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
void Delay_ms(uint32_t Delay) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if (Delay > 0) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <Delay_ms+0x22>
		while (Delay--) {
 800104a:	e003      	b.n	8001054 <Delay_ms+0x18>
			Delay_us(1000);
 800104c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001050:	f7ff ffc8 	bl	8000fe4 <Delay_us>
		while (Delay--) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f6      	bne.n	800104c <Delay_ms+0x10>
		}
	}
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <OV2640_HW_Reset>:
#define RESET_PIN GPIO_PIN_2

#define SCCB_Write(sub_address, data) SWSCCB_WriteReg(OV2640_DEVICE_ADDRESS, sub_address, data)
#define SCCB_Read(sub_address) SWSCCB_ReadReg(OV2640_DEVICE_ADDRESS, sub_address)

void OV2640_HW_Reset(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	// Reset Camera
	HAL_GPIO_WritePin(PWDN_RESET_GPIOx, RESET_PIN, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2104      	movs	r1, #4
 8001070:	4807      	ldr	r0, [pc, #28]	@ (8001090 <OV2640_HW_Reset+0x28>)
 8001072:	f004 fb01 	bl	8005678 <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f7ff ffe0 	bl	800103c <Delay_ms>
	HAL_GPIO_WritePin(PWDN_RESET_GPIOx, RESET_PIN, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2104      	movs	r1, #4
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <OV2640_HW_Reset+0x28>)
 8001082:	f004 faf9 	bl	8005678 <HAL_GPIO_WritePin>
	Delay_ms(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f7ff ffd8 	bl	800103c <Delay_ms>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58020c00 	.word	0x58020c00

08001094 <OV2640_SetPowerDownMode>:

void OV2640_SetPowerDownMode(GPIO_PinState PinState) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	// Set Device into Normal Mode
	if (PinState) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <OV2640_SetPowerDownMode+0x1c>
		HAL_GPIO_WritePin(PWDN_RESET_GPIOx, PWDN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2102      	movs	r1, #2
 80010a8:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <OV2640_SetPowerDownMode+0x30>)
 80010aa:	f004 fae5 	bl	8005678 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(PWDN_RESET_GPIOx, PWDN_PIN, GPIO_PIN_RESET);
	}
}
 80010ae:	e004      	b.n	80010ba <OV2640_SetPowerDownMode+0x26>
		HAL_GPIO_WritePin(PWDN_RESET_GPIOx, PWDN_PIN, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2102      	movs	r1, #2
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <OV2640_SetPowerDownMode+0x30>)
 80010b6:	f004 fadf 	bl	8005678 <HAL_GPIO_WritePin>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58020c00 	.word	0x58020c00

080010c8 <OV2640_InitConfig>:
	MID <<= 8;
	MID |= SCCB_Read(OV2640_SENSOR_MIDL);
	return MID;
}

void OV2640_InitConfig(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint32_t cfg_len = sizeof(ov2640_qvga_cfg) / sizeof(ov2640_qvga_cfg[0]);
 80010ce:	23dc      	movs	r3, #220	@ 0xdc
 80010d0:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i < cfg_len; i++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e00f      	b.n	80010f8 <OV2640_InitConfig+0x30>
		SCCB_Write(ov2640_qvga_cfg[i][0], ov2640_qvga_cfg[i][1]);
 80010d8:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <OV2640_InitConfig+0x44>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <OV2640_InitConfig+0x44>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	461a      	mov	r2, r3
 80010ec:	2060      	movs	r0, #96	@ 0x60
 80010ee:	f000 f93f 	bl	8001370 <SWSCCB_WriteReg>
	for (uint32_t i = 0; i < cfg_len; i++) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3301      	adds	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3eb      	bcc.n	80010d8 <OV2640_InitConfig+0x10>
	}
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800a0d0 	.word	0x0800a0d0

08001110 <OV2640_SetOutputJPEG>:

void OV2640_SetOutputJPEG(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint16_t cfg_len = sizeof(ov2640_yuv422_cfg) / sizeof(ov2640_yuv422_cfg[0]);
 8001116:	2308      	movs	r3, #8
 8001118:	807b      	strh	r3, [r7, #2]
	for (uint16_t cfg_index = 0; cfg_index < cfg_len; cfg_index++) {
 800111a:	2300      	movs	r3, #0
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	e00f      	b.n	8001140 <OV2640_SetOutputJPEG+0x30>
		SCCB_Write(ov2640_yuv422_cfg[cfg_index][0],
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <OV2640_SetOutputJPEG+0x74>)
 8001124:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <OV2640_SetOutputJPEG+0x74>)
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	461a      	mov	r2, r3
 8001134:	2060      	movs	r0, #96	@ 0x60
 8001136:	f000 f91b 	bl	8001370 <SWSCCB_WriteReg>
	for (uint16_t cfg_index = 0; cfg_index < cfg_len; cfg_index++) {
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	3301      	adds	r3, #1
 800113e:	80fb      	strh	r3, [r7, #6]
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3eb      	bcc.n	8001120 <OV2640_SetOutputJPEG+0x10>
				ov2640_yuv422_cfg[cfg_index][1]);
	}
	cfg_len = sizeof(ov2640_jpeg_cfg) / sizeof(ov2640_jpeg_cfg[0]);
 8001148:	2307      	movs	r3, #7
 800114a:	807b      	strh	r3, [r7, #2]
	for (uint16_t cfg_index = 0; cfg_index < cfg_len; cfg_index++) {
 800114c:	2300      	movs	r3, #0
 800114e:	80bb      	strh	r3, [r7, #4]
 8001150:	e00f      	b.n	8001172 <OV2640_SetOutputJPEG+0x62>
		SCCB_Write(ov2640_jpeg_cfg[cfg_index][0], ov2640_jpeg_cfg[cfg_index][1]);
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <OV2640_SetOutputJPEG+0x78>)
 8001156:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <OV2640_SetOutputJPEG+0x78>)
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	461a      	mov	r2, r3
 8001166:	2060      	movs	r0, #96	@ 0x60
 8001168:	f000 f902 	bl	8001370 <SWSCCB_WriteReg>
	for (uint16_t cfg_index = 0; cfg_index < cfg_len; cfg_index++) {
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	80bb      	strh	r3, [r7, #4]
 8001172:	88ba      	ldrh	r2, [r7, #4]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3eb      	bcc.n	8001152 <OV2640_SetOutputJPEG+0x42>
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0800a288 	.word	0x0800a288
 8001188:	0800a298 	.word	0x0800a298

0800118c <OV2640_Init>:
	SCCB_Write(0XD3, DVP_Clock); // DVP PCLK division
	SCCB_Write(0XFF, 0x01);
	SCCB_Write(0X11, Clock); // CLK division
}

void OV2640_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	OV2640_HW_Reset();
 8001190:	f7ff ff6a 	bl	8001068 <OV2640_HW_Reset>
	OV2640_SetPowerDownMode(0);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff7d 	bl	8001094 <OV2640_SetPowerDownMode>
	OV2640_InitConfig();
 800119a:	f7ff ff95 	bl	80010c8 <OV2640_InitConfig>
	OV2640_SetOutputJPEG();
 800119e:	f7ff ffb7 	bl	8001110 <OV2640_SetOutputJPEG>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <SIO_D_SetInput>:
#define SIO_C_WritePin(PinState) HAL_GPIO_WritePin(SCCB_GPIOx, SIO_C_PIN, PinState)
#define SIO_D_WritePin(PinState) HAL_GPIO_WritePin(SCCB_GPIOx, SIO_D_PIN, PinState)
#define SIO_D_ReadPin() HAL_GPIO_ReadPin(SCCB_GPIOx, SIO_D_PIN)
#define SCCB_Delay() Delay_us(5)

void SIO_D_SetInput(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = SIO_D_PIN;
 80011bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SCCB_GPIOx, &GPIO_InitStruct);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <SIO_D_SetInput+0x38>)
 80011d4:	f004 f888 	bl	80052e8 <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58020400 	.word	0x58020400

080011e4 <SIO_D_SetOutput>:

void SIO_D_SetOutput(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = SIO_D_PIN;
 80011f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SCCB_GPIOx, &GPIO_InitStruct);
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <SIO_D_SetOutput+0x38>)
 8001210:	f004 f86a 	bl	80052e8 <HAL_GPIO_Init>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58020400 	.word	0x58020400

08001220 <SWSCCB_Start>:

void SWSCCB_Start(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	// make sure SIO_C SIO_D high
	SIO_C_WritePin(GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800122a:	4810      	ldr	r0, [pc, #64]	@ (800126c <SWSCCB_Start+0x4c>)
 800122c:	f004 fa24 	bl	8005678 <HAL_GPIO_WritePin>
	SIO_D_WritePin(GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <SWSCCB_Start+0x4c>)
 8001238:	f004 fa1e 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 800123c:	2005      	movs	r0, #5
 800123e:	f7ff fed1 	bl	8000fe4 <Delay_us>
	// SCCB Start condition
	SIO_D_WritePin(GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001248:	4808      	ldr	r0, [pc, #32]	@ (800126c <SWSCCB_Start+0x4c>)
 800124a:	f004 fa15 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 800124e:	2005      	movs	r0, #5
 8001250:	f7ff fec8 	bl	8000fe4 <Delay_us>
	SIO_C_WritePin(GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <SWSCCB_Start+0x4c>)
 800125c:	f004 fa0c 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001260:	2005      	movs	r0, #5
 8001262:	f7ff febf 	bl	8000fe4 <Delay_us>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	58020400 	.word	0x58020400

08001270 <SWSCCB_Stop>:

void SWSCCB_Stop(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	// make sure SIO_D high
	SIO_D_WritePin(GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800127a:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <SWSCCB_Stop+0x40>)
 800127c:	f004 f9fc 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001280:	2005      	movs	r0, #5
 8001282:	f7ff feaf 	bl	8000fe4 <Delay_us>
	// SCCB Stop condition
	SIO_C_WritePin(GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800128c:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <SWSCCB_Stop+0x40>)
 800128e:	f004 f9f3 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001292:	2005      	movs	r0, #5
 8001294:	f7ff fea6 	bl	8000fe4 <Delay_us>
	SIO_D_WritePin(GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129e:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <SWSCCB_Stop+0x40>)
 80012a0:	f004 f9ea 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 80012a4:	2005      	movs	r0, #5
 80012a6:	f7ff fe9d 	bl	8000fe4 <Delay_us>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	58020400 	.word	0x58020400

080012b4 <SWSCCB_WriteByte>:

uint8_t SWSCCB_WriteByte(uint8_t byte) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	uint8_t x_bit;
	for (uint8_t i = 0; i < 8; i++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e02b      	b.n	800131c <SWSCCB_WriteByte+0x68>
		if (byte & 0x80) {
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da06      	bge.n	80012da <SWSCCB_WriteByte+0x26>
			SIO_D_WritePin(GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d2:	4826      	ldr	r0, [pc, #152]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 80012d4:	f004 f9d0 	bl	8005678 <HAL_GPIO_WritePin>
 80012d8:	e005      	b.n	80012e6 <SWSCCB_WriteByte+0x32>
		} else {
			SIO_D_WritePin(GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e0:	4822      	ldr	r0, [pc, #136]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 80012e2:	f004 f9c9 	bl	8005678 <HAL_GPIO_WritePin>
		}
		byte <<= 1;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 80012ec:	2005      	movs	r0, #5
 80012ee:	f7ff fe79 	bl	8000fe4 <Delay_us>
		SIO_C_WritePin(GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012f8:	481c      	ldr	r0, [pc, #112]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 80012fa:	f004 f9bd 	bl	8005678 <HAL_GPIO_WritePin>
		SCCB_Delay();
 80012fe:	2005      	movs	r0, #5
 8001300:	f7ff fe70 	bl	8000fe4 <Delay_us>
		SIO_C_WritePin(GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800130a:	4818      	ldr	r0, [pc, #96]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 800130c:	f004 f9b4 	bl	8005678 <HAL_GPIO_WritePin>
		SCCB_Delay();
 8001310:	2005      	movs	r0, #5
 8001312:	f7ff fe67 	bl	8000fe4 <Delay_us>
	for (uint8_t i = 0; i < 8; i++) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3301      	adds	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b07      	cmp	r3, #7
 8001320:	d9d0      	bls.n	80012c4 <SWSCCB_WriteByte+0x10>
	}
	SIO_D_SetInput();
 8001322:	f7ff ff41 	bl	80011a8 <SIO_D_SetInput>
	SCCB_Delay();
 8001326:	2005      	movs	r0, #5
 8001328:	f7ff fe5c 	bl	8000fe4 <Delay_us>
	SIO_C_WritePin(GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001332:	480e      	ldr	r0, [pc, #56]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 8001334:	f004 f9a0 	bl	8005678 <HAL_GPIO_WritePin>
	x_bit = SIO_D_ReadPin(); // X, Don't care bit, typical value is 0
 8001338:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800133c:	480b      	ldr	r0, [pc, #44]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 800133e:	f004 f983 	bl	8005648 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	73bb      	strb	r3, [r7, #14]
	SCCB_Delay();
 8001346:	2005      	movs	r0, #5
 8001348:	f7ff fe4c 	bl	8000fe4 <Delay_us>
	SIO_C_WritePin(GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <SWSCCB_WriteByte+0xb8>)
 8001354:	f004 f990 	bl	8005678 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001358:	2005      	movs	r0, #5
 800135a:	f7ff fe43 	bl	8000fe4 <Delay_us>
	SIO_D_SetOutput();
 800135e:	f7ff ff41 	bl	80011e4 <SIO_D_SetOutput>
	return x_bit;
 8001362:	7bbb      	ldrb	r3, [r7, #14]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58020400 	.word	0x58020400

08001370 <SWSCCB_WriteReg>:
	SIO_D_SetOutput();

	return byte;
}

void SWSCCB_WriteReg(uint8_t id_address, uint8_t sub_address, uint8_t data) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	460b      	mov	r3, r1
 800137c:	71bb      	strb	r3, [r7, #6]
 800137e:	4613      	mov	r3, r2
 8001380:	717b      	strb	r3, [r7, #5]
	// 3-Phase Write
	SWSCCB_Start();
 8001382:	f7ff ff4d 	bl	8001220 <SWSCCB_Start>
	SWSCCB_WriteByte(id_address);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff93 	bl	80012b4 <SWSCCB_WriteByte>
	SWSCCB_WriteByte(sub_address);
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff8f 	bl	80012b4 <SWSCCB_WriteByte>
	SWSCCB_WriteByte(data);
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff8b 	bl	80012b4 <SWSCCB_WriteByte>
	SWSCCB_Stop();
 800139e:	f7ff ff67 	bl	8001270 <SWSCCB_Stop>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f968 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013b8:	f004 ffc2 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_Init+0x68>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	4913      	ldr	r1, [pc, #76]	@ (8001418 <HAL_Init+0x6c>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_Init+0x68>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_Init+0x6c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	4a0b      	ldr	r2, [pc, #44]	@ (800141c <HAL_Init+0x70>)
 80013ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_Init+0x74>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f814 	bl	8001424 <HAL_InitTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e002      	b.n	800140c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001406:	f7ff fb13 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	58024400 	.word	0x58024400
 8001418:	0800a0c0 	.word	0x0800a0c0
 800141c:	2400000c 	.word	0x2400000c
 8001420:	24000008 	.word	0x24000008

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_InitTick+0x60>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e021      	b.n	800147c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_InitTick+0x64>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_InitTick+0x60>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f94d 	bl	80016ee <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f917 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	@ (800148c <HAL_InitTick+0x68>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000014 	.word	0x24000014
 8001488:	24000008 	.word	0x24000008
 800148c:	24000010 	.word	0x24000010

08001490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	24000014 	.word	0x24000014
 80014b4:	2400520c 	.word	0x2400520c

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2400520c 	.word	0x2400520c

080014d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetREVID+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1b      	lsrs	r3, r3, #16
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	5c001000 	.word	0x5c001000

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <__NVIC_SetPriorityGrouping+0x40>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	4313      	orrs	r3, r2
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x40>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	05fa0000 	.word	0x05fa0000

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff40 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff90 	bl	80015dc <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5f 	bl	8001588 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff33 	bl	800154c <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa4 	bl	8001644 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800170c:	f3bf 8f5f 	dmb	sy
}
 8001710:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_MPU_Disable+0x28>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <HAL_MPU_Disable+0x28>)
 8001718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_MPU_Disable+0x2c>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00
 8001734:	e000ed90 	.word	0xe000ed90

08001738 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001740:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <HAL_MPU_Enable+0x38>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_MPU_Enable+0x3c>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_MPU_Enable+0x3c>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001754:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001756:	f3bf 8f4f 	dsb	sy
}
 800175a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800175c:	f3bf 8f6f 	isb	sy
}
 8001760:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed90 	.word	0xe000ed90
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	785a      	ldrb	r2, [r3, #1]
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001786:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HAL_MPU_ConfigRegion+0x7c>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	4a19      	ldr	r2, [pc, #100]	@ (80017f4 <HAL_MPU_ConfigRegion+0x7c>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001794:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7adb      	ldrb	r3, [r3, #11]
 80017a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a9b      	ldrb	r3, [r3, #10]
 80017ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b5b      	ldrb	r3, [r3, #13]
 80017b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b9b      	ldrb	r3, [r3, #14]
 80017be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7bdb      	ldrb	r3, [r3, #15]
 80017c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7a5b      	ldrb	r3, [r3, #9]
 80017ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e4:	6113      	str	r3, [r2, #16]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed90 	.word	0xe000ed90

080017f8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e069      	b.n	80018de <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff f924 	bl	8000a64 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6819      	ldr	r1, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <HAL_DCMI_Init+0xf0>)
 800183e:	400b      	ands	r3, r1
 8001840:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001856:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001862:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800186e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800187a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001886:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b10      	cmp	r3, #16
 8001896:	d112      	bne.n	80018be <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7f1b      	ldrb	r3, [r3, #28]
 800189c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7f5b      	ldrb	r3, [r3, #29]
 80018a2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018a4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7f9b      	ldrb	r3, [r3, #30]
 80018aa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80018ac:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7fdb      	ldrb	r3, [r3, #31]
 80018b4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80018ba:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018bc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 021e 	orr.w	r2, r2, #30
 80018cc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	ffe0f007 	.word	0xffe0f007

080018ec <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_DCMI_Start_DMA+0x1c>
 8001904:	2302      	movs	r3, #2
 8001906:	e0ab      	b.n	8001a60 <HAL_DCMI_Start_DMA+0x174>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001926:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0202 	bic.w	r2, r2, #2
 8001936:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194c:	4a46      	ldr	r2, [pc, #280]	@ (8001a68 <HAL_DCMI_Start_DMA+0x17c>)
 800194e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001954:	4a45      	ldr	r2, [pc, #276]	@ (8001a6c <HAL_DCMI_Start_DMA+0x180>)
 8001956:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195c:	2200      	movs	r2, #0
 800195e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800197e:	d219      	bcs.n	80019b4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3328      	adds	r3, #40	@ 0x28
 800198a:	4619      	mov	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	f000 fd1a 	bl	80023c8 <HAL_DMA_Start_IT>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d055      	beq.n	8001a46 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2240      	movs	r2, #64	@ 0x40
 800199e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e055      	b.n	8001a60 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a68 <HAL_DCMI_Start_DMA+0x17c>)
 80019ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80019ce:	e009      	b.n	80019e4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d4:	085a      	lsrs	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019de:	005a      	lsls	r2, r3, #1
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ec:	d2f0      	bcs.n	80019d0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f2:	1e9a      	subs	r2, r3, #2
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3328      	adds	r3, #40	@ 0x28
 8001a16:	4619      	mov	r1, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	f002 ffb1 	bl	8004988 <HAL_DMAEx_MultiBufferStart_IT>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00c      	b.n	8001a60 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	08001bb1 	.word	0x08001bb1
 8001a6c:	08001cd7 	.word	0x08001cd7

08001a70 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aaa:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <HAL_DCMI_IRQHandler+0x100>)
 8001aac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fa10 	bl	8002ed8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <HAL_DCMI_IRQHandler+0x100>)
 8001ae4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 f9f4 	bl	8002ed8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2210      	movs	r2, #16
 8001b00:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f840 	bl	8001b88 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2208      	movs	r2, #8
 8001b18:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f83e 	bl	8001b9c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01d      	beq.n	8001b66 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d107      	bne.n	8001b48 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 021e 	bic.w	r2, r2, #30
 8001b46:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7fe ff1f 	bl	80009a4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08001cd7 	.word	0x08001cd7

08001b74 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d043      	beq.n	8001c4e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bd2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <DCMI_DMAXferCplt+0x62>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf8:	00da      	lsls	r2, r3, #3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	f003 fa1f 	bl	8005044 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c10:	e044      	b.n	8001c9c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d13c      	bne.n	8001c9c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c34:	00da      	lsls	r2, r3, #3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f003 fa01 	bl	8005044 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c46:	1e5a      	subs	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c4c:	e026      	b.n	8001c9c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	e017      	b.n	8001c9c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10f      	bne.n	8001c9c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c80:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c86:	0099      	lsls	r1, r3, #2
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	440a      	add	r2, r1
 8001c92:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d112      	bne.n	8001cce <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d103      	bne.n	8001cce <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d009      	beq.n	8001d02 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ff36 	bl	8001b74 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff fbce 	bl	80014b8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e316      	b.n	8002356 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a66      	ldr	r2, [pc, #408]	@ (8001ec8 <HAL_DMA_Init+0x1b8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04a      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a65      	ldr	r2, [pc, #404]	@ (8001ecc <HAL_DMA_Init+0x1bc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d045      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a63      	ldr	r2, [pc, #396]	@ (8001ed0 <HAL_DMA_Init+0x1c0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a62      	ldr	r2, [pc, #392]	@ (8001ed4 <HAL_DMA_Init+0x1c4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d03b      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a60      	ldr	r2, [pc, #384]	@ (8001ed8 <HAL_DMA_Init+0x1c8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d036      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001edc <HAL_DMA_Init+0x1cc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d031      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee0 <HAL_DMA_Init+0x1d0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02c      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee4 <HAL_DMA_Init+0x1d4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d027      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee8 <HAL_DMA_Init+0x1d8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a59      	ldr	r2, [pc, #356]	@ (8001eec <HAL_DMA_Init+0x1dc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <HAL_DMA_Init+0x1e0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a56      	ldr	r2, [pc, #344]	@ (8001ef4 <HAL_DMA_Init+0x1e4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a54      	ldr	r2, [pc, #336]	@ (8001ef8 <HAL_DMA_Init+0x1e8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a53      	ldr	r2, [pc, #332]	@ (8001efc <HAL_DMA_Init+0x1ec>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a51      	ldr	r2, [pc, #324]	@ (8001f00 <HAL_DMA_Init+0x1f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_Init+0xb8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a50      	ldr	r2, [pc, #320]	@ (8001f04 <HAL_DMA_Init+0x1f4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Init+0xbc>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_DMA_Init+0xbe>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 813b 	beq.w	800204a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <HAL_DMA_Init+0x1b8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d04a      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a36      	ldr	r2, [pc, #216]	@ (8001ecc <HAL_DMA_Init+0x1bc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d045      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a34      	ldr	r2, [pc, #208]	@ (8001ed0 <HAL_DMA_Init+0x1c0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d040      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a33      	ldr	r2, [pc, #204]	@ (8001ed4 <HAL_DMA_Init+0x1c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d03b      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a31      	ldr	r2, [pc, #196]	@ (8001ed8 <HAL_DMA_Init+0x1c8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d036      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a30      	ldr	r2, [pc, #192]	@ (8001edc <HAL_DMA_Init+0x1cc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d031      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee0 <HAL_DMA_Init+0x1d0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02c      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee4 <HAL_DMA_Init+0x1d4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d027      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee8 <HAL_DMA_Init+0x1d8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d022      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2a      	ldr	r2, [pc, #168]	@ (8001eec <HAL_DMA_Init+0x1dc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d01d      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a28      	ldr	r2, [pc, #160]	@ (8001ef0 <HAL_DMA_Init+0x1e0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d018      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <HAL_DMA_Init+0x1e4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <HAL_DMA_Init+0x1e8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00e      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <HAL_DMA_Init+0x1ec>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_DMA_Init+0x1f0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_DMA_Init+0x174>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_DMA_Init+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d108      	bne.n	8001e96 <HAL_DMA_Init+0x186>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_DMA_Init+0x196>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ea6:	e02f      	b.n	8001f08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea8:	f7ff fb06 	bl	80014b8 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d928      	bls.n	8001f08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e246      	b.n	8002356 <HAL_DMA_Init+0x646>
 8001ec8:	40020010 	.word	0x40020010
 8001ecc:	40020028 	.word	0x40020028
 8001ed0:	40020040 	.word	0x40020040
 8001ed4:	40020058 	.word	0x40020058
 8001ed8:	40020070 	.word	0x40020070
 8001edc:	40020088 	.word	0x40020088
 8001ee0:	400200a0 	.word	0x400200a0
 8001ee4:	400200b8 	.word	0x400200b8
 8001ee8:	40020410 	.word	0x40020410
 8001eec:	40020428 	.word	0x40020428
 8001ef0:	40020440 	.word	0x40020440
 8001ef4:	40020458 	.word	0x40020458
 8001ef8:	40020470 	.word	0x40020470
 8001efc:	40020488 	.word	0x40020488
 8001f00:	400204a0 	.word	0x400204a0
 8001f04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1c8      	bne.n	8001ea8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4b83      	ldr	r3, [pc, #524]	@ (8002130 <HAL_DMA_Init+0x420>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	4313      	orrs	r3, r2
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f6c:	4b71      	ldr	r3, [pc, #452]	@ (8002134 <HAL_DMA_Init+0x424>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b71      	ldr	r3, [pc, #452]	@ (8002138 <HAL_DMA_Init+0x428>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f78:	d328      	bcc.n	8001fcc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b28      	cmp	r3, #40	@ 0x28
 8001f80:	d903      	bls.n	8001f8a <HAL_DMA_Init+0x27a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f88:	d917      	bls.n	8001fba <HAL_DMA_Init+0x2aa>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f90:	d903      	bls.n	8001f9a <HAL_DMA_Init+0x28a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b42      	cmp	r3, #66	@ 0x42
 8001f98:	d90f      	bls.n	8001fba <HAL_DMA_Init+0x2aa>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b46      	cmp	r3, #70	@ 0x46
 8001fa0:	d903      	bls.n	8001faa <HAL_DMA_Init+0x29a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b48      	cmp	r3, #72	@ 0x48
 8001fa8:	d907      	bls.n	8001fba <HAL_DMA_Init+0x2aa>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b4e      	cmp	r3, #78	@ 0x4e
 8001fb0:	d905      	bls.n	8001fbe <HAL_DMA_Init+0x2ae>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b52      	cmp	r3, #82	@ 0x52
 8001fb8:	d801      	bhi.n	8001fbe <HAL_DMA_Init+0x2ae>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_DMA_Init+0x2b0>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0307 	bic.w	r3, r3, #7
 8001fe2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d117      	bne.n	8002026 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f002 fb33 	bl	8004674 <DMA_CheckFifoParam>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2240      	movs	r2, #64	@ 0x40
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e197      	b.n	8002356 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f002 fa6e 	bl	8004510 <DMA_CalcBaseAndBitshift>
 8002034:	4603      	mov	r3, r0
 8002036:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	223f      	movs	r2, #63	@ 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e0cd      	b.n	80021e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3b      	ldr	r2, [pc, #236]	@ (800213c <HAL_DMA_Init+0x42c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <HAL_DMA_Init+0x38a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a39      	ldr	r2, [pc, #228]	@ (8002140 <HAL_DMA_Init+0x430>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_DMA_Init+0x38a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <HAL_DMA_Init+0x434>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d018      	beq.n	800209a <HAL_DMA_Init+0x38a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a36      	ldr	r2, [pc, #216]	@ (8002148 <HAL_DMA_Init+0x438>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_Init+0x38a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a35      	ldr	r2, [pc, #212]	@ (800214c <HAL_DMA_Init+0x43c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00e      	beq.n	800209a <HAL_DMA_Init+0x38a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a33      	ldr	r2, [pc, #204]	@ (8002150 <HAL_DMA_Init+0x440>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_DMA_Init+0x38a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <HAL_DMA_Init+0x444>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_DMA_Init+0x38a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a30      	ldr	r2, [pc, #192]	@ (8002158 <HAL_DMA_Init+0x448>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_DMA_Init+0x38e>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_DMA_Init+0x390>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8097 	beq.w	80021d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_DMA_Init+0x42c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d021      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <HAL_DMA_Init+0x430>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01c      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_DMA_Init+0x434>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d017      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <HAL_DMA_Init+0x438>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d012      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_DMA_Init+0x43c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00d      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <HAL_DMA_Init+0x440>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d008      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_DMA_Init+0x444>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_DMA_Init+0x3e4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_DMA_Init+0x448>)
 80020f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_DMA_Init+0x44c>)
 8002110:	4013      	ands	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	d021      	beq.n	8002160 <HAL_DMA_Init+0x450>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b80      	cmp	r3, #128	@ 0x80
 8002122:	d102      	bne.n	800212a <HAL_DMA_Init+0x41a>
 8002124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002128:	e01b      	b.n	8002162 <HAL_DMA_Init+0x452>
 800212a:	2300      	movs	r3, #0
 800212c:	e019      	b.n	8002162 <HAL_DMA_Init+0x452>
 800212e:	bf00      	nop
 8002130:	fe10803f 	.word	0xfe10803f
 8002134:	5c001000 	.word	0x5c001000
 8002138:	ffff0000 	.word	0xffff0000
 800213c:	58025408 	.word	0x58025408
 8002140:	5802541c 	.word	0x5802541c
 8002144:	58025430 	.word	0x58025430
 8002148:	58025444 	.word	0x58025444
 800214c:	58025458 	.word	0x58025458
 8002150:	5802546c 	.word	0x5802546c
 8002154:	58025480 	.word	0x58025480
 8002158:	58025494 	.word	0x58025494
 800215c:	fffe000f 	.word	0xfffe000f
 8002160:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68d2      	ldr	r2, [r2, #12]
 8002166:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002190:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002360 <HAL_DMA_Init+0x650>)
 80021a8:	4413      	add	r3, r2
 80021aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002364 <HAL_DMA_Init+0x654>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	009a      	lsls	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f002 f9a9 	bl	8004510 <DMA_CalcBaseAndBitshift>
 80021be:	4603      	mov	r3, r0
 80021c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	e008      	b.n	80021e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2240      	movs	r2, #64	@ 0x40
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0b7      	b.n	8002356 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002368 <HAL_DMA_Init+0x658>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d072      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5d      	ldr	r2, [pc, #372]	@ (800236c <HAL_DMA_Init+0x65c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d06d      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002370 <HAL_DMA_Init+0x660>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d068      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <HAL_DMA_Init+0x664>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d063      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a59      	ldr	r2, [pc, #356]	@ (8002378 <HAL_DMA_Init+0x668>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05e      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a57      	ldr	r2, [pc, #348]	@ (800237c <HAL_DMA_Init+0x66c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d059      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a56      	ldr	r2, [pc, #344]	@ (8002380 <HAL_DMA_Init+0x670>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d054      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a54      	ldr	r2, [pc, #336]	@ (8002384 <HAL_DMA_Init+0x674>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d04f      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a53      	ldr	r2, [pc, #332]	@ (8002388 <HAL_DMA_Init+0x678>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04a      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a51      	ldr	r2, [pc, #324]	@ (800238c <HAL_DMA_Init+0x67c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d045      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a50      	ldr	r2, [pc, #320]	@ (8002390 <HAL_DMA_Init+0x680>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d040      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4e      	ldr	r2, [pc, #312]	@ (8002394 <HAL_DMA_Init+0x684>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d03b      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4d      	ldr	r2, [pc, #308]	@ (8002398 <HAL_DMA_Init+0x688>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d036      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a4b      	ldr	r2, [pc, #300]	@ (800239c <HAL_DMA_Init+0x68c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d031      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4a      	ldr	r2, [pc, #296]	@ (80023a0 <HAL_DMA_Init+0x690>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d02c      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a48      	ldr	r2, [pc, #288]	@ (80023a4 <HAL_DMA_Init+0x694>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d027      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a47      	ldr	r2, [pc, #284]	@ (80023a8 <HAL_DMA_Init+0x698>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d022      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a45      	ldr	r2, [pc, #276]	@ (80023ac <HAL_DMA_Init+0x69c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01d      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a44      	ldr	r2, [pc, #272]	@ (80023b0 <HAL_DMA_Init+0x6a0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a42      	ldr	r2, [pc, #264]	@ (80023b4 <HAL_DMA_Init+0x6a4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a41      	ldr	r2, [pc, #260]	@ (80023b8 <HAL_DMA_Init+0x6a8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3f      	ldr	r2, [pc, #252]	@ (80023bc <HAL_DMA_Init+0x6ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3e      	ldr	r2, [pc, #248]	@ (80023c0 <HAL_DMA_Init+0x6b0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_Init+0x5c6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3c      	ldr	r2, [pc, #240]	@ (80023c4 <HAL_DMA_Init+0x6b4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_DMA_Init+0x5ca>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_DMA_Init+0x5cc>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d032      	beq.n	8002346 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f002 fa43 	bl	800476c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b80      	cmp	r3, #128	@ 0x80
 80022ec:	d102      	bne.n	80022f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002308:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_DMA_Init+0x624>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d80c      	bhi.n	8002334 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f002 fac0 	bl	80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e008      	b.n	8002346 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	a7fdabf8 	.word	0xa7fdabf8
 8002364:	cccccccd 	.word	0xcccccccd
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
 80023a8:	58025408 	.word	0x58025408
 80023ac:	5802541c 	.word	0x5802541c
 80023b0:	58025430 	.word	0x58025430
 80023b4:	58025444 	.word	0x58025444
 80023b8:	58025458 	.word	0x58025458
 80023bc:	5802546c 	.word	0x5802546c
 80023c0:	58025480 	.word	0x58025480
 80023c4:	58025494 	.word	0x58025494

080023c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e226      	b.n	8002832 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Start_IT+0x2a>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e21f      	b.n	8002832 <HAL_DMA_Start_IT+0x46a>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	f040 820a 	bne.w	800281c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a68      	ldr	r2, [pc, #416]	@ (80025bc <HAL_DMA_Start_IT+0x1f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d04a      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a66      	ldr	r2, [pc, #408]	@ (80025c0 <HAL_DMA_Start_IT+0x1f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d045      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a65      	ldr	r2, [pc, #404]	@ (80025c4 <HAL_DMA_Start_IT+0x1fc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d040      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a63      	ldr	r2, [pc, #396]	@ (80025c8 <HAL_DMA_Start_IT+0x200>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d03b      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a62      	ldr	r2, [pc, #392]	@ (80025cc <HAL_DMA_Start_IT+0x204>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d036      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a60      	ldr	r2, [pc, #384]	@ (80025d0 <HAL_DMA_Start_IT+0x208>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a5f      	ldr	r2, [pc, #380]	@ (80025d4 <HAL_DMA_Start_IT+0x20c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d02c      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5d      	ldr	r2, [pc, #372]	@ (80025d8 <HAL_DMA_Start_IT+0x210>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d027      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5c      	ldr	r2, [pc, #368]	@ (80025dc <HAL_DMA_Start_IT+0x214>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a5a      	ldr	r2, [pc, #360]	@ (80025e0 <HAL_DMA_Start_IT+0x218>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01d      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a59      	ldr	r2, [pc, #356]	@ (80025e4 <HAL_DMA_Start_IT+0x21c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a57      	ldr	r2, [pc, #348]	@ (80025e8 <HAL_DMA_Start_IT+0x220>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a56      	ldr	r2, [pc, #344]	@ (80025ec <HAL_DMA_Start_IT+0x224>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00e      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a54      	ldr	r2, [pc, #336]	@ (80025f0 <HAL_DMA_Start_IT+0x228>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a53      	ldr	r2, [pc, #332]	@ (80025f4 <HAL_DMA_Start_IT+0x22c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Start_IT+0xee>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a51      	ldr	r2, [pc, #324]	@ (80025f8 <HAL_DMA_Start_IT+0x230>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <HAL_DMA_Start_IT+0x100>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_DMA_Start_IT+0x110>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f001 fe6a 	bl	80041b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a34      	ldr	r2, [pc, #208]	@ (80025bc <HAL_DMA_Start_IT+0x1f4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d04a      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a33      	ldr	r2, [pc, #204]	@ (80025c0 <HAL_DMA_Start_IT+0x1f8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d045      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a31      	ldr	r2, [pc, #196]	@ (80025c4 <HAL_DMA_Start_IT+0x1fc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d040      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a30      	ldr	r2, [pc, #192]	@ (80025c8 <HAL_DMA_Start_IT+0x200>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d03b      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2e      	ldr	r2, [pc, #184]	@ (80025cc <HAL_DMA_Start_IT+0x204>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d036      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <HAL_DMA_Start_IT+0x208>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d031      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2b      	ldr	r2, [pc, #172]	@ (80025d4 <HAL_DMA_Start_IT+0x20c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d02c      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a2a      	ldr	r2, [pc, #168]	@ (80025d8 <HAL_DMA_Start_IT+0x210>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d027      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <HAL_DMA_Start_IT+0x214>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d022      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a27      	ldr	r2, [pc, #156]	@ (80025e0 <HAL_DMA_Start_IT+0x218>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d01d      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a25      	ldr	r2, [pc, #148]	@ (80025e4 <HAL_DMA_Start_IT+0x21c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d018      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_DMA_Start_IT+0x220>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_DMA_Start_IT+0x224>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00e      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	@ (80025f0 <HAL_DMA_Start_IT+0x228>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <HAL_DMA_Start_IT+0x22c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_DMA_Start_IT+0x1bc>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1e      	ldr	r2, [pc, #120]	@ (80025f8 <HAL_DMA_Start_IT+0x230>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_DMA_Start_IT+0x1c0>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_DMA_Start_IT+0x1c2>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d036      	beq.n	80025fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 021e 	bic.w	r2, r3, #30
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0216 	orr.w	r2, r2, #22
 80025a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03e      	beq.n	8002628 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0208 	orr.w	r2, r2, #8
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e035      	b.n	8002628 <HAL_DMA_Start_IT+0x260>
 80025bc:	40020010 	.word	0x40020010
 80025c0:	40020028 	.word	0x40020028
 80025c4:	40020040 	.word	0x40020040
 80025c8:	40020058 	.word	0x40020058
 80025cc:	40020070 	.word	0x40020070
 80025d0:	40020088 	.word	0x40020088
 80025d4:	400200a0 	.word	0x400200a0
 80025d8:	400200b8 	.word	0x400200b8
 80025dc:	40020410 	.word	0x40020410
 80025e0:	40020428 	.word	0x40020428
 80025e4:	40020440 	.word	0x40020440
 80025e8:	40020458 	.word	0x40020458
 80025ec:	40020470 	.word	0x40020470
 80025f0:	40020488 	.word	0x40020488
 80025f4:	400204a0 	.word	0x400204a0
 80025f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 020e 	bic.w	r2, r3, #14
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 020a 	orr.w	r2, r2, #10
 800260e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0204 	orr.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a83      	ldr	r2, [pc, #524]	@ (800283c <HAL_DMA_Start_IT+0x474>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d072      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a82      	ldr	r2, [pc, #520]	@ (8002840 <HAL_DMA_Start_IT+0x478>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d06d      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a80      	ldr	r2, [pc, #512]	@ (8002844 <HAL_DMA_Start_IT+0x47c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d068      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7f      	ldr	r2, [pc, #508]	@ (8002848 <HAL_DMA_Start_IT+0x480>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d063      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a7d      	ldr	r2, [pc, #500]	@ (800284c <HAL_DMA_Start_IT+0x484>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d05e      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7c      	ldr	r2, [pc, #496]	@ (8002850 <HAL_DMA_Start_IT+0x488>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d059      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a7a      	ldr	r2, [pc, #488]	@ (8002854 <HAL_DMA_Start_IT+0x48c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d054      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a79      	ldr	r2, [pc, #484]	@ (8002858 <HAL_DMA_Start_IT+0x490>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d04f      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a77      	ldr	r2, [pc, #476]	@ (800285c <HAL_DMA_Start_IT+0x494>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04a      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a76      	ldr	r2, [pc, #472]	@ (8002860 <HAL_DMA_Start_IT+0x498>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d045      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a74      	ldr	r2, [pc, #464]	@ (8002864 <HAL_DMA_Start_IT+0x49c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d040      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a73      	ldr	r2, [pc, #460]	@ (8002868 <HAL_DMA_Start_IT+0x4a0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d03b      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a71      	ldr	r2, [pc, #452]	@ (800286c <HAL_DMA_Start_IT+0x4a4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d036      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a70      	ldr	r2, [pc, #448]	@ (8002870 <HAL_DMA_Start_IT+0x4a8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002874 <HAL_DMA_Start_IT+0x4ac>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02c      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002878 <HAL_DMA_Start_IT+0x4b0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d027      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6b      	ldr	r2, [pc, #428]	@ (800287c <HAL_DMA_Start_IT+0x4b4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d022      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6a      	ldr	r2, [pc, #424]	@ (8002880 <HAL_DMA_Start_IT+0x4b8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d01d      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a68      	ldr	r2, [pc, #416]	@ (8002884 <HAL_DMA_Start_IT+0x4bc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d018      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <HAL_DMA_Start_IT+0x4c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_DMA_Start_IT+0x4c4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00e      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a64      	ldr	r2, [pc, #400]	@ (8002890 <HAL_DMA_Start_IT+0x4c8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a62      	ldr	r2, [pc, #392]	@ (8002894 <HAL_DMA_Start_IT+0x4cc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_DMA_Start_IT+0x350>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a61      	ldr	r2, [pc, #388]	@ (8002898 <HAL_DMA_Start_IT+0x4d0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_DMA_Start_IT+0x354>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_DMA_Start_IT+0x356>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002756:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a37      	ldr	r2, [pc, #220]	@ (800283c <HAL_DMA_Start_IT+0x474>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <HAL_DMA_Start_IT+0x478>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d045      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a34      	ldr	r2, [pc, #208]	@ (8002844 <HAL_DMA_Start_IT+0x47c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d040      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a33      	ldr	r2, [pc, #204]	@ (8002848 <HAL_DMA_Start_IT+0x480>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d03b      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a31      	ldr	r2, [pc, #196]	@ (800284c <HAL_DMA_Start_IT+0x484>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d036      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <HAL_DMA_Start_IT+0x488>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a2e      	ldr	r2, [pc, #184]	@ (8002854 <HAL_DMA_Start_IT+0x48c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02c      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002858 <HAL_DMA_Start_IT+0x490>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d027      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2b      	ldr	r2, [pc, #172]	@ (800285c <HAL_DMA_Start_IT+0x494>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002860 <HAL_DMA_Start_IT+0x498>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01d      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a28      	ldr	r2, [pc, #160]	@ (8002864 <HAL_DMA_Start_IT+0x49c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a27      	ldr	r2, [pc, #156]	@ (8002868 <HAL_DMA_Start_IT+0x4a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a25      	ldr	r2, [pc, #148]	@ (800286c <HAL_DMA_Start_IT+0x4a4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_DMA_Start_IT+0x4a8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <HAL_DMA_Start_IT+0x4ac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_Start_IT+0x430>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a21      	ldr	r2, [pc, #132]	@ (8002878 <HAL_DMA_Start_IT+0x4b0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <HAL_DMA_Start_IT+0x442>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e012      	b.n	8002830 <HAL_DMA_Start_IT+0x468>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e009      	b.n	8002830 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002830:	7dfb      	ldrb	r3, [r7, #23]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	58025408 	.word	0x58025408
 8002880:	5802541c 	.word	0x5802541c
 8002884:	58025430 	.word	0x58025430
 8002888:	58025444 	.word	0x58025444
 800288c:	58025458 	.word	0x58025458
 8002890:	5802546c 	.word	0x5802546c
 8002894:	58025480 	.word	0x58025480
 8002898:	58025494 	.word	0x58025494

0800289c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7fe fe08 	bl	80014b8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e2dc      	b.n	8002e6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e2cd      	b.n	8002e6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a76      	ldr	r2, [pc, #472]	@ (8002ab0 <HAL_DMA_Abort+0x214>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a74      	ldr	r2, [pc, #464]	@ (8002ab4 <HAL_DMA_Abort+0x218>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a73      	ldr	r2, [pc, #460]	@ (8002ab8 <HAL_DMA_Abort+0x21c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a71      	ldr	r2, [pc, #452]	@ (8002abc <HAL_DMA_Abort+0x220>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a70      	ldr	r2, [pc, #448]	@ (8002ac0 <HAL_DMA_Abort+0x224>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac4 <HAL_DMA_Abort+0x228>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6d      	ldr	r2, [pc, #436]	@ (8002ac8 <HAL_DMA_Abort+0x22c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6b      	ldr	r2, [pc, #428]	@ (8002acc <HAL_DMA_Abort+0x230>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad0 <HAL_DMA_Abort+0x234>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	@ (8002ad4 <HAL_DMA_Abort+0x238>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a67      	ldr	r2, [pc, #412]	@ (8002ad8 <HAL_DMA_Abort+0x23c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a65      	ldr	r2, [pc, #404]	@ (8002adc <HAL_DMA_Abort+0x240>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a64      	ldr	r2, [pc, #400]	@ (8002ae0 <HAL_DMA_Abort+0x244>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a62      	ldr	r2, [pc, #392]	@ (8002ae4 <HAL_DMA_Abort+0x248>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_DMA_Abort+0x24c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5f      	ldr	r2, [pc, #380]	@ (8002aec <HAL_DMA_Abort+0x250>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_DMA_Abort+0xda>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_DMA_Abort+0xdc>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 021e 	bic.w	r2, r2, #30
 800298a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e00a      	b.n	80029ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 020e 	bic.w	r2, r2, #14
 80029b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab0 <HAL_DMA_Abort+0x214>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d072      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab4 <HAL_DMA_Abort+0x218>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d06d      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a39      	ldr	r2, [pc, #228]	@ (8002ab8 <HAL_DMA_Abort+0x21c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d068      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a37      	ldr	r2, [pc, #220]	@ (8002abc <HAL_DMA_Abort+0x220>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d063      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a36      	ldr	r2, [pc, #216]	@ (8002ac0 <HAL_DMA_Abort+0x224>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d05e      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a34      	ldr	r2, [pc, #208]	@ (8002ac4 <HAL_DMA_Abort+0x228>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d059      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a33      	ldr	r2, [pc, #204]	@ (8002ac8 <HAL_DMA_Abort+0x22c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d054      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a31      	ldr	r2, [pc, #196]	@ (8002acc <HAL_DMA_Abort+0x230>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04f      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_DMA_Abort+0x234>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d04a      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad4 <HAL_DMA_Abort+0x238>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d045      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad8 <HAL_DMA_Abort+0x23c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d040      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002adc <HAL_DMA_Abort+0x240>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d03b      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae0 <HAL_DMA_Abort+0x244>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d036      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a28      	ldr	r2, [pc, #160]	@ (8002ae4 <HAL_DMA_Abort+0x248>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d031      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ae8 <HAL_DMA_Abort+0x24c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d02c      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a25      	ldr	r2, [pc, #148]	@ (8002aec <HAL_DMA_Abort+0x250>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d027      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_DMA_Abort+0x254>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <HAL_DMA_Abort+0x258>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <HAL_DMA_Abort+0x25c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002afc <HAL_DMA_Abort+0x260>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <HAL_DMA_Abort+0x264>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_DMA_Abort+0x268>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b08 <HAL_DMA_Abort+0x26c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	@ (8002b0c <HAL_DMA_Abort+0x270>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d132      	bne.n	8002b10 <HAL_DMA_Abort+0x274>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e031      	b.n	8002b12 <HAL_DMA_Abort+0x276>
 8002aae:	bf00      	nop
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	58025408 	.word	0x58025408
 8002af4:	5802541c 	.word	0x5802541c
 8002af8:	58025430 	.word	0x58025430
 8002afc:	58025444 	.word	0x58025444
 8002b00:	58025458 	.word	0x58025458
 8002b04:	5802546c 	.word	0x5802546c
 8002b08:	58025480 	.word	0x58025480
 8002b0c:	58025494 	.word	0x58025494
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ce0 <HAL_DMA_Abort+0x444>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04a      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce4 <HAL_DMA_Abort+0x448>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d045      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce8 <HAL_DMA_Abort+0x44c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d040      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a68      	ldr	r2, [pc, #416]	@ (8002cec <HAL_DMA_Abort+0x450>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a67      	ldr	r2, [pc, #412]	@ (8002cf0 <HAL_DMA_Abort+0x454>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d036      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_DMA_Abort+0x458>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a64      	ldr	r2, [pc, #400]	@ (8002cf8 <HAL_DMA_Abort+0x45c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d02c      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a62      	ldr	r2, [pc, #392]	@ (8002cfc <HAL_DMA_Abort+0x460>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d027      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a61      	ldr	r2, [pc, #388]	@ (8002d00 <HAL_DMA_Abort+0x464>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <HAL_DMA_Abort+0x468>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_DMA_Abort+0x46c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5c      	ldr	r2, [pc, #368]	@ (8002d0c <HAL_DMA_Abort+0x470>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d10 <HAL_DMA_Abort+0x474>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a59      	ldr	r2, [pc, #356]	@ (8002d14 <HAL_DMA_Abort+0x478>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a58      	ldr	r2, [pc, #352]	@ (8002d18 <HAL_DMA_Abort+0x47c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a56      	ldr	r2, [pc, #344]	@ (8002d1c <HAL_DMA_Abort+0x480>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_Abort+0x33c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_DMA_Abort+0x34c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002be8:	e013      	b.n	8002c12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bea:	f7fe fc65 	bl	80014b8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d90c      	bls.n	8002c12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e12d      	b.n	8002e6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e5      	bne.n	8002bea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce0 <HAL_DMA_Abort+0x444>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce4 <HAL_DMA_Abort+0x448>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <HAL_DMA_Abort+0x44c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2a      	ldr	r2, [pc, #168]	@ (8002cec <HAL_DMA_Abort+0x450>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a29      	ldr	r2, [pc, #164]	@ (8002cf0 <HAL_DMA_Abort+0x454>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a27      	ldr	r2, [pc, #156]	@ (8002cf4 <HAL_DMA_Abort+0x458>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a26      	ldr	r2, [pc, #152]	@ (8002cf8 <HAL_DMA_Abort+0x45c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a24      	ldr	r2, [pc, #144]	@ (8002cfc <HAL_DMA_Abort+0x460>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <HAL_DMA_Abort+0x464>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <HAL_DMA_Abort+0x468>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a20      	ldr	r2, [pc, #128]	@ (8002d08 <HAL_DMA_Abort+0x46c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1e      	ldr	r2, [pc, #120]	@ (8002d0c <HAL_DMA_Abort+0x470>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <HAL_DMA_Abort+0x474>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <HAL_DMA_Abort+0x478>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <HAL_DMA_Abort+0x47c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <HAL_DMA_Abort+0x480>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Abort+0x426>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Abort+0x428>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02b      	beq.n	8002d20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	223f      	movs	r2, #63	@ 0x3f
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	e02a      	b.n	8002d36 <HAL_DMA_Abort+0x49a>
 8002ce0:	40020010 	.word	0x40020010
 8002ce4:	40020028 	.word	0x40020028
 8002ce8:	40020040 	.word	0x40020040
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	40020070 	.word	0x40020070
 8002cf4:	40020088 	.word	0x40020088
 8002cf8:	400200a0 	.word	0x400200a0
 8002cfc:	400200b8 	.word	0x400200b8
 8002d00:	40020410 	.word	0x40020410
 8002d04:	40020428 	.word	0x40020428
 8002d08:	40020440 	.word	0x40020440
 8002d0c:	40020458 	.word	0x40020458
 8002d10:	40020470 	.word	0x40020470
 8002d14:	40020488 	.word	0x40020488
 8002d18:	400204a0 	.word	0x400204a0
 8002d1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2201      	movs	r2, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e78 <HAL_DMA_Abort+0x5dc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d072      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a4d      	ldr	r2, [pc, #308]	@ (8002e7c <HAL_DMA_Abort+0x5e0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d06d      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e80 <HAL_DMA_Abort+0x5e4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d068      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4a      	ldr	r2, [pc, #296]	@ (8002e84 <HAL_DMA_Abort+0x5e8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d063      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <HAL_DMA_Abort+0x5ec>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d05e      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a47      	ldr	r2, [pc, #284]	@ (8002e8c <HAL_DMA_Abort+0x5f0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d059      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a46      	ldr	r2, [pc, #280]	@ (8002e90 <HAL_DMA_Abort+0x5f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d054      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a44      	ldr	r2, [pc, #272]	@ (8002e94 <HAL_DMA_Abort+0x5f8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04f      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	@ (8002e98 <HAL_DMA_Abort+0x5fc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d04a      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a41      	ldr	r2, [pc, #260]	@ (8002e9c <HAL_DMA_Abort+0x600>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d045      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ea0 <HAL_DMA_Abort+0x604>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d040      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ea4 <HAL_DMA_Abort+0x608>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d03b      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ea8 <HAL_DMA_Abort+0x60c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d036      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_DMA_Abort+0x610>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d031      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb0 <HAL_DMA_Abort+0x614>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d02c      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a38      	ldr	r2, [pc, #224]	@ (8002eb4 <HAL_DMA_Abort+0x618>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d027      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a37      	ldr	r2, [pc, #220]	@ (8002eb8 <HAL_DMA_Abort+0x61c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a35      	ldr	r2, [pc, #212]	@ (8002ebc <HAL_DMA_Abort+0x620>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01d      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a34      	ldr	r2, [pc, #208]	@ (8002ec0 <HAL_DMA_Abort+0x624>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <HAL_DMA_Abort+0x628>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a31      	ldr	r2, [pc, #196]	@ (8002ec8 <HAL_DMA_Abort+0x62c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <HAL_DMA_Abort+0x630>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed0 <HAL_DMA_Abort+0x634>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <HAL_DMA_Abort+0x638>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_DMA_Abort+0x58e>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_DMA_Abort+0x590>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00c      	beq.n	8002e5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020010 	.word	0x40020010
 8002e7c:	40020028 	.word	0x40020028
 8002e80:	40020040 	.word	0x40020040
 8002e84:	40020058 	.word	0x40020058
 8002e88:	40020070 	.word	0x40020070
 8002e8c:	40020088 	.word	0x40020088
 8002e90:	400200a0 	.word	0x400200a0
 8002e94:	400200b8 	.word	0x400200b8
 8002e98:	40020410 	.word	0x40020410
 8002e9c:	40020428 	.word	0x40020428
 8002ea0:	40020440 	.word	0x40020440
 8002ea4:	40020458 	.word	0x40020458
 8002ea8:	40020470 	.word	0x40020470
 8002eac:	40020488 	.word	0x40020488
 8002eb0:	400204a0 	.word	0x400204a0
 8002eb4:	400204b8 	.word	0x400204b8
 8002eb8:	58025408 	.word	0x58025408
 8002ebc:	5802541c 	.word	0x5802541c
 8002ec0:	58025430 	.word	0x58025430
 8002ec4:	58025444 	.word	0x58025444
 8002ec8:	58025458 	.word	0x58025458
 8002ecc:	5802546c 	.word	0x5802546c
 8002ed0:	58025480 	.word	0x58025480
 8002ed4:	58025494 	.word	0x58025494

08002ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e237      	b.n	800335a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2280      	movs	r2, #128	@ 0x80
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e22c      	b.n	800335a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5c      	ldr	r2, [pc, #368]	@ (8003078 <HAL_DMA_Abort_IT+0x1a0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04a      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800307c <HAL_DMA_Abort_IT+0x1a4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d045      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a59      	ldr	r2, [pc, #356]	@ (8003080 <HAL_DMA_Abort_IT+0x1a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d040      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a58      	ldr	r2, [pc, #352]	@ (8003084 <HAL_DMA_Abort_IT+0x1ac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d03b      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_DMA_Abort_IT+0x1b0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d036      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a55      	ldr	r2, [pc, #340]	@ (800308c <HAL_DMA_Abort_IT+0x1b4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a53      	ldr	r2, [pc, #332]	@ (8003090 <HAL_DMA_Abort_IT+0x1b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02c      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a52      	ldr	r2, [pc, #328]	@ (8003094 <HAL_DMA_Abort_IT+0x1bc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d027      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_DMA_Abort_IT+0x1c0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800309c <HAL_DMA_Abort_IT+0x1c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01d      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_DMA_Abort_IT+0x1c8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4c      	ldr	r2, [pc, #304]	@ (80030a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80030a8 <HAL_DMA_Abort_IT+0x1d0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a49      	ldr	r2, [pc, #292]	@ (80030ac <HAL_DMA_Abort_IT+0x1d4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a47      	ldr	r2, [pc, #284]	@ (80030b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a46      	ldr	r2, [pc, #280]	@ (80030b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_DMA_Abort_IT+0xcc>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_Abort_IT+0xce>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8086 	beq.w	80030b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003078 <HAL_DMA_Abort_IT+0x1a0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04a      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_DMA_Abort_IT+0x1a4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d045      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8003080 <HAL_DMA_Abort_IT+0x1a8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d040      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <HAL_DMA_Abort_IT+0x1ac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d03b      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <HAL_DMA_Abort_IT+0x1b0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d036      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a28      	ldr	r2, [pc, #160]	@ (800308c <HAL_DMA_Abort_IT+0x1b4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d031      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <HAL_DMA_Abort_IT+0x1b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02c      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_DMA_Abort_IT+0x1bc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d027      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <HAL_DMA_Abort_IT+0x1c0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_Abort_IT+0x1c4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01d      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a20      	ldr	r2, [pc, #128]	@ (80030a0 <HAL_DMA_Abort_IT+0x1c8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_DMA_Abort_IT+0x1cc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <HAL_DMA_Abort_IT+0x1d0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_DMA_Abort_IT+0x1d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <HAL_DMA_Abort_IT+0x1d8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_DMA_Abort_IT+0x1dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <HAL_DMA_Abort_IT+0x18e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e178      	b.n	8003358 <HAL_DMA_Abort_IT+0x480>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e16f      	b.n	8003358 <HAL_DMA_Abort_IT+0x480>
 8003078:	40020010 	.word	0x40020010
 800307c:	40020028 	.word	0x40020028
 8003080:	40020040 	.word	0x40020040
 8003084:	40020058 	.word	0x40020058
 8003088:	40020070 	.word	0x40020070
 800308c:	40020088 	.word	0x40020088
 8003090:	400200a0 	.word	0x400200a0
 8003094:	400200b8 	.word	0x400200b8
 8003098:	40020410 	.word	0x40020410
 800309c:	40020428 	.word	0x40020428
 80030a0:	40020440 	.word	0x40020440
 80030a4:	40020458 	.word	0x40020458
 80030a8:	40020470 	.word	0x40020470
 80030ac:	40020488 	.word	0x40020488
 80030b0:	400204a0 	.word	0x400204a0
 80030b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 020e 	bic.w	r2, r2, #14
 80030c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6c      	ldr	r2, [pc, #432]	@ (8003280 <HAL_DMA_Abort_IT+0x3a8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d04a      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003284 <HAL_DMA_Abort_IT+0x3ac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d045      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <HAL_DMA_Abort_IT+0x3b0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d040      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a68      	ldr	r2, [pc, #416]	@ (800328c <HAL_DMA_Abort_IT+0x3b4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d03b      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a66      	ldr	r2, [pc, #408]	@ (8003290 <HAL_DMA_Abort_IT+0x3b8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d036      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a65      	ldr	r2, [pc, #404]	@ (8003294 <HAL_DMA_Abort_IT+0x3bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d031      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a63      	ldr	r2, [pc, #396]	@ (8003298 <HAL_DMA_Abort_IT+0x3c0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02c      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a62      	ldr	r2, [pc, #392]	@ (800329c <HAL_DMA_Abort_IT+0x3c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d027      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a60      	ldr	r2, [pc, #384]	@ (80032a0 <HAL_DMA_Abort_IT+0x3c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5f      	ldr	r2, [pc, #380]	@ (80032a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01d      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5d      	ldr	r2, [pc, #372]	@ (80032a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d018      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5c      	ldr	r2, [pc, #368]	@ (80032ac <HAL_DMA_Abort_IT+0x3d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5a      	ldr	r2, [pc, #360]	@ (80032b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a59      	ldr	r2, [pc, #356]	@ (80032b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a57      	ldr	r2, [pc, #348]	@ (80032b8 <HAL_DMA_Abort_IT+0x3e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_DMA_Abort_IT+0x3e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <HAL_DMA_Abort_IT+0x2a2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e007      	b.n	800318a <HAL_DMA_Abort_IT+0x2b2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3c      	ldr	r2, [pc, #240]	@ (8003280 <HAL_DMA_Abort_IT+0x3a8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d072      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3a      	ldr	r2, [pc, #232]	@ (8003284 <HAL_DMA_Abort_IT+0x3ac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d06d      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a39      	ldr	r2, [pc, #228]	@ (8003288 <HAL_DMA_Abort_IT+0x3b0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d068      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a37      	ldr	r2, [pc, #220]	@ (800328c <HAL_DMA_Abort_IT+0x3b4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a36      	ldr	r2, [pc, #216]	@ (8003290 <HAL_DMA_Abort_IT+0x3b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05e      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <HAL_DMA_Abort_IT+0x3bc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d059      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <HAL_DMA_Abort_IT+0x3c0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d054      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a31      	ldr	r2, [pc, #196]	@ (800329c <HAL_DMA_Abort_IT+0x3c4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04f      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a30      	ldr	r2, [pc, #192]	@ (80032a0 <HAL_DMA_Abort_IT+0x3c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2e      	ldr	r2, [pc, #184]	@ (80032a4 <HAL_DMA_Abort_IT+0x3cc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2d      	ldr	r2, [pc, #180]	@ (80032a8 <HAL_DMA_Abort_IT+0x3d0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2b      	ldr	r2, [pc, #172]	@ (80032ac <HAL_DMA_Abort_IT+0x3d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2a      	ldr	r2, [pc, #168]	@ (80032b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a28      	ldr	r2, [pc, #160]	@ (80032b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a27      	ldr	r2, [pc, #156]	@ (80032b8 <HAL_DMA_Abort_IT+0x3e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a25      	ldr	r2, [pc, #148]	@ (80032bc <HAL_DMA_Abort_IT+0x3e4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a24      	ldr	r2, [pc, #144]	@ (80032c0 <HAL_DMA_Abort_IT+0x3e8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <HAL_DMA_Abort_IT+0x3ec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a21      	ldr	r2, [pc, #132]	@ (80032c8 <HAL_DMA_Abort_IT+0x3f0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	@ (80032cc <HAL_DMA_Abort_IT+0x3f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <HAL_DMA_Abort_IT+0x3f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <HAL_DMA_Abort_IT+0x3fc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1b      	ldr	r2, [pc, #108]	@ (80032d8 <HAL_DMA_Abort_IT+0x400>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <HAL_DMA_Abort_IT+0x404>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d132      	bne.n	80032e0 <HAL_DMA_Abort_IT+0x408>
 800327a:	2301      	movs	r3, #1
 800327c:	e031      	b.n	80032e2 <HAL_DMA_Abort_IT+0x40a>
 800327e:	bf00      	nop
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
 80032c0:	58025408 	.word	0x58025408
 80032c4:	5802541c 	.word	0x5802541c
 80032c8:	58025430 	.word	0x58025430
 80032cc:	58025444 	.word	0x58025444
 80032d0:	58025458 	.word	0x58025458
 80032d4:	5802546c 	.word	0x5802546c
 80032d8:	58025480 	.word	0x58025480
 80032dc:	58025494 	.word	0x58025494
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003314:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800332c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003336:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop

08003364 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	@ 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003370:	4b67      	ldr	r3, [pc, #412]	@ (8003510 <HAL_DMA_IRQHandler+0x1ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <HAL_DMA_IRQHandler+0x1b0>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a5f      	ldr	r2, [pc, #380]	@ (8003518 <HAL_DMA_IRQHandler+0x1b4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d04a      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5d      	ldr	r2, [pc, #372]	@ (800351c <HAL_DMA_IRQHandler+0x1b8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d045      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003520 <HAL_DMA_IRQHandler+0x1bc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d040      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003524 <HAL_DMA_IRQHandler+0x1c0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d03b      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a59      	ldr	r2, [pc, #356]	@ (8003528 <HAL_DMA_IRQHandler+0x1c4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d036      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a57      	ldr	r2, [pc, #348]	@ (800352c <HAL_DMA_IRQHandler+0x1c8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_DMA_IRQHandler+0x1cc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d02c      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a54      	ldr	r2, [pc, #336]	@ (8003534 <HAL_DMA_IRQHandler+0x1d0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d027      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a53      	ldr	r2, [pc, #332]	@ (8003538 <HAL_DMA_IRQHandler+0x1d4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d022      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a51      	ldr	r2, [pc, #324]	@ (800353c <HAL_DMA_IRQHandler+0x1d8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01d      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a50      	ldr	r2, [pc, #320]	@ (8003540 <HAL_DMA_IRQHandler+0x1dc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d018      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a4e      	ldr	r2, [pc, #312]	@ (8003544 <HAL_DMA_IRQHandler+0x1e0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a4d      	ldr	r2, [pc, #308]	@ (8003548 <HAL_DMA_IRQHandler+0x1e4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00e      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4b      	ldr	r2, [pc, #300]	@ (800354c <HAL_DMA_IRQHandler+0x1e8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4a      	ldr	r2, [pc, #296]	@ (8003550 <HAL_DMA_IRQHandler+0x1ec>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d004      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a48      	ldr	r2, [pc, #288]	@ (8003554 <HAL_DMA_IRQHandler+0x1f0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_DMA_IRQHandler+0xd6>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_DMA_IRQHandler+0xd8>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 842b 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2208      	movs	r2, #8
 800344c:	409a      	lsls	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a2 	beq.w	800359c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2e      	ldr	r2, [pc, #184]	@ (8003518 <HAL_DMA_IRQHandler+0x1b4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2d      	ldr	r2, [pc, #180]	@ (800351c <HAL_DMA_IRQHandler+0x1b8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d045      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_DMA_IRQHandler+0x1bc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2a      	ldr	r2, [pc, #168]	@ (8003524 <HAL_DMA_IRQHandler+0x1c0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d03b      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a28      	ldr	r2, [pc, #160]	@ (8003528 <HAL_DMA_IRQHandler+0x1c4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d036      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_DMA_IRQHandler+0x1c8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a25      	ldr	r2, [pc, #148]	@ (8003530 <HAL_DMA_IRQHandler+0x1cc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a24      	ldr	r2, [pc, #144]	@ (8003534 <HAL_DMA_IRQHandler+0x1d0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d027      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a22      	ldr	r2, [pc, #136]	@ (8003538 <HAL_DMA_IRQHandler+0x1d4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a21      	ldr	r2, [pc, #132]	@ (800353c <HAL_DMA_IRQHandler+0x1d8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_DMA_IRQHandler+0x1dc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <HAL_DMA_IRQHandler+0x1e0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_DMA_IRQHandler+0x1e4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_DMA_IRQHandler+0x1e8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	@ (8003550 <HAL_DMA_IRQHandler+0x1ec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_DMA_IRQHandler+0x1f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d12f      	bne.n	8003558 <HAL_DMA_IRQHandler+0x1f4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e02e      	b.n	800356c <HAL_DMA_IRQHandler+0x208>
 800350e:	bf00      	nop
 8003510:	24000008 	.word	0x24000008
 8003514:	1b4e81b5 	.word	0x1b4e81b5
 8003518:	40020010 	.word	0x40020010
 800351c:	40020028 	.word	0x40020028
 8003520:	40020040 	.word	0x40020040
 8003524:	40020058 	.word	0x40020058
 8003528:	40020070 	.word	0x40020070
 800352c:	40020088 	.word	0x40020088
 8003530:	400200a0 	.word	0x400200a0
 8003534:	400200b8 	.word	0x400200b8
 8003538:	40020410 	.word	0x40020410
 800353c:	40020428 	.word	0x40020428
 8003540:	40020440 	.word	0x40020440
 8003544:	40020458 	.word	0x40020458
 8003548:	40020470 	.word	0x40020470
 800354c:	40020488 	.word	0x40020488
 8003550:	400204a0 	.word	0x400204a0
 8003554:	400204b8 	.word	0x400204b8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2208      	movs	r2, #8
 800358a:	409a      	lsls	r2, r3
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06e      	beq.n	8003690 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a69      	ldr	r2, [pc, #420]	@ (800375c <HAL_DMA_IRQHandler+0x3f8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d04a      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a67      	ldr	r2, [pc, #412]	@ (8003760 <HAL_DMA_IRQHandler+0x3fc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d045      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a66      	ldr	r2, [pc, #408]	@ (8003764 <HAL_DMA_IRQHandler+0x400>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d040      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a64      	ldr	r2, [pc, #400]	@ (8003768 <HAL_DMA_IRQHandler+0x404>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d03b      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a63      	ldr	r2, [pc, #396]	@ (800376c <HAL_DMA_IRQHandler+0x408>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d036      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a61      	ldr	r2, [pc, #388]	@ (8003770 <HAL_DMA_IRQHandler+0x40c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d031      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a60      	ldr	r2, [pc, #384]	@ (8003774 <HAL_DMA_IRQHandler+0x410>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d02c      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003778 <HAL_DMA_IRQHandler+0x414>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d027      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5d      	ldr	r2, [pc, #372]	@ (800377c <HAL_DMA_IRQHandler+0x418>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5b      	ldr	r2, [pc, #364]	@ (8003780 <HAL_DMA_IRQHandler+0x41c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a5a      	ldr	r2, [pc, #360]	@ (8003784 <HAL_DMA_IRQHandler+0x420>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d018      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a58      	ldr	r2, [pc, #352]	@ (8003788 <HAL_DMA_IRQHandler+0x424>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a57      	ldr	r2, [pc, #348]	@ (800378c <HAL_DMA_IRQHandler+0x428>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a55      	ldr	r2, [pc, #340]	@ (8003790 <HAL_DMA_IRQHandler+0x42c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a54      	ldr	r2, [pc, #336]	@ (8003794 <HAL_DMA_IRQHandler+0x430>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a52      	ldr	r2, [pc, #328]	@ (8003798 <HAL_DMA_IRQHandler+0x434>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10a      	bne.n	8003668 <HAL_DMA_IRQHandler+0x304>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e003      	b.n	8003670 <HAL_DMA_IRQHandler+0x30c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	f043 0202 	orr.w	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2204      	movs	r2, #4
 800369a:	409a      	lsls	r2, r3
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 808f 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <HAL_DMA_IRQHandler+0x3f8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003760 <HAL_DMA_IRQHandler+0x3fc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a29      	ldr	r2, [pc, #164]	@ (8003764 <HAL_DMA_IRQHandler+0x400>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a27      	ldr	r2, [pc, #156]	@ (8003768 <HAL_DMA_IRQHandler+0x404>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a26      	ldr	r2, [pc, #152]	@ (800376c <HAL_DMA_IRQHandler+0x408>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <HAL_DMA_IRQHandler+0x40c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a23      	ldr	r2, [pc, #140]	@ (8003774 <HAL_DMA_IRQHandler+0x410>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_DMA_IRQHandler+0x414>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a20      	ldr	r2, [pc, #128]	@ (800377c <HAL_DMA_IRQHandler+0x418>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1e      	ldr	r2, [pc, #120]	@ (8003780 <HAL_DMA_IRQHandler+0x41c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <HAL_DMA_IRQHandler+0x420>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1b      	ldr	r2, [pc, #108]	@ (8003788 <HAL_DMA_IRQHandler+0x424>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1a      	ldr	r2, [pc, #104]	@ (800378c <HAL_DMA_IRQHandler+0x428>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_DMA_IRQHandler+0x42c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <HAL_DMA_IRQHandler+0x430>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <HAL_DMA_IRQHandler+0x434>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d12a      	bne.n	800379c <HAL_DMA_IRQHandler+0x438>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e023      	b.n	80037a4 <HAL_DMA_IRQHandler+0x440>
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2204      	movs	r2, #4
 80037b2:	409a      	lsls	r2, r3
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2210      	movs	r2, #16
 80037ce:	409a      	lsls	r2, r3
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a6 	beq.w	8003926 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a85      	ldr	r2, [pc, #532]	@ (80039f4 <HAL_DMA_IRQHandler+0x690>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04a      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a83      	ldr	r2, [pc, #524]	@ (80039f8 <HAL_DMA_IRQHandler+0x694>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d045      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a82      	ldr	r2, [pc, #520]	@ (80039fc <HAL_DMA_IRQHandler+0x698>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d040      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a80      	ldr	r2, [pc, #512]	@ (8003a00 <HAL_DMA_IRQHandler+0x69c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d03b      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7f      	ldr	r2, [pc, #508]	@ (8003a04 <HAL_DMA_IRQHandler+0x6a0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d036      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7d      	ldr	r2, [pc, #500]	@ (8003a08 <HAL_DMA_IRQHandler+0x6a4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a0c <HAL_DMA_IRQHandler+0x6a8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d02c      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7a      	ldr	r2, [pc, #488]	@ (8003a10 <HAL_DMA_IRQHandler+0x6ac>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d027      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a79      	ldr	r2, [pc, #484]	@ (8003a14 <HAL_DMA_IRQHandler+0x6b0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a77      	ldr	r2, [pc, #476]	@ (8003a18 <HAL_DMA_IRQHandler+0x6b4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01d      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a76      	ldr	r2, [pc, #472]	@ (8003a1c <HAL_DMA_IRQHandler+0x6b8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a74      	ldr	r2, [pc, #464]	@ (8003a20 <HAL_DMA_IRQHandler+0x6bc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a73      	ldr	r2, [pc, #460]	@ (8003a24 <HAL_DMA_IRQHandler+0x6c0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a71      	ldr	r2, [pc, #452]	@ (8003a28 <HAL_DMA_IRQHandler+0x6c4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a70      	ldr	r2, [pc, #448]	@ (8003a2c <HAL_DMA_IRQHandler+0x6c8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6e      	ldr	r2, [pc, #440]	@ (8003a30 <HAL_DMA_IRQHandler+0x6cc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10a      	bne.n	8003890 <HAL_DMA_IRQHandler+0x52c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e009      	b.n	80038a4 <HAL_DMA_IRQHandler+0x540>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03e      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2210      	movs	r2, #16
 80038b2:	409a      	lsls	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d024      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e01f      	b.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01b      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e016      	b.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2220      	movs	r2, #32
 8003930:	409a      	lsls	r2, r3
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8110 	beq.w	8003b5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2c      	ldr	r2, [pc, #176]	@ (80039f4 <HAL_DMA_IRQHandler+0x690>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2b      	ldr	r2, [pc, #172]	@ (80039f8 <HAL_DMA_IRQHandler+0x694>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a29      	ldr	r2, [pc, #164]	@ (80039fc <HAL_DMA_IRQHandler+0x698>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a28      	ldr	r2, [pc, #160]	@ (8003a00 <HAL_DMA_IRQHandler+0x69c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a26      	ldr	r2, [pc, #152]	@ (8003a04 <HAL_DMA_IRQHandler+0x6a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a25      	ldr	r2, [pc, #148]	@ (8003a08 <HAL_DMA_IRQHandler+0x6a4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <HAL_DMA_IRQHandler+0x6a8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a22      	ldr	r2, [pc, #136]	@ (8003a10 <HAL_DMA_IRQHandler+0x6ac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a20      	ldr	r2, [pc, #128]	@ (8003a14 <HAL_DMA_IRQHandler+0x6b0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <HAL_DMA_IRQHandler+0x6b4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_DMA_IRQHandler+0x6b8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_DMA_IRQHandler+0x6bc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a24 <HAL_DMA_IRQHandler+0x6c0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <HAL_DMA_IRQHandler+0x6c4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a17      	ldr	r2, [pc, #92]	@ (8003a2c <HAL_DMA_IRQHandler+0x6c8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <HAL_DMA_IRQHandler+0x6cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d12b      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x6d0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e02a      	b.n	8003a48 <HAL_DMA_IRQHandler+0x6e4>
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8087 	beq.w	8003b5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2220      	movs	r2, #32
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d139      	bne.n	8003ade <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0216 	bic.w	r2, r2, #22
 8003a78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_DMA_IRQHandler+0x736>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0208 	bic.w	r2, r2, #8
 8003aa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	223f      	movs	r2, #63	@ 0x3f
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 834a 	beq.w	8004168 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
          }
          return;
 8003adc:	e344      	b.n	8004168 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e027      	b.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d023      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e01e      	b.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0210 	bic.w	r2, r2, #16
 8003b3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8306 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8088 	beq.w	8003c84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2204      	movs	r2, #4
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7a      	ldr	r2, [pc, #488]	@ (8003d6c <HAL_DMA_IRQHandler+0xa08>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a79      	ldr	r2, [pc, #484]	@ (8003d70 <HAL_DMA_IRQHandler+0xa0c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d045      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a77      	ldr	r2, [pc, #476]	@ (8003d74 <HAL_DMA_IRQHandler+0xa10>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d040      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a76      	ldr	r2, [pc, #472]	@ (8003d78 <HAL_DMA_IRQHandler+0xa14>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03b      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a74      	ldr	r2, [pc, #464]	@ (8003d7c <HAL_DMA_IRQHandler+0xa18>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d036      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	@ (8003d80 <HAL_DMA_IRQHandler+0xa1c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d031      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a71      	ldr	r2, [pc, #452]	@ (8003d84 <HAL_DMA_IRQHandler+0xa20>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02c      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a70      	ldr	r2, [pc, #448]	@ (8003d88 <HAL_DMA_IRQHandler+0xa24>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d027      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d8c <HAL_DMA_IRQHandler+0xa28>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6d      	ldr	r2, [pc, #436]	@ (8003d90 <HAL_DMA_IRQHandler+0xa2c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01d      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d94 <HAL_DMA_IRQHandler+0xa30>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6a      	ldr	r2, [pc, #424]	@ (8003d98 <HAL_DMA_IRQHandler+0xa34>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a68      	ldr	r2, [pc, #416]	@ (8003d9c <HAL_DMA_IRQHandler+0xa38>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a67      	ldr	r2, [pc, #412]	@ (8003da0 <HAL_DMA_IRQHandler+0xa3c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_DMA_IRQHandler+0xa40>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a64      	ldr	r2, [pc, #400]	@ (8003da8 <HAL_DMA_IRQHandler+0xa44>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x8ca>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e007      	b.n	8003c3e <HAL_DMA_IRQHandler+0x8da>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d307      	bcc.n	8003c5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f2      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x8da>
 8003c58:	e000      	b.n	8003c5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c72:	e003      	b.n	8003c7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8272 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
 8003c96:	e26c      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a43      	ldr	r2, [pc, #268]	@ (8003dac <HAL_DMA_IRQHandler+0xa48>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d022      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a42      	ldr	r2, [pc, #264]	@ (8003db0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01d      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a40      	ldr	r2, [pc, #256]	@ (8003db4 <HAL_DMA_IRQHandler+0xa50>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d018      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3f      	ldr	r2, [pc, #252]	@ (8003db8 <HAL_DMA_IRQHandler+0xa54>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8003dbc <HAL_DMA_IRQHandler+0xa58>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc0 <HAL_DMA_IRQHandler+0xa5c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc4 <HAL_DMA_IRQHandler+0xa60>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a39      	ldr	r2, [pc, #228]	@ (8003dc8 <HAL_DMA_IRQHandler+0xa64>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_DMA_IRQHandler+0x988>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_DMA_IRQHandler+0x98a>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 823f 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2204      	movs	r2, #4
 8003d06:	409a      	lsls	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80cd 	beq.w	8003eac <HAL_DMA_IRQHandler+0xb48>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80c7 	beq.w	8003eac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2204      	movs	r2, #4
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d049      	beq.n	8003dcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8210 	beq.w	800416c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d54:	e20a      	b.n	800416c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8206 	beq.w	800416c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d68:	e200      	b.n	800416c <HAL_DMA_IRQHandler+0xe08>
 8003d6a:	bf00      	nop
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d160      	bne.n	8003e98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd8 <HAL_DMA_IRQHandler+0xc74>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04a      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7d      	ldr	r2, [pc, #500]	@ (8003fdc <HAL_DMA_IRQHandler+0xc78>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d045      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d040      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fe4 <HAL_DMA_IRQHandler+0xc80>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d03b      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a79      	ldr	r2, [pc, #484]	@ (8003fe8 <HAL_DMA_IRQHandler+0xc84>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d036      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <HAL_DMA_IRQHandler+0xc88>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d031      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a76      	ldr	r2, [pc, #472]	@ (8003ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d02c      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a74      	ldr	r2, [pc, #464]	@ (8003ff4 <HAL_DMA_IRQHandler+0xc90>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d027      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a73      	ldr	r2, [pc, #460]	@ (8003ff8 <HAL_DMA_IRQHandler+0xc94>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a71      	ldr	r2, [pc, #452]	@ (8003ffc <HAL_DMA_IRQHandler+0xc98>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01d      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a70      	ldr	r2, [pc, #448]	@ (8004000 <HAL_DMA_IRQHandler+0xc9c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6e      	ldr	r2, [pc, #440]	@ (8004004 <HAL_DMA_IRQHandler+0xca0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6d      	ldr	r2, [pc, #436]	@ (8004008 <HAL_DMA_IRQHandler+0xca4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800400c <HAL_DMA_IRQHandler+0xca8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6a      	ldr	r2, [pc, #424]	@ (8004010 <HAL_DMA_IRQHandler+0xcac>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a68      	ldr	r2, [pc, #416]	@ (8004014 <HAL_DMA_IRQHandler+0xcb0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_DMA_IRQHandler+0xb24>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0208 	bic.w	r2, r2, #8
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <HAL_DMA_IRQHandler+0xb34>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8165 	beq.w	800416c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eaa:	e15f      	b.n	800416c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80c5 	beq.w	800404c <HAL_DMA_IRQHandler+0xce8>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80bf 	beq.w	800404c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d018      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 813a 	beq.w	8004170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f04:	e134      	b.n	8004170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8130 	beq.w	8004170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f18:	e12a      	b.n	8004170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8089 	bne.w	8004038 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd8 <HAL_DMA_IRQHandler+0xc74>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d04a      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a29      	ldr	r2, [pc, #164]	@ (8003fdc <HAL_DMA_IRQHandler+0xc78>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d045      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a28      	ldr	r2, [pc, #160]	@ (8003fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d040      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <HAL_DMA_IRQHandler+0xc80>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d03b      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a25      	ldr	r2, [pc, #148]	@ (8003fe8 <HAL_DMA_IRQHandler+0xc84>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d036      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <HAL_DMA_IRQHandler+0xc88>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d031      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a22      	ldr	r2, [pc, #136]	@ (8003ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d02c      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <HAL_DMA_IRQHandler+0xc90>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d027      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff8 <HAL_DMA_IRQHandler+0xc94>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d022      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <HAL_DMA_IRQHandler+0xc98>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01d      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004000 <HAL_DMA_IRQHandler+0xc9c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d018      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <HAL_DMA_IRQHandler+0xca0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a19      	ldr	r2, [pc, #100]	@ (8004008 <HAL_DMA_IRQHandler+0xca4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_DMA_IRQHandler+0xca8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d009      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <HAL_DMA_IRQHandler+0xcac>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <HAL_DMA_IRQHandler+0xcb0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d128      	bne.n	8004018 <HAL_DMA_IRQHandler+0xcb4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0214 	bic.w	r2, r2, #20
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e027      	b.n	8004028 <HAL_DMA_IRQHandler+0xcc4>
 8003fd8:	40020010 	.word	0x40020010
 8003fdc:	40020028 	.word	0x40020028
 8003fe0:	40020040 	.word	0x40020040
 8003fe4:	40020058 	.word	0x40020058
 8003fe8:	40020070 	.word	0x40020070
 8003fec:	40020088 	.word	0x40020088
 8003ff0:	400200a0 	.word	0x400200a0
 8003ff4:	400200b8 	.word	0x400200b8
 8003ff8:	40020410 	.word	0x40020410
 8003ffc:	40020428 	.word	0x40020428
 8004000:	40020440 	.word	0x40020440
 8004004:	40020458 	.word	0x40020458
 8004008:	40020470 	.word	0x40020470
 800400c:	40020488 	.word	0x40020488
 8004010:	400204a0 	.word	0x400204a0
 8004014:	400204b8 	.word	0x400204b8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 020a 	bic.w	r2, r2, #10
 8004026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800404a:	e091      	b.n	8004170 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2208      	movs	r2, #8
 8004056:	409a      	lsls	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8088 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8082 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a41      	ldr	r2, [pc, #260]	@ (8004178 <HAL_DMA_IRQHandler+0xe14>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04a      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3f      	ldr	r2, [pc, #252]	@ (800417c <HAL_DMA_IRQHandler+0xe18>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d045      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3e      	ldr	r2, [pc, #248]	@ (8004180 <HAL_DMA_IRQHandler+0xe1c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d040      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3c      	ldr	r2, [pc, #240]	@ (8004184 <HAL_DMA_IRQHandler+0xe20>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03b      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3b      	ldr	r2, [pc, #236]	@ (8004188 <HAL_DMA_IRQHandler+0xe24>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d036      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a39      	ldr	r2, [pc, #228]	@ (800418c <HAL_DMA_IRQHandler+0xe28>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a38      	ldr	r2, [pc, #224]	@ (8004190 <HAL_DMA_IRQHandler+0xe2c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d02c      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a36      	ldr	r2, [pc, #216]	@ (8004194 <HAL_DMA_IRQHandler+0xe30>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d027      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a35      	ldr	r2, [pc, #212]	@ (8004198 <HAL_DMA_IRQHandler+0xe34>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a33      	ldr	r2, [pc, #204]	@ (800419c <HAL_DMA_IRQHandler+0xe38>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01d      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a32      	ldr	r2, [pc, #200]	@ (80041a0 <HAL_DMA_IRQHandler+0xe3c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <HAL_DMA_IRQHandler+0xe40>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <HAL_DMA_IRQHandler+0xe44>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2d      	ldr	r2, [pc, #180]	@ (80041ac <HAL_DMA_IRQHandler+0xe48>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2c      	ldr	r2, [pc, #176]	@ (80041b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2a      	ldr	r2, [pc, #168]	@ (80041b4 <HAL_DMA_IRQHandler+0xe50>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <HAL_DMA_IRQHandler+0xdbc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 021c 	bic.w	r2, r2, #28
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e007      	b.n	8004130 <HAL_DMA_IRQHandler+0xdcc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 020e 	bic.w	r2, r2, #14
 800412e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e004      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004168:	bf00      	nop
 800416a:	e002      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004170:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004172:	3728      	adds	r7, #40	@ 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40020010 	.word	0x40020010
 800417c:	40020028 	.word	0x40020028
 8004180:	40020040 	.word	0x40020040
 8004184:	40020058 	.word	0x40020058
 8004188:	40020070 	.word	0x40020070
 800418c:	40020088 	.word	0x40020088
 8004190:	400200a0 	.word	0x400200a0
 8004194:	400200b8 	.word	0x400200b8
 8004198:	40020410 	.word	0x40020410
 800419c:	40020428 	.word	0x40020428
 80041a0:	40020440 	.word	0x40020440
 80041a4:	40020458 	.word	0x40020458
 80041a8:	40020470 	.word	0x40020470
 80041ac:	40020488 	.word	0x40020488
 80041b0:	400204a0 	.word	0x400204a0
 80041b4:	400204b8 	.word	0x400204b8

080041b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7f      	ldr	r2, [pc, #508]	@ (80043d4 <DMA_SetConfig+0x21c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d072      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7d      	ldr	r2, [pc, #500]	@ (80043d8 <DMA_SetConfig+0x220>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d06d      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7c      	ldr	r2, [pc, #496]	@ (80043dc <DMA_SetConfig+0x224>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d068      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a7a      	ldr	r2, [pc, #488]	@ (80043e0 <DMA_SetConfig+0x228>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d063      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a79      	ldr	r2, [pc, #484]	@ (80043e4 <DMA_SetConfig+0x22c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d05e      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a77      	ldr	r2, [pc, #476]	@ (80043e8 <DMA_SetConfig+0x230>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d059      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a76      	ldr	r2, [pc, #472]	@ (80043ec <DMA_SetConfig+0x234>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d054      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a74      	ldr	r2, [pc, #464]	@ (80043f0 <DMA_SetConfig+0x238>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d04f      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a73      	ldr	r2, [pc, #460]	@ (80043f4 <DMA_SetConfig+0x23c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d04a      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a71      	ldr	r2, [pc, #452]	@ (80043f8 <DMA_SetConfig+0x240>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d045      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a70      	ldr	r2, [pc, #448]	@ (80043fc <DMA_SetConfig+0x244>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d040      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6e      	ldr	r2, [pc, #440]	@ (8004400 <DMA_SetConfig+0x248>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d03b      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6d      	ldr	r2, [pc, #436]	@ (8004404 <DMA_SetConfig+0x24c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d036      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6b      	ldr	r2, [pc, #428]	@ (8004408 <DMA_SetConfig+0x250>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d031      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6a      	ldr	r2, [pc, #424]	@ (800440c <DMA_SetConfig+0x254>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d02c      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a68      	ldr	r2, [pc, #416]	@ (8004410 <DMA_SetConfig+0x258>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d027      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a67      	ldr	r2, [pc, #412]	@ (8004414 <DMA_SetConfig+0x25c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <DMA_SetConfig+0x260>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a64      	ldr	r2, [pc, #400]	@ (800441c <DMA_SetConfig+0x264>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a62      	ldr	r2, [pc, #392]	@ (8004420 <DMA_SetConfig+0x268>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a61      	ldr	r2, [pc, #388]	@ (8004424 <DMA_SetConfig+0x26c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004428 <DMA_SetConfig+0x270>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a5e      	ldr	r2, [pc, #376]	@ (800442c <DMA_SetConfig+0x274>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <DMA_SetConfig+0x10a>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004430 <DMA_SetConfig+0x278>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <DMA_SetConfig+0x10e>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <DMA_SetConfig+0x110>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a39      	ldr	r2, [pc, #228]	@ (80043d4 <DMA_SetConfig+0x21c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d04a      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a38      	ldr	r2, [pc, #224]	@ (80043d8 <DMA_SetConfig+0x220>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d045      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a36      	ldr	r2, [pc, #216]	@ (80043dc <DMA_SetConfig+0x224>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d040      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a35      	ldr	r2, [pc, #212]	@ (80043e0 <DMA_SetConfig+0x228>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d03b      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a33      	ldr	r2, [pc, #204]	@ (80043e4 <DMA_SetConfig+0x22c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d036      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <DMA_SetConfig+0x230>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d031      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	@ (80043ec <DMA_SetConfig+0x234>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02c      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2f      	ldr	r2, [pc, #188]	@ (80043f0 <DMA_SetConfig+0x238>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2d      	ldr	r2, [pc, #180]	@ (80043f4 <DMA_SetConfig+0x23c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2c      	ldr	r2, [pc, #176]	@ (80043f8 <DMA_SetConfig+0x240>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2a      	ldr	r2, [pc, #168]	@ (80043fc <DMA_SetConfig+0x244>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a29      	ldr	r2, [pc, #164]	@ (8004400 <DMA_SetConfig+0x248>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a27      	ldr	r2, [pc, #156]	@ (8004404 <DMA_SetConfig+0x24c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a26      	ldr	r2, [pc, #152]	@ (8004408 <DMA_SetConfig+0x250>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a24      	ldr	r2, [pc, #144]	@ (800440c <DMA_SetConfig+0x254>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <DMA_SetConfig+0x1d0>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a23      	ldr	r2, [pc, #140]	@ (8004410 <DMA_SetConfig+0x258>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <DMA_SetConfig+0x1d4>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <DMA_SetConfig+0x1d6>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d059      	beq.n	8004446 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	223f      	movs	r2, #63	@ 0x3f
 800439c:	409a      	lsls	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b40      	cmp	r3, #64	@ 0x40
 80043c0:	d138      	bne.n	8004434 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043d2:	e086      	b.n	80044e2 <DMA_SetConfig+0x32a>
 80043d4:	40020010 	.word	0x40020010
 80043d8:	40020028 	.word	0x40020028
 80043dc:	40020040 	.word	0x40020040
 80043e0:	40020058 	.word	0x40020058
 80043e4:	40020070 	.word	0x40020070
 80043e8:	40020088 	.word	0x40020088
 80043ec:	400200a0 	.word	0x400200a0
 80043f0:	400200b8 	.word	0x400200b8
 80043f4:	40020410 	.word	0x40020410
 80043f8:	40020428 	.word	0x40020428
 80043fc:	40020440 	.word	0x40020440
 8004400:	40020458 	.word	0x40020458
 8004404:	40020470 	.word	0x40020470
 8004408:	40020488 	.word	0x40020488
 800440c:	400204a0 	.word	0x400204a0
 8004410:	400204b8 	.word	0x400204b8
 8004414:	58025408 	.word	0x58025408
 8004418:	5802541c 	.word	0x5802541c
 800441c:	58025430 	.word	0x58025430
 8004420:	58025444 	.word	0x58025444
 8004424:	58025458 	.word	0x58025458
 8004428:	5802546c 	.word	0x5802546c
 800442c:	58025480 	.word	0x58025480
 8004430:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	e04d      	b.n	80044e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a29      	ldr	r2, [pc, #164]	@ (80044f0 <DMA_SetConfig+0x338>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <DMA_SetConfig+0x2de>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a27      	ldr	r2, [pc, #156]	@ (80044f4 <DMA_SetConfig+0x33c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01d      	beq.n	8004496 <DMA_SetConfig+0x2de>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a26      	ldr	r2, [pc, #152]	@ (80044f8 <DMA_SetConfig+0x340>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <DMA_SetConfig+0x2de>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a24      	ldr	r2, [pc, #144]	@ (80044fc <DMA_SetConfig+0x344>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <DMA_SetConfig+0x2de>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a23      	ldr	r2, [pc, #140]	@ (8004500 <DMA_SetConfig+0x348>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <DMA_SetConfig+0x2de>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <DMA_SetConfig+0x34c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <DMA_SetConfig+0x2de>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a20      	ldr	r2, [pc, #128]	@ (8004508 <DMA_SetConfig+0x350>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <DMA_SetConfig+0x2de>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1e      	ldr	r2, [pc, #120]	@ (800450c <DMA_SetConfig+0x354>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <DMA_SetConfig+0x2e2>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <DMA_SetConfig+0x2e4>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2201      	movs	r2, #1
 80044aa:	409a      	lsls	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d108      	bne.n	80044d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	e007      	b.n	80044e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58025408 	.word	0x58025408
 80044f4:	5802541c 	.word	0x5802541c
 80044f8:	58025430 	.word	0x58025430
 80044fc:	58025444 	.word	0x58025444
 8004500:	58025458 	.word	0x58025458
 8004504:	5802546c 	.word	0x5802546c
 8004508:	58025480 	.word	0x58025480
 800450c:	58025494 	.word	0x58025494

08004510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a42      	ldr	r2, [pc, #264]	@ (8004628 <DMA_CalcBaseAndBitshift+0x118>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d04a      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a41      	ldr	r2, [pc, #260]	@ (800462c <DMA_CalcBaseAndBitshift+0x11c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d045      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3f      	ldr	r2, [pc, #252]	@ (8004630 <DMA_CalcBaseAndBitshift+0x120>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d040      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3e      	ldr	r2, [pc, #248]	@ (8004634 <DMA_CalcBaseAndBitshift+0x124>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d03b      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3c      	ldr	r2, [pc, #240]	@ (8004638 <DMA_CalcBaseAndBitshift+0x128>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d036      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3b      	ldr	r2, [pc, #236]	@ (800463c <DMA_CalcBaseAndBitshift+0x12c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d031      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a39      	ldr	r2, [pc, #228]	@ (8004640 <DMA_CalcBaseAndBitshift+0x130>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d02c      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a38      	ldr	r2, [pc, #224]	@ (8004644 <DMA_CalcBaseAndBitshift+0x134>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d027      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a36      	ldr	r2, [pc, #216]	@ (8004648 <DMA_CalcBaseAndBitshift+0x138>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d022      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a35      	ldr	r2, [pc, #212]	@ (800464c <DMA_CalcBaseAndBitshift+0x13c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d01d      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a33      	ldr	r2, [pc, #204]	@ (8004650 <DMA_CalcBaseAndBitshift+0x140>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d018      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a32      	ldr	r2, [pc, #200]	@ (8004654 <DMA_CalcBaseAndBitshift+0x144>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a30      	ldr	r2, [pc, #192]	@ (8004658 <DMA_CalcBaseAndBitshift+0x148>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00e      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2f      	ldr	r2, [pc, #188]	@ (800465c <DMA_CalcBaseAndBitshift+0x14c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d009      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004660 <DMA_CalcBaseAndBitshift+0x150>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <DMA_CalcBaseAndBitshift+0xa8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004664 <DMA_CalcBaseAndBitshift+0x154>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <DMA_CalcBaseAndBitshift+0xac>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <DMA_CalcBaseAndBitshift+0xae>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d024      	beq.n	800460c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	3b10      	subs	r3, #16
 80045ca:	4a27      	ldr	r2, [pc, #156]	@ (8004668 <DMA_CalcBaseAndBitshift+0x158>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	4a24      	ldr	r2, [pc, #144]	@ (800466c <DMA_CalcBaseAndBitshift+0x15c>)
 80045dc:	5cd3      	ldrb	r3, [r2, r3]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d908      	bls.n	80045fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004670 <DMA_CalcBaseAndBitshift+0x160>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	1d1a      	adds	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80045fa:	e00d      	b.n	8004618 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <DMA_CalcBaseAndBitshift+0x160>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6593      	str	r3, [r2, #88]	@ 0x58
 800460a:	e005      	b.n	8004618 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40020010 	.word	0x40020010
 800462c:	40020028 	.word	0x40020028
 8004630:	40020040 	.word	0x40020040
 8004634:	40020058 	.word	0x40020058
 8004638:	40020070 	.word	0x40020070
 800463c:	40020088 	.word	0x40020088
 8004640:	400200a0 	.word	0x400200a0
 8004644:	400200b8 	.word	0x400200b8
 8004648:	40020410 	.word	0x40020410
 800464c:	40020428 	.word	0x40020428
 8004650:	40020440 	.word	0x40020440
 8004654:	40020458 	.word	0x40020458
 8004658:	40020470 	.word	0x40020470
 800465c:	40020488 	.word	0x40020488
 8004660:	400204a0 	.word	0x400204a0
 8004664:	400204b8 	.word	0x400204b8
 8004668:	aaaaaaab 	.word	0xaaaaaaab
 800466c:	0800a2a8 	.word	0x0800a2a8
 8004670:	fffffc00 	.word	0xfffffc00

08004674 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d120      	bne.n	80046ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	2b03      	cmp	r3, #3
 800468e:	d858      	bhi.n	8004742 <DMA_CheckFifoParam+0xce>
 8004690:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <DMA_CheckFifoParam+0x24>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046bb 	.word	0x080046bb
 80046a0:	080046a9 	.word	0x080046a9
 80046a4:	08004743 	.word	0x08004743
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d048      	beq.n	8004746 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046b8:	e045      	b.n	8004746 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046c2:	d142      	bne.n	800474a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046c8:	e03f      	b.n	800474a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d2:	d123      	bne.n	800471c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d838      	bhi.n	800474e <DMA_CheckFifoParam+0xda>
 80046dc:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <DMA_CheckFifoParam+0x70>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fb 	.word	0x080046fb
 80046ec:	080046f5 	.word	0x080046f5
 80046f0:	0800470d 	.word	0x0800470d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
        break;
 80046f8:	e030      	b.n	800475c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d025      	beq.n	8004752 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800470a:	e022      	b.n	8004752 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004714:	d11f      	bne.n	8004756 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800471a:	e01c      	b.n	8004756 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	2b02      	cmp	r3, #2
 8004722:	d902      	bls.n	800472a <DMA_CheckFifoParam+0xb6>
 8004724:	2b03      	cmp	r3, #3
 8004726:	d003      	beq.n	8004730 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004728:	e018      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
        break;
 800472e:	e015      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
    break;
 8004740:	e00b      	b.n	800475a <DMA_CheckFifoParam+0xe6>
        break;
 8004742:	bf00      	nop
 8004744:	e00a      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        break;
 8004746:	bf00      	nop
 8004748:	e008      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        break;
 800474a:	bf00      	nop
 800474c:	e006      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        break;
 800474e:	bf00      	nop
 8004750:	e004      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        break;
 8004752:	bf00      	nop
 8004754:	e002      	b.n	800475c <DMA_CheckFifoParam+0xe8>
        break;
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <DMA_CheckFifoParam+0xe8>
    break;
 800475a:	bf00      	nop
    }
  }

  return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a38      	ldr	r2, [pc, #224]	@ (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a36      	ldr	r2, [pc, #216]	@ (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01d      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a35      	ldr	r2, [pc, #212]	@ (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a33      	ldr	r2, [pc, #204]	@ (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a32      	ldr	r2, [pc, #200]	@ (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a30      	ldr	r2, [pc, #192]	@ (8004874 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2d      	ldr	r2, [pc, #180]	@ (800487c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01a      	beq.n	800480a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	3b08      	subs	r3, #8
 80047dc:	4a28      	ldr	r2, [pc, #160]	@ (8004880 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4b26      	ldr	r3, [pc, #152]	@ (8004884 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a24      	ldr	r2, [pc, #144]	@ (8004888 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004808:	e024      	b.n	8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3b10      	subs	r3, #16
 8004812:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a1c      	ldr	r2, [pc, #112]	@ (8004890 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d806      	bhi.n	8004832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4a1b      	ldr	r2, [pc, #108]	@ (8004894 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d902      	bls.n	8004832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3308      	adds	r3, #8
 8004830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a16      	ldr	r2, [pc, #88]	@ (800489c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004844:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	58025408 	.word	0x58025408
 8004864:	5802541c 	.word	0x5802541c
 8004868:	58025430 	.word	0x58025430
 800486c:	58025444 	.word	0x58025444
 8004870:	58025458 	.word	0x58025458
 8004874:	5802546c 	.word	0x5802546c
 8004878:	58025480 	.word	0x58025480
 800487c:	58025494 	.word	0x58025494
 8004880:	cccccccd 	.word	0xcccccccd
 8004884:	16009600 	.word	0x16009600
 8004888:	58025880 	.word	0x58025880
 800488c:	aaaaaaab 	.word	0xaaaaaaab
 8004890:	400204b8 	.word	0x400204b8
 8004894:	4002040f 	.word	0x4002040f
 8004898:	10008200 	.word	0x10008200
 800489c:	40020880 	.word	0x40020880

080048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d04a      	beq.n	800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d847      	bhi.n	800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a25      	ldr	r2, [pc, #148]	@ (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a24      	ldr	r2, [pc, #144]	@ (800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d01d      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a22      	ldr	r2, [pc, #136]	@ (8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	@ (8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4b17      	ldr	r3, [pc, #92]	@ (8004978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a15      	ldr	r2, [pc, #84]	@ (800497c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004928:	671a      	str	r2, [r3, #112]	@ 0x70
 800492a:	e009      	b.n	8004940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a11      	ldr	r2, [pc, #68]	@ (8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800493e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3b01      	subs	r3, #1
 8004944:	2201      	movs	r2, #1
 8004946:	409a      	lsls	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	58025408 	.word	0x58025408
 800495c:	5802541c 	.word	0x5802541c
 8004960:	58025430 	.word	0x58025430
 8004964:	58025444 	.word	0x58025444
 8004968:	58025458 	.word	0x58025458
 800496c:	5802546c 	.word	0x5802546c
 8004970:	58025480 	.word	0x58025480
 8004974:	58025494 	.word	0x58025494
 8004978:	1600963f 	.word	0x1600963f
 800497c:	58025940 	.word	0x58025940
 8004980:	1000823f 	.word	0x1000823f
 8004984:	40020940 	.word	0x40020940

08004988 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b80      	cmp	r3, #128	@ 0x80
 80049a0:	d105      	bne.n	80049ae <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e315      	b.n	8004fda <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e30e      	b.n	8004fda <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	f040 82fd 	bne.w	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a82      	ldr	r2, [pc, #520]	@ (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04a      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a81      	ldr	r2, [pc, #516]	@ (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d045      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a7f      	ldr	r2, [pc, #508]	@ (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d040      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a7e      	ldr	r2, [pc, #504]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d03b      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d036      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a7b      	ldr	r2, [pc, #492]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d031      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a79      	ldr	r2, [pc, #484]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02c      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a78      	ldr	r2, [pc, #480]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d027      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a76      	ldr	r2, [pc, #472]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a75      	ldr	r2, [pc, #468]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a73      	ldr	r2, [pc, #460]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a72      	ldr	r2, [pc, #456]	@ (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a70      	ldr	r2, [pc, #448]	@ (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6f      	ldr	r2, [pc, #444]	@ (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6d      	ldr	r2, [pc, #436]	@ (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004a98:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	223f      	movs	r2, #63	@ 0x3f
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e018      	b.n	8004aee <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f248 0320 	movw	r3, #32800	@ 0x8020
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	3304      	adds	r3, #4
 8004adc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fb41 	bl	800517c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d072      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d06d      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a39      	ldr	r2, [pc, #228]	@ (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d068      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a37      	ldr	r2, [pc, #220]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d063      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a36      	ldr	r2, [pc, #216]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d05e      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a34      	ldr	r2, [pc, #208]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d059      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a33      	ldr	r2, [pc, #204]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d054      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a31      	ldr	r2, [pc, #196]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d04f      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a30      	ldr	r2, [pc, #192]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2e      	ldr	r2, [pc, #184]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2d      	ldr	r2, [pc, #180]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a2a      	ldr	r2, [pc, #168]	@ (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a28      	ldr	r2, [pc, #160]	@ (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a27      	ldr	r2, [pc, #156]	@ (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a25      	ldr	r2, [pc, #148]	@ (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a24      	ldr	r2, [pc, #144]	@ (8004c30 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a22      	ldr	r2, [pc, #136]	@ (8004c34 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a21      	ldr	r2, [pc, #132]	@ (8004c38 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c3c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c44 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d132      	bne.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e031      	b.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004bee:	bf00      	nop
 8004bf0:	40020010 	.word	0x40020010
 8004bf4:	40020028 	.word	0x40020028
 8004bf8:	40020040 	.word	0x40020040
 8004bfc:	40020058 	.word	0x40020058
 8004c00:	40020070 	.word	0x40020070
 8004c04:	40020088 	.word	0x40020088
 8004c08:	400200a0 	.word	0x400200a0
 8004c0c:	400200b8 	.word	0x400200b8
 8004c10:	40020410 	.word	0x40020410
 8004c14:	40020428 	.word	0x40020428
 8004c18:	40020440 	.word	0x40020440
 8004c1c:	40020458 	.word	0x40020458
 8004c20:	40020470 	.word	0x40020470
 8004c24:	40020488 	.word	0x40020488
 8004c28:	400204a0 	.word	0x400204a0
 8004c2c:	400204b8 	.word	0x400204b8
 8004c30:	58025408 	.word	0x58025408
 8004c34:	5802541c 	.word	0x5802541c
 8004c38:	58025430 	.word	0x58025430
 8004c3c:	58025444 	.word	0x58025444
 8004c40:	58025458 	.word	0x58025458
 8004c44:	5802546c 	.word	0x5802546c
 8004c48:	58025480 	.word	0x58025480
 8004c4c:	58025494 	.word	0x58025494
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c5e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c70:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3b      	ldr	r2, [pc, #236]	@ (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d04a      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a39      	ldr	r2, [pc, #228]	@ (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d045      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	@ (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d040      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	@ (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d03b      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	@ (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d036      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	@ (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d031      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	@ (8004d7c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d02c      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	@ (8004d80 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d027      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004d84 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d022      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d88 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01d      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2c      	ldr	r2, [pc, #176]	@ (8004d8c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d90 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a29      	ldr	r2, [pc, #164]	@ (8004d94 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	@ (8004d98 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a26      	ldr	r2, [pc, #152]	@ (8004d9c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a24      	ldr	r2, [pc, #144]	@ (8004da0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d043      	beq.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 021e 	bic.w	r2, r3, #30
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0216 	orr.w	r2, r2, #22
 8004d2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d3e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d043      	beq.n	8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0208 	orr.w	r2, r2, #8
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e03a      	b.n	8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8004d62:	bf00      	nop
 8004d64:	40020010 	.word	0x40020010
 8004d68:	40020028 	.word	0x40020028
 8004d6c:	40020040 	.word	0x40020040
 8004d70:	40020058 	.word	0x40020058
 8004d74:	40020070 	.word	0x40020070
 8004d78:	40020088 	.word	0x40020088
 8004d7c:	400200a0 	.word	0x400200a0
 8004d80:	400200b8 	.word	0x400200b8
 8004d84:	40020410 	.word	0x40020410
 8004d88:	40020428 	.word	0x40020428
 8004d8c:	40020440 	.word	0x40020440
 8004d90:	40020458 	.word	0x40020458
 8004d94:	40020470 	.word	0x40020470
 8004d98:	40020488 	.word	0x40020488
 8004d9c:	400204a0 	.word	0x400204a0
 8004da0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 020e 	bic.w	r2, r3, #14
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 020a 	orr.w	r2, r2, #10
 8004db6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0204 	orr.w	r2, r2, #4
 8004dd6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a81      	ldr	r2, [pc, #516]	@ (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d072      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a80      	ldr	r2, [pc, #512]	@ (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d06d      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a7e      	ldr	r2, [pc, #504]	@ (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d068      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d063      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7b      	ldr	r2, [pc, #492]	@ (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d05e      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7a      	ldr	r2, [pc, #488]	@ (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d059      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a78      	ldr	r2, [pc, #480]	@ (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d054      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a77      	ldr	r2, [pc, #476]	@ (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d04f      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a75      	ldr	r2, [pc, #468]	@ (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04a      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a74      	ldr	r2, [pc, #464]	@ (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d045      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a72      	ldr	r2, [pc, #456]	@ (800500c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d040      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a71      	ldr	r2, [pc, #452]	@ (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6f      	ldr	r2, [pc, #444]	@ (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d036      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d031      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6c      	ldr	r2, [pc, #432]	@ (800501c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02c      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6b      	ldr	r2, [pc, #428]	@ (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d027      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a69      	ldr	r2, [pc, #420]	@ (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a68      	ldr	r2, [pc, #416]	@ (8005028 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a66      	ldr	r2, [pc, #408]	@ (800502c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a65      	ldr	r2, [pc, #404]	@ (8005030 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a63      	ldr	r2, [pc, #396]	@ (8005034 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a62      	ldr	r2, [pc, #392]	@ (8005038 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a60      	ldr	r2, [pc, #384]	@ (800503c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8005040 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01a      	beq.n	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a35      	ldr	r2, [pc, #212]	@ (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04a      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a34      	ldr	r2, [pc, #208]	@ (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d045      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a32      	ldr	r2, [pc, #200]	@ (8004fec <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a31      	ldr	r2, [pc, #196]	@ (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d036      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d031      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	@ (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02c      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2b      	ldr	r2, [pc, #172]	@ (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d027      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	@ (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a28      	ldr	r2, [pc, #160]	@ (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a26      	ldr	r2, [pc, #152]	@ (800500c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a25      	ldr	r2, [pc, #148]	@ (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a23      	ldr	r2, [pc, #140]	@ (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a22      	ldr	r2, [pc, #136]	@ (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a20      	ldr	r2, [pc, #128]	@ (800501c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e00e      	b.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e005      	b.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494

08005044 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a39      	ldr	r2, [pc, #228]	@ (800513c <HAL_DMAEx_ChangeMemory+0xf8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d04a      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a37      	ldr	r2, [pc, #220]	@ (8005140 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d045      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a36      	ldr	r2, [pc, #216]	@ (8005144 <HAL_DMAEx_ChangeMemory+0x100>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d040      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <HAL_DMAEx_ChangeMemory+0x104>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d03b      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a33      	ldr	r2, [pc, #204]	@ (800514c <HAL_DMAEx_ChangeMemory+0x108>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d036      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a31      	ldr	r2, [pc, #196]	@ (8005150 <HAL_DMAEx_ChangeMemory+0x10c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d031      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a30      	ldr	r2, [pc, #192]	@ (8005154 <HAL_DMAEx_ChangeMemory+0x110>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d02c      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2e      	ldr	r2, [pc, #184]	@ (8005158 <HAL_DMAEx_ChangeMemory+0x114>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d027      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2d      	ldr	r2, [pc, #180]	@ (800515c <HAL_DMAEx_ChangeMemory+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005160 <HAL_DMAEx_ChangeMemory+0x11c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01d      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005164 <HAL_DMAEx_ChangeMemory+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a28      	ldr	r2, [pc, #160]	@ (8005168 <HAL_DMAEx_ChangeMemory+0x124>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a27      	ldr	r2, [pc, #156]	@ (800516c <HAL_DMAEx_ChangeMemory+0x128>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a25      	ldr	r2, [pc, #148]	@ (8005170 <HAL_DMAEx_ChangeMemory+0x12c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a24      	ldr	r2, [pc, #144]	@ (8005174 <HAL_DMAEx_ChangeMemory+0x130>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_DMAEx_ChangeMemory+0xae>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	@ (8005178 <HAL_DMAEx_ChangeMemory+0x134>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_DMAEx_ChangeMemory+0xb2>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_DMAEx_ChangeMemory+0xb4>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e010      	b.n	800512e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	611a      	str	r2, [r3, #16]
 8005114:	e00b      	b.n	800512e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e003      	b.n	800512e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40020010 	.word	0x40020010
 8005140:	40020028 	.word	0x40020028
 8005144:	40020040 	.word	0x40020040
 8005148:	40020058 	.word	0x40020058
 800514c:	40020070 	.word	0x40020070
 8005150:	40020088 	.word	0x40020088
 8005154:	400200a0 	.word	0x400200a0
 8005158:	400200b8 	.word	0x400200b8
 800515c:	40020410 	.word	0x40020410
 8005160:	40020428 	.word	0x40020428
 8005164:	40020440 	.word	0x40020440
 8005168:	40020458 	.word	0x40020458
 800516c:	40020470 	.word	0x40020470
 8005170:	40020488 	.word	0x40020488
 8005174:	400204a0 	.word	0x400204a0
 8005178:	400204b8 	.word	0x400204b8

0800517c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a46      	ldr	r2, [pc, #280]	@ (80052a8 <DMA_MultiBufferSetConfig+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d04a      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a44      	ldr	r2, [pc, #272]	@ (80052ac <DMA_MultiBufferSetConfig+0x130>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d045      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a43      	ldr	r2, [pc, #268]	@ (80052b0 <DMA_MultiBufferSetConfig+0x134>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d040      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a41      	ldr	r2, [pc, #260]	@ (80052b4 <DMA_MultiBufferSetConfig+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d03b      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a40      	ldr	r2, [pc, #256]	@ (80052b8 <DMA_MultiBufferSetConfig+0x13c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d036      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3e      	ldr	r2, [pc, #248]	@ (80052bc <DMA_MultiBufferSetConfig+0x140>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d031      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3d      	ldr	r2, [pc, #244]	@ (80052c0 <DMA_MultiBufferSetConfig+0x144>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02c      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a3b      	ldr	r2, [pc, #236]	@ (80052c4 <DMA_MultiBufferSetConfig+0x148>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a3a      	ldr	r2, [pc, #232]	@ (80052c8 <DMA_MultiBufferSetConfig+0x14c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a38      	ldr	r2, [pc, #224]	@ (80052cc <DMA_MultiBufferSetConfig+0x150>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a37      	ldr	r2, [pc, #220]	@ (80052d0 <DMA_MultiBufferSetConfig+0x154>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a35      	ldr	r2, [pc, #212]	@ (80052d4 <DMA_MultiBufferSetConfig+0x158>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a34      	ldr	r2, [pc, #208]	@ (80052d8 <DMA_MultiBufferSetConfig+0x15c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a32      	ldr	r2, [pc, #200]	@ (80052dc <DMA_MultiBufferSetConfig+0x160>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a31      	ldr	r2, [pc, #196]	@ (80052e0 <DMA_MultiBufferSetConfig+0x164>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <DMA_MultiBufferSetConfig+0xae>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2f      	ldr	r2, [pc, #188]	@ (80052e4 <DMA_MultiBufferSetConfig+0x168>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <DMA_MultiBufferSetConfig+0xb2>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <DMA_MultiBufferSetConfig+0xb4>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d019      	beq.n	8005268 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d108      	bne.n	8005256 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005254:	e021      	b.n	800529a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
}
 8005266:	e018      	b.n	800529a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b40      	cmp	r3, #64	@ 0x40
 8005276:	d108      	bne.n	800528a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	60da      	str	r2, [r3, #12]
}
 8005288:	e007      	b.n	800529a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40020010 	.word	0x40020010
 80052ac:	40020028 	.word	0x40020028
 80052b0:	40020040 	.word	0x40020040
 80052b4:	40020058 	.word	0x40020058
 80052b8:	40020070 	.word	0x40020070
 80052bc:	40020088 	.word	0x40020088
 80052c0:	400200a0 	.word	0x400200a0
 80052c4:	400200b8 	.word	0x400200b8
 80052c8:	40020410 	.word	0x40020410
 80052cc:	40020428 	.word	0x40020428
 80052d0:	40020440 	.word	0x40020440
 80052d4:	40020458 	.word	0x40020458
 80052d8:	40020470 	.word	0x40020470
 80052dc:	40020488 	.word	0x40020488
 80052e0:	400204a0 	.word	0x400204a0
 80052e4:	400204b8 	.word	0x400204b8

080052e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	@ 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052f6:	4b89      	ldr	r3, [pc, #548]	@ (800551c <HAL_GPIO_Init+0x234>)
 80052f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052fa:	e194      	b.n	8005626 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8186 	beq.w	8005620 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d005      	beq.n	800532c <HAL_GPIO_Init+0x44>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d130      	bne.n	800538e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005362:	2201      	movs	r2, #1
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 0201 	and.w	r2, r3, #1
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d017      	beq.n	80053ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d123      	bne.n	800541e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	08da      	lsrs	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3208      	adds	r2, #8
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	220f      	movs	r2, #15
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	08da      	lsrs	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3208      	adds	r2, #8
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2203      	movs	r2, #3
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4013      	ands	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0203 	and.w	r2, r3, #3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80e0 	beq.w	8005620 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005460:	4b2f      	ldr	r3, [pc, #188]	@ (8005520 <HAL_GPIO_Init+0x238>)
 8005462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005466:	4a2e      	ldr	r2, [pc, #184]	@ (8005520 <HAL_GPIO_Init+0x238>)
 8005468:	f043 0302 	orr.w	r3, r3, #2
 800546c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005470:	4b2b      	ldr	r3, [pc, #172]	@ (8005520 <HAL_GPIO_Init+0x238>)
 8005472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547e:	4a29      	ldr	r2, [pc, #164]	@ (8005524 <HAL_GPIO_Init+0x23c>)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	3302      	adds	r3, #2
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a20      	ldr	r2, [pc, #128]	@ (8005528 <HAL_GPIO_Init+0x240>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d052      	beq.n	8005550 <HAL_GPIO_Init+0x268>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1f      	ldr	r2, [pc, #124]	@ (800552c <HAL_GPIO_Init+0x244>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_GPIO_Init+0x22e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005530 <HAL_GPIO_Init+0x248>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02b      	beq.n	8005512 <HAL_GPIO_Init+0x22a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <HAL_GPIO_Init+0x24c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d025      	beq.n	800550e <HAL_GPIO_Init+0x226>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <HAL_GPIO_Init+0x250>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01f      	beq.n	800550a <HAL_GPIO_Init+0x222>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_GPIO_Init+0x254>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d019      	beq.n	8005506 <HAL_GPIO_Init+0x21e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_GPIO_Init+0x258>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d013      	beq.n	8005502 <HAL_GPIO_Init+0x21a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a19      	ldr	r2, [pc, #100]	@ (8005544 <HAL_GPIO_Init+0x25c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00d      	beq.n	80054fe <HAL_GPIO_Init+0x216>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a18      	ldr	r2, [pc, #96]	@ (8005548 <HAL_GPIO_Init+0x260>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <HAL_GPIO_Init+0x212>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a17      	ldr	r2, [pc, #92]	@ (800554c <HAL_GPIO_Init+0x264>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <HAL_GPIO_Init+0x20e>
 80054f2:	2309      	movs	r3, #9
 80054f4:	e02d      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 80054f6:	230a      	movs	r3, #10
 80054f8:	e02b      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 80054fa:	2308      	movs	r3, #8
 80054fc:	e029      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 80054fe:	2307      	movs	r3, #7
 8005500:	e027      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 8005502:	2306      	movs	r3, #6
 8005504:	e025      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 8005506:	2305      	movs	r3, #5
 8005508:	e023      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 800550a:	2304      	movs	r3, #4
 800550c:	e021      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 800550e:	2303      	movs	r3, #3
 8005510:	e01f      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 8005512:	2302      	movs	r3, #2
 8005514:	e01d      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 8005516:	2301      	movs	r3, #1
 8005518:	e01b      	b.n	8005552 <HAL_GPIO_Init+0x26a>
 800551a:	bf00      	nop
 800551c:	58000080 	.word	0x58000080
 8005520:	58024400 	.word	0x58024400
 8005524:	58000400 	.word	0x58000400
 8005528:	58020000 	.word	0x58020000
 800552c:	58020400 	.word	0x58020400
 8005530:	58020800 	.word	0x58020800
 8005534:	58020c00 	.word	0x58020c00
 8005538:	58021000 	.word	0x58021000
 800553c:	58021400 	.word	0x58021400
 8005540:	58021800 	.word	0x58021800
 8005544:	58021c00 	.word	0x58021c00
 8005548:	58022000 	.word	0x58022000
 800554c:	58022400 	.word	0x58022400
 8005550:	2300      	movs	r3, #0
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	f002 0203 	and.w	r2, r2, #3
 8005558:	0092      	lsls	r2, r2, #2
 800555a:	4093      	lsls	r3, r2
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005562:	4938      	ldr	r1, [pc, #224]	@ (8005644 <HAL_GPIO_Init+0x35c>)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	3302      	adds	r3, #2
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	43db      	mvns	r3, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005596:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	43db      	mvns	r3, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	f47f ae63 	bne.w	80052fc <HAL_GPIO_Init+0x14>
  }
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	3724      	adds	r7, #36	@ 0x24
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	58000400 	.word	0x58000400

08005648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e001      	b.n	800566a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	807b      	strh	r3, [r7, #2]
 8005684:	4613      	mov	r3, r2
 8005686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005688:	787b      	ldrb	r3, [r7, #1]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005694:	e003      	b.n	800569e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	041a      	lsls	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	619a      	str	r2, [r3, #24]
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056b4:	4b19      	ldr	r3, [pc, #100]	@ (800571c <HAL_PWREx_ConfigSupply+0x70>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d00a      	beq.n	80056d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056c0:	4b16      	ldr	r3, [pc, #88]	@ (800571c <HAL_PWREx_ConfigSupply+0x70>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d001      	beq.n	80056d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e01f      	b.n	8005712 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e01d      	b.n	8005712 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056d6:	4b11      	ldr	r3, [pc, #68]	@ (800571c <HAL_PWREx_ConfigSupply+0x70>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f023 0207 	bic.w	r2, r3, #7
 80056de:	490f      	ldr	r1, [pc, #60]	@ (800571c <HAL_PWREx_ConfigSupply+0x70>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056e6:	f7fb fee7 	bl	80014b8 <HAL_GetTick>
 80056ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056ec:	e009      	b.n	8005702 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056ee:	f7fb fee3 	bl	80014b8 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056fc:	d901      	bls.n	8005702 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e007      	b.n	8005712 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005702:	4b06      	ldr	r3, [pc, #24]	@ (800571c <HAL_PWREx_ConfigSupply+0x70>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570e:	d1ee      	bne.n	80056ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	58024800 	.word	0x58024800

08005720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	@ 0x30
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f000 bc48 	b.w	8005fc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8088 	beq.w	8005852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005742:	4b99      	ldr	r3, [pc, #612]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800574a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800574c:	4b96      	ldr	r3, [pc, #600]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	2b10      	cmp	r3, #16
 8005756:	d007      	beq.n	8005768 <HAL_RCC_OscConfig+0x48>
 8005758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575a:	2b18      	cmp	r3, #24
 800575c:	d111      	bne.n	8005782 <HAL_RCC_OscConfig+0x62>
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d10c      	bne.n	8005782 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	4b8f      	ldr	r3, [pc, #572]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d06d      	beq.n	8005850 <HAL_RCC_OscConfig+0x130>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d169      	bne.n	8005850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f000 bc21 	b.w	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x7a>
 800578c:	4b86      	ldr	r3, [pc, #536]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a85      	ldr	r2, [pc, #532]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e02e      	b.n	80057f8 <HAL_RCC_OscConfig+0xd8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x9c>
 80057a2:	4b81      	ldr	r3, [pc, #516]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a80      	ldr	r2, [pc, #512]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b7e      	ldr	r3, [pc, #504]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a7d      	ldr	r2, [pc, #500]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e01d      	b.n	80057f8 <HAL_RCC_OscConfig+0xd8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCC_OscConfig+0xc0>
 80057c6:	4b78      	ldr	r3, [pc, #480]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a77      	ldr	r2, [pc, #476]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b75      	ldr	r3, [pc, #468]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a74      	ldr	r2, [pc, #464]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e00b      	b.n	80057f8 <HAL_RCC_OscConfig+0xd8>
 80057e0:	4b71      	ldr	r3, [pc, #452]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a70      	ldr	r2, [pc, #448]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	4b6e      	ldr	r3, [pc, #440]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a6d      	ldr	r2, [pc, #436]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80057f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d013      	beq.n	8005828 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005800:	f7fb fe5a 	bl	80014b8 <HAL_GetTick>
 8005804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005808:	f7fb fe56 	bl	80014b8 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b64      	cmp	r3, #100	@ 0x64
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e3d4      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581a:	4b63      	ldr	r3, [pc, #396]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0xe8>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005828:	f7fb fe46 	bl	80014b8 <HAL_GetTick>
 800582c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005830:	f7fb fe42 	bl	80014b8 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	@ 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e3c0      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005842:	4b59      	ldr	r3, [pc, #356]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x110>
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80ca 	beq.w	80059f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005860:	4b51      	ldr	r3, [pc, #324]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005868:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800586a:	4b4f      	ldr	r3, [pc, #316]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_RCC_OscConfig+0x166>
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b18      	cmp	r3, #24
 800587a:	d156      	bne.n	800592a <HAL_RCC_OscConfig+0x20a>
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d151      	bne.n	800592a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005886:	4b48      	ldr	r3, [pc, #288]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_RCC_OscConfig+0x17e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e392      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800589e:	4b42      	ldr	r3, [pc, #264]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 0219 	bic.w	r2, r3, #25
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	493f      	ldr	r1, [pc, #252]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fb fe02 	bl	80014b8 <HAL_GetTick>
 80058b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b8:	f7fb fdfe 	bl	80014b8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e37c      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	4b37      	ldr	r3, [pc, #220]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	f7fb fdfb 	bl	80014d0 <HAL_GetREVID>
 80058da:	4603      	mov	r3, r0
 80058dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d817      	bhi.n	8005914 <HAL_RCC_OscConfig+0x1f4>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d108      	bne.n	80058fe <HAL_RCC_OscConfig+0x1de>
 80058ec:	4b2e      	ldr	r3, [pc, #184]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80058f4:	4a2c      	ldr	r2, [pc, #176]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fc:	e07a      	b.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fe:	4b2a      	ldr	r3, [pc, #168]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	031b      	lsls	r3, r3, #12
 800590c:	4926      	ldr	r1, [pc, #152]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800590e:	4313      	orrs	r3, r2
 8005910:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005912:	e06f      	b.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	4921      	ldr	r1, [pc, #132]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005928:	e064      	b.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d047      	beq.n	80059c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005932:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 0219 	bic.w	r2, r3, #25
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	491a      	ldr	r1, [pc, #104]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fb fdb8 	bl	80014b8 <HAL_GetTick>
 8005948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594c:	f7fb fdb4 	bl	80014b8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e332      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800595e:	4b12      	ldr	r3, [pc, #72]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596a:	f7fb fdb1 	bl	80014d0 <HAL_GetREVID>
 800596e:	4603      	mov	r3, r0
 8005970:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005974:	4293      	cmp	r3, r2
 8005976:	d819      	bhi.n	80059ac <HAL_RCC_OscConfig+0x28c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b40      	cmp	r3, #64	@ 0x40
 800597e:	d108      	bne.n	8005992 <HAL_RCC_OscConfig+0x272>
 8005980:	4b09      	ldr	r3, [pc, #36]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005988:	4a07      	ldr	r2, [pc, #28]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 800598a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598e:	6053      	str	r3, [r2, #4]
 8005990:	e030      	b.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
 8005992:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	031b      	lsls	r3, r3, #12
 80059a0:	4901      	ldr	r1, [pc, #4]	@ (80059a8 <HAL_RCC_OscConfig+0x288>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	604b      	str	r3, [r1, #4]
 80059a6:	e025      	b.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
 80059a8:	58024400 	.word	0x58024400
 80059ac:	4b9a      	ldr	r3, [pc, #616]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	4997      	ldr	r1, [pc, #604]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
 80059c0:	e018      	b.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c2:	4b95      	ldr	r3, [pc, #596]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a94      	ldr	r2, [pc, #592]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fb fd73 	bl	80014b8 <HAL_GetTick>
 80059d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d6:	f7fb fd6f 	bl	80014b8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e2ed      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059e8:	4b8b      	ldr	r3, [pc, #556]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a9 	beq.w	8005b54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a02:	4b85      	ldr	r3, [pc, #532]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a0c:	4b82      	ldr	r3, [pc, #520]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d007      	beq.n	8005a28 <HAL_RCC_OscConfig+0x308>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b18      	cmp	r3, #24
 8005a1c:	d13a      	bne.n	8005a94 <HAL_RCC_OscConfig+0x374>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d135      	bne.n	8005a94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a28:	4b7b      	ldr	r3, [pc, #492]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_OscConfig+0x320>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2b80      	cmp	r3, #128	@ 0x80
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e2c1      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a40:	f7fb fd46 	bl	80014d0 <HAL_GetREVID>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d817      	bhi.n	8005a7e <HAL_RCC_OscConfig+0x35e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d108      	bne.n	8005a68 <HAL_RCC_OscConfig+0x348>
 8005a56:	4b70      	ldr	r3, [pc, #448]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a66:	e075      	b.n	8005b54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a68:	4b6b      	ldr	r3, [pc, #428]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	069b      	lsls	r3, r3, #26
 8005a76:	4968      	ldr	r1, [pc, #416]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a7c:	e06a      	b.n	8005b54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a7e:	4b66      	ldr	r3, [pc, #408]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	4962      	ldr	r1, [pc, #392]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a92:	e05f      	b.n	8005b54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d042      	beq.n	8005b22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fb fd06 	bl	80014b8 <HAL_GetTick>
 8005aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ab0:	f7fb fd02 	bl	80014b8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e280      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ac2:	4b55      	ldr	r3, [pc, #340]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ace:	f7fb fcff 	bl	80014d0 <HAL_GetREVID>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d817      	bhi.n	8005b0c <HAL_RCC_OscConfig+0x3ec>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d108      	bne.n	8005af6 <HAL_RCC_OscConfig+0x3d6>
 8005ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005aec:	4a4a      	ldr	r2, [pc, #296]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005aee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005af2:	6053      	str	r3, [r2, #4]
 8005af4:	e02e      	b.n	8005b54 <HAL_RCC_OscConfig+0x434>
 8005af6:	4b48      	ldr	r3, [pc, #288]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	069b      	lsls	r3, r3, #26
 8005b04:	4944      	ldr	r1, [pc, #272]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	604b      	str	r3, [r1, #4]
 8005b0a:	e023      	b.n	8005b54 <HAL_RCC_OscConfig+0x434>
 8005b0c:	4b42      	ldr	r3, [pc, #264]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	493f      	ldr	r1, [pc, #252]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60cb      	str	r3, [r1, #12]
 8005b20:	e018      	b.n	8005b54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b22:	4b3d      	ldr	r3, [pc, #244]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3c      	ldr	r2, [pc, #240]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fb fcc3 	bl	80014b8 <HAL_GetTick>
 8005b32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b36:	f7fb fcbf 	bl	80014b8 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e23d      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b48:	4b33      	ldr	r3, [pc, #204]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d036      	beq.n	8005bce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d019      	beq.n	8005b9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b68:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fb fca0 	bl	80014b8 <HAL_GetTick>
 8005b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b7c:	f7fb fc9c 	bl	80014b8 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e21a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b8e:	4b22      	ldr	r3, [pc, #136]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCC_OscConfig+0x45c>
 8005b9a:	e018      	b.n	8005bce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fb fc86 	bl	80014b8 <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fb fc82 	bl	80014b8 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e200      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d039      	beq.n	8005c4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01c      	beq.n	8005c1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a0c      	ldr	r2, [pc, #48]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005bec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bee:	f7fb fc63 	bl	80014b8 <HAL_GetTick>
 8005bf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bf6:	f7fb fc5f 	bl	80014b8 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e1dd      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c08:	4b03      	ldr	r3, [pc, #12]	@ (8005c18 <HAL_RCC_OscConfig+0x4f8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x4d6>
 8005c14:	e01b      	b.n	8005c4e <HAL_RCC_OscConfig+0x52e>
 8005c16:	bf00      	nop
 8005c18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c1c:	4b9b      	ldr	r3, [pc, #620]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a9a      	ldr	r2, [pc, #616]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c28:	f7fb fc46 	bl	80014b8 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c30:	f7fb fc42 	bl	80014b8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e1c0      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c42:	4b92      	ldr	r3, [pc, #584]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8081 	beq.w	8005d5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e90 <HAL_RCC_OscConfig+0x770>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a8b      	ldr	r2, [pc, #556]	@ (8005e90 <HAL_RCC_OscConfig+0x770>)
 8005c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c68:	f7fb fc26 	bl	80014b8 <HAL_GetTick>
 8005c6c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c70:	f7fb fc22 	bl	80014b8 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	@ 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e1a0      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c82:	4b83      	ldr	r3, [pc, #524]	@ (8005e90 <HAL_RCC_OscConfig+0x770>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x584>
 8005c96:	4b7d      	ldr	r3, [pc, #500]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ca2:	e02d      	b.n	8005d00 <HAL_RCC_OscConfig+0x5e0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10c      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x5a6>
 8005cac:	4b77      	ldr	r3, [pc, #476]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a76      	ldr	r2, [pc, #472]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	4b74      	ldr	r3, [pc, #464]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbc:	4a73      	ldr	r2, [pc, #460]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc4:	e01c      	b.n	8005d00 <HAL_RCC_OscConfig+0x5e0>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x5c8>
 8005cce:	4b6f      	ldr	r3, [pc, #444]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cd4:	f043 0304 	orr.w	r3, r3, #4
 8005cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cda:	4b6c      	ldr	r3, [pc, #432]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cde:	4a6b      	ldr	r2, [pc, #428]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCC_OscConfig+0x5e0>
 8005ce8:	4b68      	ldr	r3, [pc, #416]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a67      	ldr	r2, [pc, #412]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf4:	4b65      	ldr	r3, [pc, #404]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf8:	4a64      	ldr	r2, [pc, #400]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	f023 0304 	bic.w	r3, r3, #4
 8005cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d015      	beq.n	8005d34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fb fbd6 	bl	80014b8 <HAL_GetTick>
 8005d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d10:	f7fb fbd2 	bl	80014b8 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e14e      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d26:	4b59      	ldr	r3, [pc, #356]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0ee      	beq.n	8005d10 <HAL_RCC_OscConfig+0x5f0>
 8005d32:	e014      	b.n	8005d5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fb fbc0 	bl	80014b8 <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3c:	f7fb fbbc 	bl	80014b8 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e138      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d52:	4b4e      	ldr	r3, [pc, #312]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ee      	bne.n	8005d3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 812d 	beq.w	8005fc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d68:	4b48      	ldr	r3, [pc, #288]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d70:	2b18      	cmp	r3, #24
 8005d72:	f000 80bd 	beq.w	8005ef0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	f040 809e 	bne.w	8005ebc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d80:	4b42      	ldr	r3, [pc, #264]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a41      	ldr	r2, [pc, #260]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fb fb94 	bl	80014b8 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d94:	f7fb fb90 	bl	80014b8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e10e      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da6:	4b39      	ldr	r3, [pc, #228]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db2:	4b36      	ldr	r3, [pc, #216]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db6:	4b37      	ldr	r3, [pc, #220]	@ (8005e94 <HAL_RCC_OscConfig+0x774>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dc2:	0112      	lsls	r2, r2, #4
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	4931      	ldr	r1, [pc, #196]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	628b      	str	r3, [r1, #40]	@ 0x28
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	025b      	lsls	r3, r3, #9
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	3b01      	subs	r3, #1
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df4:	3b01      	subs	r3, #1
 8005df6:	061b      	lsls	r3, r3, #24
 8005df8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005dfc:	4923      	ldr	r1, [pc, #140]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e02:	4b22      	ldr	r3, [pc, #136]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e06:	4a21      	ldr	r2, [pc, #132]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e12:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <HAL_RCC_OscConfig+0x778>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e1a:	00d2      	lsls	r2, r2, #3
 8005e1c:	491b      	ldr	r1, [pc, #108]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e22:	4b1a      	ldr	r3, [pc, #104]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	f023 020c 	bic.w	r2, r3, #12
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	4917      	ldr	r1, [pc, #92]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e34:	4b15      	ldr	r3, [pc, #84]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	f023 0202 	bic.w	r2, r3, #2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e40:	4912      	ldr	r1, [pc, #72]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e46:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	4a10      	ldr	r2, [pc, #64]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	4a0d      	ldr	r2, [pc, #52]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	4a0a      	ldr	r2, [pc, #40]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e6a:	4b08      	ldr	r3, [pc, #32]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6e:	4a07      	ldr	r2, [pc, #28]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e76:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a04      	ldr	r2, [pc, #16]	@ (8005e8c <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fb fb19 	bl	80014b8 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e88:	e011      	b.n	8005eae <HAL_RCC_OscConfig+0x78e>
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	58024800 	.word	0x58024800
 8005e94:	fffffc0c 	.word	0xfffffc0c
 8005e98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fb fb0c 	bl	80014b8 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e08a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eae:	4b47      	ldr	r3, [pc, #284]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0x77c>
 8005eba:	e082      	b.n	8005fc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebc:	4b43      	ldr	r3, [pc, #268]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a42      	ldr	r2, [pc, #264]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fb faf6 	bl	80014b8 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fb faf2 	bl	80014b8 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e070      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x7b0>
 8005eee:	e068      	b.n	8005fc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ef0:	4b36      	ldr	r3, [pc, #216]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ef6:	4b35      	ldr	r3, [pc, #212]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d031      	beq.n	8005f68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f003 0203 	and.w	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d12a      	bne.n	8005f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d122      	bne.n	8005f68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d11a      	bne.n	8005f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0a5b      	lsrs	r3, r3, #9
 8005f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d111      	bne.n	8005f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d108      	bne.n	8005f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	0e1b      	lsrs	r3, r3, #24
 8005f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e02b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f6c:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f70:	08db      	lsrs	r3, r3, #3
 8005f72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d01f      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f82:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	4a11      	ldr	r2, [pc, #68]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f8e:	f7fb fa93 	bl	80014b8 <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f94:	bf00      	nop
 8005f96:	f7fb fa8f 	bl	80014b8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d0f9      	beq.n	8005f96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <HAL_RCC_OscConfig+0x8b0>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fae:	00d2      	lsls	r2, r2, #3
 8005fb0:	4906      	ldr	r1, [pc, #24]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fb6:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fba:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <HAL_RCC_OscConfig+0x8ac>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3730      	adds	r7, #48	@ 0x30
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	ffff0007 	.word	0xffff0007

08005fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e19c      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b8a      	ldr	r3, [pc, #552]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d910      	bls.n	8006018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	4b87      	ldr	r3, [pc, #540]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 020f 	bic.w	r2, r3, #15
 8005ffe:	4985      	ldr	r1, [pc, #532]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b83      	ldr	r3, [pc, #524]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e184      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	4b7b      	ldr	r3, [pc, #492]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006030:	429a      	cmp	r2, r3
 8006032:	d908      	bls.n	8006046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006034:	4b78      	ldr	r3, [pc, #480]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	4975      	ldr	r1, [pc, #468]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006042:	4313      	orrs	r3, r2
 8006044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	4b70      	ldr	r3, [pc, #448]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800605e:	429a      	cmp	r2, r3
 8006060:	d908      	bls.n	8006074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006062:	4b6d      	ldr	r3, [pc, #436]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	496a      	ldr	r1, [pc, #424]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006070:	4313      	orrs	r3, r2
 8006072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	4b64      	ldr	r3, [pc, #400]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800608c:	429a      	cmp	r2, r3
 800608e:	d908      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006090:	4b61      	ldr	r3, [pc, #388]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	495e      	ldr	r1, [pc, #376]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	4b59      	ldr	r3, [pc, #356]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d908      	bls.n	80060d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060be:	4b56      	ldr	r3, [pc, #344]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	4953      	ldr	r1, [pc, #332]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d908      	bls.n	80060fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f023 020f 	bic.w	r2, r3, #15
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4947      	ldr	r1, [pc, #284]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d055      	beq.n	80061b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800610a:	4b43      	ldr	r3, [pc, #268]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	4940      	ldr	r1, [pc, #256]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006118:	4313      	orrs	r3, r2
 800611a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d107      	bne.n	8006134 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006124:	4b3c      	ldr	r3, [pc, #240]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d121      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0f6      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d107      	bne.n	800614c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800613c:	4b36      	ldr	r3, [pc, #216]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d115      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0ea      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d107      	bne.n	8006164 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006154:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0de      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006164:	4b2c      	ldr	r3, [pc, #176]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0d6      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006174:	4b28      	ldr	r3, [pc, #160]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f023 0207 	bic.w	r2, r3, #7
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4925      	ldr	r1, [pc, #148]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006182:	4313      	orrs	r3, r2
 8006184:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006186:	f7fb f997 	bl	80014b8 <HAL_GetTick>
 800618a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618c:	e00a      	b.n	80061a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800618e:	f7fb f993 	bl	80014b8 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0be      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d1eb      	bne.n	800618e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	4b14      	ldr	r3, [pc, #80]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d208      	bcs.n	80061e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d2:	4b11      	ldr	r3, [pc, #68]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f023 020f 	bic.w	r2, r3, #15
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	490e      	ldr	r1, [pc, #56]	@ (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d214      	bcs.n	800621c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 020f 	bic.w	r2, r3, #15
 80061fa:	4906      	ldr	r1, [pc, #24]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006202:	4b04      	ldr	r3, [pc, #16]	@ (8006214 <HAL_RCC_ClockConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d005      	beq.n	800621c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e086      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
 8006214:	52002000 	.word	0x52002000
 8006218:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	4b3f      	ldr	r3, [pc, #252]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006234:	429a      	cmp	r2, r3
 8006236:	d208      	bcs.n	800624a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006238:	4b3c      	ldr	r3, [pc, #240]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	4939      	ldr	r1, [pc, #228]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 8006246:	4313      	orrs	r3, r2
 8006248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d010      	beq.n	8006278 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	4b34      	ldr	r3, [pc, #208]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006262:	429a      	cmp	r2, r3
 8006264:	d208      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006266:	4b31      	ldr	r3, [pc, #196]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	492e      	ldr	r1, [pc, #184]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 8006274:	4313      	orrs	r3, r2
 8006276:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	4b28      	ldr	r3, [pc, #160]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006290:	429a      	cmp	r2, r3
 8006292:	d208      	bcs.n	80062a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006294:	4b25      	ldr	r3, [pc, #148]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	4922      	ldr	r1, [pc, #136]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062be:	429a      	cmp	r2, r3
 80062c0:	d208      	bcs.n	80062d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062c2:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4917      	ldr	r1, [pc, #92]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062d4:	f000 f834 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80062d8:	4602      	mov	r2, r0
 80062da:	4b14      	ldr	r3, [pc, #80]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	4912      	ldr	r1, [pc, #72]	@ (8006330 <HAL_RCC_ClockConfig+0x35c>)
 80062e6:	5ccb      	ldrb	r3, [r1, r3]
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062f2:	4b0e      	ldr	r3, [pc, #56]	@ (800632c <HAL_RCC_ClockConfig+0x358>)
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006330 <HAL_RCC_ClockConfig+0x35c>)
 80062fc:	5cd3      	ldrb	r3, [r2, r3]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	4a0a      	ldr	r2, [pc, #40]	@ (8006334 <HAL_RCC_ClockConfig+0x360>)
 800630a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800630c:	4a0a      	ldr	r2, [pc, #40]	@ (8006338 <HAL_RCC_ClockConfig+0x364>)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006312:	4b0a      	ldr	r3, [pc, #40]	@ (800633c <HAL_RCC_ClockConfig+0x368>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fb f884 	bl	8001424 <HAL_InitTick>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
 8006330:	0800a0c0 	.word	0x0800a0c0
 8006334:	2400000c 	.word	0x2400000c
 8006338:	24000008 	.word	0x24000008
 800633c:	24000010 	.word	0x24000010

08006340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	@ 0x24
 8006344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006346:	4bb3      	ldr	r3, [pc, #716]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800634e:	2b18      	cmp	r3, #24
 8006350:	f200 8155 	bhi.w	80065fe <HAL_RCC_GetSysClockFreq+0x2be>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080065ff 	.word	0x080065ff
 8006364:	080065ff 	.word	0x080065ff
 8006368:	080065ff 	.word	0x080065ff
 800636c:	080065ff 	.word	0x080065ff
 8006370:	080065ff 	.word	0x080065ff
 8006374:	080065ff 	.word	0x080065ff
 8006378:	080065ff 	.word	0x080065ff
 800637c:	080063e7 	.word	0x080063e7
 8006380:	080065ff 	.word	0x080065ff
 8006384:	080065ff 	.word	0x080065ff
 8006388:	080065ff 	.word	0x080065ff
 800638c:	080065ff 	.word	0x080065ff
 8006390:	080065ff 	.word	0x080065ff
 8006394:	080065ff 	.word	0x080065ff
 8006398:	080065ff 	.word	0x080065ff
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080065ff 	.word	0x080065ff
 80063a4:	080065ff 	.word	0x080065ff
 80063a8:	080065ff 	.word	0x080065ff
 80063ac:	080065ff 	.word	0x080065ff
 80063b0:	080065ff 	.word	0x080065ff
 80063b4:	080065ff 	.word	0x080065ff
 80063b8:	080065ff 	.word	0x080065ff
 80063bc:	080063f3 	.word	0x080063f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c0:	4b94      	ldr	r3, [pc, #592]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063cc:	4b91      	ldr	r3, [pc, #580]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	08db      	lsrs	r3, r3, #3
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	4a90      	ldr	r2, [pc, #576]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
 80063dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063de:	e111      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063e2:	61bb      	str	r3, [r7, #24]
      break;
 80063e4:	e10e      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063e6:	4b8d      	ldr	r3, [pc, #564]	@ (800661c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063e8:	61bb      	str	r3, [r7, #24]
      break;
 80063ea:	e10b      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063ec:	4b8c      	ldr	r3, [pc, #560]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063ee:	61bb      	str	r3, [r7, #24]
      break;
 80063f0:	e108      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f2:	4b88      	ldr	r3, [pc, #544]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063fc:	4b85      	ldr	r3, [pc, #532]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006406:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006408:	4b82      	ldr	r3, [pc, #520]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006412:	4b80      	ldr	r3, [pc, #512]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006416:	08db      	lsrs	r3, r3, #3
 8006418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80e1 	beq.w	80065f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b02      	cmp	r3, #2
 800643a:	f000 8083 	beq.w	8006544 <HAL_RCC_GetSysClockFreq+0x204>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b02      	cmp	r3, #2
 8006442:	f200 80a1 	bhi.w	8006588 <HAL_RCC_GetSysClockFreq+0x248>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0x114>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d056      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006452:	e099      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006454:	4b6f      	ldr	r3, [pc, #444]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02d      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006460:	4b6c      	ldr	r3, [pc, #432]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	08db      	lsrs	r3, r3, #3
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	4a6b      	ldr	r2, [pc, #428]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
 8006470:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648a:	4b62      	ldr	r3, [pc, #392]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649a:	ed97 6a02 	vldr	s12, [r7, #8]
 800649e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064ba:	e087      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80064ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ce:	4b51      	ldr	r3, [pc, #324]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064de:	ed97 6a02 	vldr	s12, [r7, #8]
 80064e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064fe:	e065      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800662c <HAL_RCC_GetSysClockFreq+0x2ec>
 800650e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006512:	4b40      	ldr	r3, [pc, #256]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a02 	vldr	s12, [r7, #8]
 8006526:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006542:	e043      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006556:	4b2f      	ldr	r3, [pc, #188]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006566:	ed97 6a02 	vldr	s12, [r7, #8]
 800656a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800656e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800657a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006586:	e021      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800662c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659a:	4b1e      	ldr	r3, [pc, #120]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065cc:	4b11      	ldr	r3, [pc, #68]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	0a5b      	lsrs	r3, r3, #9
 80065d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065d6:	3301      	adds	r3, #1
 80065d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f0:	ee17 3a90 	vmov	r3, s15
 80065f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80065f6:	e005      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
      break;
 80065fc:	e002      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80065fe:	4b07      	ldr	r3, [pc, #28]	@ (800661c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006600:	61bb      	str	r3, [r7, #24]
      break;
 8006602:	bf00      	nop
  }

  return sysclockfreq;
 8006604:	69bb      	ldr	r3, [r7, #24]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3724      	adds	r7, #36	@ 0x24
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
 8006618:	03d09000 	.word	0x03d09000
 800661c:	003d0900 	.word	0x003d0900
 8006620:	017d7840 	.word	0x017d7840
 8006624:	46000000 	.word	0x46000000
 8006628:	4c742400 	.word	0x4c742400
 800662c:	4a742400 	.word	0x4a742400
 8006630:	4bbebc20 	.word	0x4bbebc20

08006634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800663a:	f7ff fe81 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 800663e:	4602      	mov	r2, r0
 8006640:	4b10      	ldr	r3, [pc, #64]	@ (8006684 <HAL_RCC_GetHCLKFreq+0x50>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	0a1b      	lsrs	r3, r3, #8
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	490f      	ldr	r1, [pc, #60]	@ (8006688 <HAL_RCC_GetHCLKFreq+0x54>)
 800664c:	5ccb      	ldrb	r3, [r1, r3]
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	fa22 f303 	lsr.w	r3, r2, r3
 8006656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006658:	4b0a      	ldr	r3, [pc, #40]	@ (8006684 <HAL_RCC_GetHCLKFreq+0x50>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	4a09      	ldr	r2, [pc, #36]	@ (8006688 <HAL_RCC_GetHCLKFreq+0x54>)
 8006662:	5cd3      	ldrb	r3, [r2, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a07      	ldr	r2, [pc, #28]	@ (800668c <HAL_RCC_GetHCLKFreq+0x58>)
 8006670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006672:	4a07      	ldr	r2, [pc, #28]	@ (8006690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006678:	4b04      	ldr	r3, [pc, #16]	@ (800668c <HAL_RCC_GetHCLKFreq+0x58>)
 800667a:	681b      	ldr	r3, [r3, #0]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	58024400 	.word	0x58024400
 8006688:	0800a0c0 	.word	0x0800a0c0
 800668c:	2400000c 	.word	0x2400000c
 8006690:	24000008 	.word	0x24000008

08006694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006698:	f7ff ffcc 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 800669c:	4602      	mov	r2, r0
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4904      	ldr	r1, [pc, #16]	@ (80066bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80066aa:	5ccb      	ldrb	r3, [r1, r3]
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58024400 	.word	0x58024400
 80066bc:	0800a0c0 	.word	0x0800a0c0

080066c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066c4:	f7ff ffb6 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4904      	ldr	r1, [pc, #16]	@ (80066e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	58024400 	.word	0x58024400
 80066e8:	0800a0c0 	.word	0x0800a0c0

080066ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f0:	b0ca      	sub	sp, #296	@ 0x128
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006710:	2500      	movs	r5, #0
 8006712:	ea54 0305 	orrs.w	r3, r4, r5
 8006716:	d049      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800671e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006722:	d02f      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006724:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006728:	d828      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800672a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800672e:	d01a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006734:	d822      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800673a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800673e:	d007      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006740:	e01c      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006742:	4bb8      	ldr	r3, [pc, #736]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	4ab7      	ldr	r2, [pc, #732]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800674c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800674e:	e01a      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006754:	3308      	adds	r3, #8
 8006756:	2102      	movs	r1, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f001 fc8f 	bl	800807c <RCCEx_PLL2_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006764:	e00f      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	3328      	adds	r3, #40	@ 0x28
 800676c:	2102      	movs	r1, #2
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fd36 	bl	80081e0 <RCCEx_PLL3_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800677a:	e004      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006782:	e000      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800678e:	4ba5      	ldr	r3, [pc, #660]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006792:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800679c:	4aa1      	ldr	r2, [pc, #644]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800679e:	430b      	orrs	r3, r1
 80067a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80067a2:	e003      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80067b8:	f04f 0900 	mov.w	r9, #0
 80067bc:	ea58 0309 	orrs.w	r3, r8, r9
 80067c0:	d047      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d82a      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067cc:	a201      	add	r2, pc, #4	@ (adr r2, 80067d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067f7 	.word	0x080067f7
 80067dc:	0800680d 	.word	0x0800680d
 80067e0:	0800682b 	.word	0x0800682b
 80067e4:	0800682b 	.word	0x0800682b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	4a8d      	ldr	r2, [pc, #564]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f4:	e01a      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	3308      	adds	r3, #8
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fc3c 	bl	800807c <RCCEx_PLL2_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800680a:	e00f      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006810:	3328      	adds	r3, #40	@ 0x28
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f001 fce3 	bl	80081e0 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006820:	e004      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800682a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006834:	4b7b      	ldr	r3, [pc, #492]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006838:	f023 0107 	bic.w	r1, r3, #7
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006842:	4a78      	ldr	r2, [pc, #480]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006844:	430b      	orrs	r3, r1
 8006846:	6513      	str	r3, [r2, #80]	@ 0x50
 8006848:	e003      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800685e:	f04f 0b00 	mov.w	fp, #0
 8006862:	ea5a 030b 	orrs.w	r3, sl, fp
 8006866:	d04c      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d030      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006878:	d829      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800687a:	2bc0      	cmp	r3, #192	@ 0xc0
 800687c:	d02d      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800687e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006880:	d825      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006882:	2b80      	cmp	r3, #128	@ 0x80
 8006884:	d018      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006886:	2b80      	cmp	r3, #128	@ 0x80
 8006888:	d821      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800688e:	2b40      	cmp	r3, #64	@ 0x40
 8006890:	d007      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006892:	e01c      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006894:	4b63      	ldr	r3, [pc, #396]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a62      	ldr	r2, [pc, #392]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800689a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068a0:	e01c      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	3308      	adds	r3, #8
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 fbe6 	bl	800807c <RCCEx_PLL2_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068b6:	e011      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	3328      	adds	r3, #40	@ 0x28
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 fc8d 	bl	80081e0 <RCCEx_PLL3_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068cc:	e006      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068d4:	e002      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f2:	4a4c      	ldr	r2, [pc, #304]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80068f8:	e003      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800690e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006912:	2300      	movs	r3, #0
 8006914:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006918:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800691c:	460b      	mov	r3, r1
 800691e:	4313      	orrs	r3, r2
 8006920:	d053      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800692a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800692e:	d035      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006930:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006934:	d82e      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006936:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800693a:	d031      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800693c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006940:	d828      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006946:	d01a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800694c:	d822      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006956:	d007      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006958:	e01c      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800695a:	4b32      	ldr	r3, [pc, #200]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	4a31      	ldr	r2, [pc, #196]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006966:	e01c      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696c:	3308      	adds	r3, #8
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f001 fb83 	bl	800807c <RCCEx_PLL2_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800697c:	e011      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	3328      	adds	r3, #40	@ 0x28
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fc2a 	bl	80081e0 <RCCEx_PLL3_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006992:	e006      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800699a:	e002      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c0:	e003      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80069d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069da:	2300      	movs	r3, #0
 80069dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80069e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80069e4:	460b      	mov	r3, r1
 80069e6:	4313      	orrs	r3, r2
 80069e8:	d056      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069f6:	d038      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80069f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069fc:	d831      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a02:	d034      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a08:	d82b      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a0e:	d01d      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a14:	d825      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d006      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a20:	e01f      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a22:	bf00      	nop
 8006a24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a28:	4ba2      	ldr	r3, [pc, #648]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2c:	4aa1      	ldr	r2, [pc, #644]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a34:	e01c      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fb1c 	bl	800807c <RCCEx_PLL2_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a4a:	e011      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a50:	3328      	adds	r3, #40	@ 0x28
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 fbc3 	bl	80081e0 <RCCEx_PLL3_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a60:	e006      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a68:	e002      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a6a:	bf00      	nop
 8006a6c:	e000      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a78:	4b8e      	ldr	r3, [pc, #568]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a88:	4a8a      	ldr	r2, [pc, #552]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a8e:	e003      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006aae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	d03a      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006abe:	2b30      	cmp	r3, #48	@ 0x30
 8006ac0:	d01f      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006ac2:	2b30      	cmp	r3, #48	@ 0x30
 8006ac4:	d819      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d815      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d019      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d111      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad6:	4b77      	ldr	r3, [pc, #476]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	4a76      	ldr	r2, [pc, #472]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ae2:	e011      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	3308      	adds	r3, #8
 8006aea:	2102      	movs	r1, #2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fac5 	bl	800807c <RCCEx_PLL2_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006af8:	e006      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b00:	e002      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b10:	4b68      	ldr	r3, [pc, #416]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b1e:	4a65      	ldr	r2, [pc, #404]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b20:	430b      	orrs	r3, r1
 8006b22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b24:	e003      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	d051      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b58:	d035      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b5e:	d82e      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b64:	d031      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b6a:	d828      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b70:	d01a      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b76:	d822      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b80:	d007      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006b82:	e01c      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b84:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b90:	e01c      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	3308      	adds	r3, #8
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 fa6e 	bl	800807c <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ba6:	e011      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	3328      	adds	r3, #40	@ 0x28
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 fb15 	bl	80081e0 <RCCEx_PLL3_Config>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bbc:	e006      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bd4:	4b37      	ldr	r3, [pc, #220]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be2:	4a34      	ldr	r2, [pc, #208]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006be4:	430b      	orrs	r3, r1
 8006be6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006be8:	e003      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	d056      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c1c:	d033      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c22:	d82c      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c28:	d02f      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c2e:	d826      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c34:	d02b      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c3a:	d820      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c40:	d012      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c46:	d81a      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d022      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c50:	d115      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	3308      	adds	r3, #8
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fa0e 	bl	800807c <RCCEx_PLL2_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c66:	e015      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6c:	3328      	adds	r3, #40	@ 0x28
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fab5 	bl	80081e0 <RCCEx_PLL3_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c7c:	e00a      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c84:	e006      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c86:	bf00      	nop
 8006c88:	e004      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c8a:	bf00      	nop
 8006c8c:	e002      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10d      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c9c:	4b05      	ldr	r3, [pc, #20]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006caa:	4a02      	ldr	r2, [pc, #8]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cb0:	e006      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cb2:	bf00      	nop
 8006cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d055      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cec:	d033      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cf2:	d82c      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf8:	d02f      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfe:	d826      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d04:	d02b      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d0a:	d820      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d10:	d012      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d16:	d81a      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d20:	d115      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	3308      	adds	r3, #8
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f9a6 	bl	800807c <RCCEx_PLL2_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d36:	e015      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	3328      	adds	r3, #40	@ 0x28
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fa4d 	bl	80081e0 <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d4c:	e00a      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d54:	e006      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d56:	bf00      	nop
 8006d58:	e004      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d5a:	bf00      	nop
 8006d5c:	e002      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e000      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d6c:	4ba3      	ldr	r3, [pc, #652]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d70:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d7c:	4a9f      	ldr	r2, [pc, #636]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d82:	e003      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006da6:	460b      	mov	r3, r1
 8006da8:	4313      	orrs	r3, r2
 8006daa:	d037      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006db6:	d00e      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dbc:	d816      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d018      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dc6:	d111      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	4a8b      	ldr	r2, [pc, #556]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006dd4:	e00f      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dda:	3308      	adds	r3, #8
 8006ddc:	2101      	movs	r1, #1
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f94c 	bl	800807c <RCCEx_PLL2_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006dea:	e004      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006df2:	e000      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d039      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d81c      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e46:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e89 	.word	0x08006e89
 8006e50:	08006e5d 	.word	0x08006e5d
 8006e54:	08006e6b 	.word	0x08006e6b
 8006e58:	08006e89 	.word	0x08006e89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e5c:	4b67      	ldr	r3, [pc, #412]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	4a66      	ldr	r2, [pc, #408]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e68:	e00f      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	3308      	adds	r3, #8
 8006e70:	2102      	movs	r1, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f902 	bl	800807c <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e7e:	e004      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e92:	4b5a      	ldr	r3, [pc, #360]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e96:	f023 0103 	bic.w	r1, r3, #3
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ea0:	4a56      	ldr	r2, [pc, #344]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ec6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f000 809f 	beq.w	8007010 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ede:	f7fa faeb 	bl	80014b8 <HAL_GetTick>
 8006ee2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee6:	e00b      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee8:	f7fa fae6 	bl	80014b8 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b64      	cmp	r3, #100	@ 0x64
 8006ef6:	d903      	bls.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006efe:	e005      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f00:	4b3f      	ldr	r3, [pc, #252]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0ed      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d179      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f14:	4b39      	ldr	r3, [pc, #228]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f20:	4053      	eors	r3, r2
 8006f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d015      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f2a:	4b34      	ldr	r3, [pc, #208]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f36:	4b31      	ldr	r3, [pc, #196]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3a:	4a30      	ldr	r2, [pc, #192]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f42:	4b2e      	ldr	r3, [pc, #184]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f46:	4a2d      	ldr	r2, [pc, #180]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f62:	d118      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f64:	f7fa faa8 	bl	80014b8 <HAL_GetTick>
 8006f68:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f6c:	e00d      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f6e:	f7fa faa3 	bl	80014b8 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d903      	bls.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006f88:	e005      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0eb      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d129      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fae:	d10e      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006fb0:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fc0:	091a      	lsrs	r2, r3, #4
 8006fc2:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6113      	str	r3, [r2, #16]
 8006fcc:	e005      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006fd8:	6113      	str	r3, [r2, #16]
 8006fda:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fea:	4a04      	ldr	r2, [pc, #16]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ff0:	e00e      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ffa:	e009      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006ffc:	58024400 	.word	0x58024400
 8007000:	58024800 	.word	0x58024800
 8007004:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f002 0301 	and.w	r3, r2, #1
 800701c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007020:	2300      	movs	r3, #0
 8007022:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007026:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800702a:	460b      	mov	r3, r1
 800702c:	4313      	orrs	r3, r2
 800702e:	f000 8089 	beq.w	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007038:	2b28      	cmp	r3, #40	@ 0x28
 800703a:	d86b      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800703c:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	0800711d 	.word	0x0800711d
 8007048:	08007115 	.word	0x08007115
 800704c:	08007115 	.word	0x08007115
 8007050:	08007115 	.word	0x08007115
 8007054:	08007115 	.word	0x08007115
 8007058:	08007115 	.word	0x08007115
 800705c:	08007115 	.word	0x08007115
 8007060:	08007115 	.word	0x08007115
 8007064:	080070e9 	.word	0x080070e9
 8007068:	08007115 	.word	0x08007115
 800706c:	08007115 	.word	0x08007115
 8007070:	08007115 	.word	0x08007115
 8007074:	08007115 	.word	0x08007115
 8007078:	08007115 	.word	0x08007115
 800707c:	08007115 	.word	0x08007115
 8007080:	08007115 	.word	0x08007115
 8007084:	080070ff 	.word	0x080070ff
 8007088:	08007115 	.word	0x08007115
 800708c:	08007115 	.word	0x08007115
 8007090:	08007115 	.word	0x08007115
 8007094:	08007115 	.word	0x08007115
 8007098:	08007115 	.word	0x08007115
 800709c:	08007115 	.word	0x08007115
 80070a0:	08007115 	.word	0x08007115
 80070a4:	0800711d 	.word	0x0800711d
 80070a8:	08007115 	.word	0x08007115
 80070ac:	08007115 	.word	0x08007115
 80070b0:	08007115 	.word	0x08007115
 80070b4:	08007115 	.word	0x08007115
 80070b8:	08007115 	.word	0x08007115
 80070bc:	08007115 	.word	0x08007115
 80070c0:	08007115 	.word	0x08007115
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	08007115 	.word	0x08007115
 80070cc:	08007115 	.word	0x08007115
 80070d0:	08007115 	.word	0x08007115
 80070d4:	08007115 	.word	0x08007115
 80070d8:	08007115 	.word	0x08007115
 80070dc:	08007115 	.word	0x08007115
 80070e0:	08007115 	.word	0x08007115
 80070e4:	0800711d 	.word	0x0800711d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	3308      	adds	r3, #8
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 ffc3 	bl	800807c <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070fc:	e00f      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	3328      	adds	r3, #40	@ 0x28
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f001 f86a 	bl	80081e0 <RCCEx_PLL3_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007112:	e004      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800711c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007126:	4bbf      	ldr	r3, [pc, #764]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007134:	4abb      	ldr	r2, [pc, #748]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6553      	str	r3, [r2, #84]	@ 0x54
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f002 0302 	and.w	r3, r2, #2
 8007150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007154:	2300      	movs	r3, #0
 8007156:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800715a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d041      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800716a:	2b05      	cmp	r3, #5
 800716c:	d824      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	080071c1 	.word	0x080071c1
 8007178:	0800718d 	.word	0x0800718d
 800717c:	080071a3 	.word	0x080071a3
 8007180:	080071c1 	.word	0x080071c1
 8007184:	080071c1 	.word	0x080071c1
 8007188:	080071c1 	.word	0x080071c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	3308      	adds	r3, #8
 8007192:	2101      	movs	r1, #1
 8007194:	4618      	mov	r0, r3
 8007196:	f000 ff71 	bl	800807c <RCCEx_PLL2_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071a0:	e00f      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	3328      	adds	r3, #40	@ 0x28
 80071a8:	2101      	movs	r1, #1
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 f818 	bl	80081e0 <RCCEx_PLL3_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071ca:	4b96      	ldr	r3, [pc, #600]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ce:	f023 0107 	bic.w	r1, r3, #7
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071d8:	4a92      	ldr	r2, [pc, #584]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071da:	430b      	orrs	r3, r1
 80071dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80071de:	e003      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f002 0304 	and.w	r3, r2, #4
 80071f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071f8:	2300      	movs	r3, #0
 80071fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007202:	460b      	mov	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	d044      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007210:	2b05      	cmp	r3, #5
 8007212:	d825      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007214:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007269 	.word	0x08007269
 8007220:	08007235 	.word	0x08007235
 8007224:	0800724b 	.word	0x0800724b
 8007228:	08007269 	.word	0x08007269
 800722c:	08007269 	.word	0x08007269
 8007230:	08007269 	.word	0x08007269
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	3308      	adds	r3, #8
 800723a:	2101      	movs	r1, #1
 800723c:	4618      	mov	r0, r3
 800723e:	f000 ff1d 	bl	800807c <RCCEx_PLL2_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007248:	e00f      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	3328      	adds	r3, #40	@ 0x28
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f000 ffc4 	bl	80081e0 <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800725e:	e004      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007266:	e000      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007272:	4b6c      	ldr	r3, [pc, #432]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007276:	f023 0107 	bic.w	r1, r3, #7
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007282:	4a68      	ldr	r2, [pc, #416]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007284:	430b      	orrs	r3, r1
 8007286:	6593      	str	r3, [r2, #88]	@ 0x58
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800728e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f002 0320 	and.w	r3, r2, #32
 800729e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072a2:	2300      	movs	r3, #0
 80072a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072ac:	460b      	mov	r3, r1
 80072ae:	4313      	orrs	r3, r2
 80072b0:	d055      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072be:	d033      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80072c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072c4:	d82c      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ca:	d02f      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d0:	d826      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072d6:	d02b      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80072d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072dc:	d820      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e2:	d012      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e8:	d81a      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d022      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80072ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f2:	d115      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	3308      	adds	r3, #8
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 febd 	bl	800807c <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007308:	e015      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	3328      	adds	r3, #40	@ 0x28
 8007310:	2102      	movs	r1, #2
 8007312:	4618      	mov	r0, r3
 8007314:	f000 ff64 	bl	80081e0 <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800731e:	e00a      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007326:	e006      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800733e:	4b39      	ldr	r3, [pc, #228]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007342:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734e:	4a35      	ldr	r2, [pc, #212]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007350:	430b      	orrs	r3, r1
 8007352:	6553      	str	r3, [r2, #84]	@ 0x54
 8007354:	e003      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800736a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800736e:	2300      	movs	r3, #0
 8007370:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007374:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007378:	460b      	mov	r3, r1
 800737a:	4313      	orrs	r3, r2
 800737c:	d058      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007386:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800738a:	d033      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800738c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007390:	d82c      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007396:	d02f      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739c:	d826      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800739e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073a2:	d02b      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80073a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073a8:	d820      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ae:	d012      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80073b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073b4:	d81a      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d022      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073be:	d115      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c4:	3308      	adds	r3, #8
 80073c6:	2100      	movs	r1, #0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fe57 	bl	800807c <RCCEx_PLL2_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073d4:	e015      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	3328      	adds	r3, #40	@ 0x28
 80073dc:	2102      	movs	r1, #2
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fefe 	bl	80081e0 <RCCEx_PLL3_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073ea:	e00a      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f2:	e006      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073f4:	bf00      	nop
 80073f6:	e004      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073f8:	bf00      	nop
 80073fa:	e002      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073fc:	bf00      	nop
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10e      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800740a:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800740c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800740e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800741a:	4a02      	ldr	r2, [pc, #8]	@ (8007424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741c:	430b      	orrs	r3, r1
 800741e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007420:	e006      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007422:	bf00      	nop
 8007424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800743c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007446:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d055      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007458:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800745c:	d033      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800745e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007462:	d82c      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007468:	d02f      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800746a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746e:	d826      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007470:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007474:	d02b      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007476:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800747a:	d820      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800747c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007480:	d012      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007486:	d81a      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d022      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007490:	d115      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007496:	3308      	adds	r3, #8
 8007498:	2100      	movs	r1, #0
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fdee 	bl	800807c <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074a6:	e015      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	3328      	adds	r3, #40	@ 0x28
 80074ae:	2102      	movs	r1, #2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fe95 	bl	80081e0 <RCCEx_PLL3_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074bc:	e00a      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074c6:	bf00      	nop
 80074c8:	e004      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10b      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074ec:	4a9d      	ldr	r2, [pc, #628]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074ee:	430b      	orrs	r3, r1
 80074f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80074f2:	e003      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f002 0308 	and.w	r3, r2, #8
 8007508:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800750c:	2300      	movs	r3, #0
 800750e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007512:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007516:	460b      	mov	r3, r1
 8007518:	4313      	orrs	r3, r2
 800751a:	d01e      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007528:	d10c      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	3328      	adds	r3, #40	@ 0x28
 8007530:	2102      	movs	r1, #2
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fe54 	bl	80081e0 <RCCEx_PLL3_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007544:	4b87      	ldr	r3, [pc, #540]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007548:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007554:	4a83      	ldr	r2, [pc, #524]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007556:	430b      	orrs	r3, r1
 8007558:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f002 0310 	and.w	r3, r2, #16
 8007566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800756a:	2300      	movs	r3, #0
 800756c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007570:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007574:	460b      	mov	r3, r1
 8007576:	4313      	orrs	r3, r2
 8007578:	d01e      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007586:	d10c      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	3328      	adds	r3, #40	@ 0x28
 800758e:	2102      	movs	r1, #2
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fe25 	bl	80081e0 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075a2:	4b70      	ldr	r3, [pc, #448]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075b2:	4a6c      	ldr	r2, [pc, #432]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80075c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075c8:	2300      	movs	r3, #0
 80075ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075d2:	460b      	mov	r3, r1
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d03e      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e4:	d022      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80075e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ea:	d81b      	bhi.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80075f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f4:	d00b      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80075f6:	e015      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fc:	3308      	adds	r3, #8
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fd3b 	bl	800807c <RCCEx_PLL2_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800760c:	e00f      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	3328      	adds	r3, #40	@ 0x28
 8007614:	2102      	movs	r1, #2
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fde2 	bl	80081e0 <RCCEx_PLL3_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007622:	e004      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800762a:	e000      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800762c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10b      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007636:	4b4b      	ldr	r3, [pc, #300]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007646:	4a47      	ldr	r2, [pc, #284]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007648:	430b      	orrs	r3, r1
 800764a:	6593      	str	r3, [r2, #88]	@ 0x58
 800764c:	e003      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007662:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007664:	2300      	movs	r3, #0
 8007666:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007668:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800766c:	460b      	mov	r3, r1
 800766e:	4313      	orrs	r3, r2
 8007670:	d03b      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800767e:	d01f      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007680:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007684:	d818      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800768a:	d003      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800768c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007690:	d007      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007692:	e011      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007694:	4b33      	ldr	r3, [pc, #204]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	4a32      	ldr	r2, [pc, #200]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800769a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800769e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076a0:	e00f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a6:	3328      	adds	r3, #40	@ 0x28
 80076a8:	2101      	movs	r1, #1
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fd98 	bl	80081e0 <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076ca:	4b26      	ldr	r3, [pc, #152]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076da:	4a22      	ldr	r2, [pc, #136]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6553      	str	r3, [r2, #84]	@ 0x54
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80076f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80076f8:	2300      	movs	r3, #0
 80076fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80076fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007700:	460b      	mov	r3, r1
 8007702:	4313      	orrs	r3, r2
 8007704:	d034      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007714:	d007      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007716:	e011      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007718:	4b12      	ldr	r3, [pc, #72]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771c:	4a11      	ldr	r2, [pc, #68]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800771e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007724:	e00e      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	3308      	adds	r3, #8
 800772c:	2102      	movs	r1, #2
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fca4 	bl	800807c <RCCEx_PLL2_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800773a:	e003      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800774e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007750:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775a:	4a02      	ldr	r2, [pc, #8]	@ (8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775c:	430b      	orrs	r3, r1
 800775e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007760:	e006      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007762:	bf00      	nop
 8007764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800777c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800777e:	2300      	movs	r3, #0
 8007780:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007782:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d00c      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	3328      	adds	r3, #40	@ 0x28
 8007792:	2102      	movs	r1, #2
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fd23 	bl	80081e0 <RCCEx_PLL3_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80077b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80077b4:	2300      	movs	r3, #0
 80077b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077bc:	460b      	mov	r3, r1
 80077be:	4313      	orrs	r3, r2
 80077c0:	d038      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ce:	d018      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80077d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d4:	d811      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077da:	d014      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80077dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e0:	d80b      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d011      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ea:	d106      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ec:	4bc3      	ldr	r3, [pc, #780]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	4ac2      	ldr	r2, [pc, #776]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80077f8:	e008      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007800:	e004      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007802:	bf00      	nop
 8007804:	e002      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007806:	bf00      	nop
 8007808:	e000      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800780a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007814:	4bb9      	ldr	r3, [pc, #740]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007818:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007824:	4ab5      	ldr	r2, [pc, #724]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007826:	430b      	orrs	r3, r1
 8007828:	6553      	str	r3, [r2, #84]	@ 0x54
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007840:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007842:	2300      	movs	r3, #0
 8007844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007846:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007850:	4baa      	ldr	r3, [pc, #680]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007854:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785e:	4aa7      	ldr	r2, [pc, #668]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007860:	430b      	orrs	r3, r1
 8007862:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007870:	653b      	str	r3, [r7, #80]	@ 0x50
 8007872:	2300      	movs	r3, #0
 8007874:	657b      	str	r3, [r7, #84]	@ 0x54
 8007876:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d00a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007880:	4b9e      	ldr	r3, [pc, #632]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007890:	4a9a      	ldr	r2, [pc, #616]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007892:	430b      	orrs	r3, r1
 8007894:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a4:	2300      	movs	r3, #0
 80078a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d009      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078b2:	4b92      	ldr	r3, [pc, #584]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c0:	4a8e      	ldr	r2, [pc, #568]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c2:	430b      	orrs	r3, r1
 80078c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80078d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d4:	2300      	movs	r3, #0
 80078d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80078dc:	460b      	mov	r3, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	d00e      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078e2:	4b86      	ldr	r3, [pc, #536]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	4a85      	ldr	r2, [pc, #532]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078ec:	6113      	str	r3, [r2, #16]
 80078ee:	4b83      	ldr	r3, [pc, #524]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f0:	6919      	ldr	r1, [r3, #16]
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80078fa:	4a80      	ldr	r2, [pc, #512]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800790c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800790e:	2300      	movs	r3, #0
 8007910:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007912:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	d009      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800791c:	4b77      	ldr	r3, [pc, #476]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800791e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007920:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	4a74      	ldr	r2, [pc, #464]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792c:	430b      	orrs	r3, r1
 800792e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800793c:	633b      	str	r3, [r7, #48]	@ 0x30
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	@ 0x34
 8007942:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007946:	460b      	mov	r3, r1
 8007948:	4313      	orrs	r3, r2
 800794a:	d00a      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800794c:	4b6b      	ldr	r3, [pc, #428]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800794e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007950:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800795c:	4a67      	ldr	r2, [pc, #412]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795e:	430b      	orrs	r3, r1
 8007960:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	2100      	movs	r1, #0
 800796c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007974:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007978:	460b      	mov	r3, r1
 800797a:	4313      	orrs	r3, r2
 800797c:	d011      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	3308      	adds	r3, #8
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fb78 	bl	800807c <RCCEx_PLL2_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800799e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	2100      	movs	r1, #0
 80079ac:	6239      	str	r1, [r7, #32]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d011      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fb58 	bl	800807c <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	2100      	movs	r1, #0
 80079ec:	61b9      	str	r1, [r7, #24]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80079f8:	460b      	mov	r3, r1
 80079fa:	4313      	orrs	r3, r2
 80079fc:	d011      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a02:	3308      	adds	r3, #8
 8007a04:	2102      	movs	r1, #2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fb38 	bl	800807c <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6139      	str	r1, [r7, #16]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d011      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	3328      	adds	r3, #40	@ 0x28
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fbca 	bl	80081e0 <RCCEx_PLL3_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	d011      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a82:	3328      	adds	r3, #40	@ 0x28
 8007a84:	2101      	movs	r1, #1
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fbaa 	bl	80081e0 <RCCEx_PLL3_Config>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	607b      	str	r3, [r7, #4]
 8007ab4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d011      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac2:	3328      	adds	r3, #40	@ 0x28
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fb8a 	bl	80081e0 <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007ae2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e000      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007af6:	46bd      	mov	sp, r7
 8007af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afc:	58024400 	.word	0x58024400

08007b00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b04:	f7fe fd96 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	091b      	lsrs	r3, r3, #4
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	4904      	ldr	r1, [pc, #16]	@ (8007b28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b16:	5ccb      	ldrb	r3, [r1, r3]
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	58024400 	.word	0x58024400
 8007b28:	0800a0c0 	.word	0x0800a0c0

08007b2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	@ 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b34:	4ba1      	ldr	r3, [pc, #644]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b3e:	4b9f      	ldr	r3, [pc, #636]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b42:	0b1b      	lsrs	r3, r3, #12
 8007b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b4a:	4b9c      	ldr	r3, [pc, #624]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	091b      	lsrs	r3, r3, #4
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007b56:	4b99      	ldr	r3, [pc, #612]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5a:	08db      	lsrs	r3, r3, #3
 8007b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8111 	beq.w	8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f000 8083 	beq.w	8007c88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	f200 80a1 	bhi.w	8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d056      	beq.n	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b96:	e099      	b.n	8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b98:	4b88      	ldr	r3, [pc, #544]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d02d      	beq.n	8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba4:	4b85      	ldr	r3, [pc, #532]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	08db      	lsrs	r3, r3, #3
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	4a84      	ldr	r2, [pc, #528]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bce:	4b7b      	ldr	r3, [pc, #492]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bfe:	e087      	b.n	8007d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c12:	4b6a      	ldr	r3, [pc, #424]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c42:	e065      	b.n	8007d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c56:	4b59      	ldr	r3, [pc, #356]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c86:	e043      	b.n	8007d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9a:	4b48      	ldr	r3, [pc, #288]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cca:	e021      	b.n	8007d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cde:	4b37      	ldr	r3, [pc, #220]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d10:	4b2a      	ldr	r3, [pc, #168]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d14:	0a5b      	lsrs	r3, r3, #9
 8007d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d36:	ee17 2a90 	vmov	r2, s15
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d48:	ee07 3a90 	vmov	s15, r3
 8007d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d64:	ee17 2a90 	vmov	r2, s15
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d6c:	4b13      	ldr	r3, [pc, #76]	@ (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	0e1b      	lsrs	r3, r3, #24
 8007d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d92:	ee17 2a90 	vmov	r2, s15
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d9a:	e008      	b.n	8007dae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	609a      	str	r2, [r3, #8]
}
 8007dae:	bf00      	nop
 8007db0:	3724      	adds	r7, #36	@ 0x24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	03d09000 	.word	0x03d09000
 8007dc4:	46000000 	.word	0x46000000
 8007dc8:	4c742400 	.word	0x4c742400
 8007dcc:	4a742400 	.word	0x4a742400
 8007dd0:	4bbebc20 	.word	0x4bbebc20

08007dd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b089      	sub	sp, #36	@ 0x24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ddc:	4ba1      	ldr	r3, [pc, #644]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007de6:	4b9f      	ldr	r3, [pc, #636]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dea:	0d1b      	lsrs	r3, r3, #20
 8007dec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007df0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007df2:	4b9c      	ldr	r3, [pc, #624]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007dfe:	4b99      	ldr	r3, [pc, #612]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e02:	08db      	lsrs	r3, r3, #3
 8007e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8111 	beq.w	8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	f000 8083 	beq.w	8007f30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	f200 80a1 	bhi.w	8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d056      	beq.n	8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e3e:	e099      	b.n	8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e40:	4b88      	ldr	r3, [pc, #544]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d02d      	beq.n	8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e4c:	4b85      	ldr	r3, [pc, #532]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	08db      	lsrs	r3, r3, #3
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	4a84      	ldr	r2, [pc, #528]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	ee07 3a90 	vmov	s15, r3
 8007e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e76:	4b7b      	ldr	r3, [pc, #492]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ea6:	e087      	b.n	8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eba:	4b6a      	ldr	r3, [pc, #424]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ece:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eea:	e065      	b.n	8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efe:	4b59      	ldr	r3, [pc, #356]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f2e:	e043      	b.n	8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f42:	4b48      	ldr	r3, [pc, #288]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f72:	e021      	b.n	8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	4b37      	ldr	r3, [pc, #220]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	0a5b      	lsrs	r3, r3, #9
 8007fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fde:	ee17 2a90 	vmov	r2, s15
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	0c1b      	lsrs	r3, r3, #16
 8007fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ff0:	ee07 3a90 	vmov	s15, r3
 8007ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008000:	edd7 6a07 	vldr	s13, [r7, #28]
 8008004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800c:	ee17 2a90 	vmov	r2, s15
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008014:	4b13      	ldr	r3, [pc, #76]	@ (8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008018:	0e1b      	lsrs	r3, r3, #24
 800801a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008026:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800802a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800802e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800803a:	ee17 2a90 	vmov	r2, s15
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008042:	e008      	b.n	8008056 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	609a      	str	r2, [r3, #8]
}
 8008056:	bf00      	nop
 8008058:	3724      	adds	r7, #36	@ 0x24
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	58024400 	.word	0x58024400
 8008068:	03d09000 	.word	0x03d09000
 800806c:	46000000 	.word	0x46000000
 8008070:	4c742400 	.word	0x4c742400
 8008074:	4a742400 	.word	0x4a742400
 8008078:	4bbebc20 	.word	0x4bbebc20

0800807c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800808a:	4b53      	ldr	r3, [pc, #332]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800808c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b03      	cmp	r3, #3
 8008094:	d101      	bne.n	800809a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e099      	b.n	80081ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800809a:	4b4f      	ldr	r3, [pc, #316]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a4e      	ldr	r2, [pc, #312]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 80080a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a6:	f7f9 fa07 	bl	80014b8 <HAL_GetTick>
 80080aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080ac:	e008      	b.n	80080c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080ae:	f7f9 fa03 	bl	80014b8 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e086      	b.n	80081ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080c0:	4b45      	ldr	r3, [pc, #276]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1f0      	bne.n	80080ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080cc:	4b42      	ldr	r3, [pc, #264]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 80080ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	031b      	lsls	r3, r3, #12
 80080da:	493f      	ldr	r1, [pc, #252]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	628b      	str	r3, [r1, #40]	@ 0x28
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	025b      	lsls	r3, r3, #9
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	3b01      	subs	r3, #1
 800810a:	061b      	lsls	r3, r3, #24
 800810c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008110:	4931      	ldr	r1, [pc, #196]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008112:	4313      	orrs	r3, r2
 8008114:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008116:	4b30      	ldr	r3, [pc, #192]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	492d      	ldr	r1, [pc, #180]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008124:	4313      	orrs	r3, r2
 8008126:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008128:	4b2b      	ldr	r3, [pc, #172]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	f023 0220 	bic.w	r2, r3, #32
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	4928      	ldr	r1, [pc, #160]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008136:	4313      	orrs	r3, r2
 8008138:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800813a:	4b27      	ldr	r3, [pc, #156]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	4a26      	ldr	r2, [pc, #152]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008140:	f023 0310 	bic.w	r3, r3, #16
 8008144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008146:	4b24      	ldr	r3, [pc, #144]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800814a:	4b24      	ldr	r3, [pc, #144]	@ (80081dc <RCCEx_PLL2_Config+0x160>)
 800814c:	4013      	ands	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	69d2      	ldr	r2, [r2, #28]
 8008152:	00d2      	lsls	r2, r2, #3
 8008154:	4920      	ldr	r1, [pc, #128]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008156:	4313      	orrs	r3, r2
 8008158:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800815a:	4b1f      	ldr	r3, [pc, #124]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800815c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815e:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008160:	f043 0310 	orr.w	r3, r3, #16
 8008164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d106      	bne.n	800817a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800816c:	4b1a      	ldr	r3, [pc, #104]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800816e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008170:	4a19      	ldr	r2, [pc, #100]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008172:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008178:	e00f      	b.n	800819a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d106      	bne.n	800818e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008180:	4b15      	ldr	r3, [pc, #84]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008184:	4a14      	ldr	r2, [pc, #80]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800818a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800818c:	e005      	b.n	800819a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800818e:	4b12      	ldr	r3, [pc, #72]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	4a11      	ldr	r2, [pc, #68]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 8008194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800819a:	4b0f      	ldr	r3, [pc, #60]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a0e      	ldr	r2, [pc, #56]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a6:	f7f9 f987 	bl	80014b8 <HAL_GetTick>
 80081aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081ac:	e008      	b.n	80081c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081ae:	f7f9 f983 	bl	80014b8 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e006      	b.n	80081ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081c0:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <RCCEx_PLL2_Config+0x15c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f0      	beq.n	80081ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	58024400 	.word	0x58024400
 80081dc:	ffff0007 	.word	0xffff0007

080081e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081ee:	4b53      	ldr	r3, [pc, #332]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d101      	bne.n	80081fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e099      	b.n	8008332 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081fe:	4b4f      	ldr	r3, [pc, #316]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a4e      	ldr	r2, [pc, #312]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800820a:	f7f9 f955 	bl	80014b8 <HAL_GetTick>
 800820e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008210:	e008      	b.n	8008224 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008212:	f7f9 f951 	bl	80014b8 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e086      	b.n	8008332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008224:	4b45      	ldr	r3, [pc, #276]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f0      	bne.n	8008212 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008230:	4b42      	ldr	r3, [pc, #264]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008234:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	051b      	lsls	r3, r3, #20
 800823e:	493f      	ldr	r1, [pc, #252]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008240:	4313      	orrs	r3, r2
 8008242:	628b      	str	r3, [r1, #40]	@ 0x28
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	3b01      	subs	r3, #1
 800824a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	3b01      	subs	r3, #1
 8008254:	025b      	lsls	r3, r3, #9
 8008256:	b29b      	uxth	r3, r3
 8008258:	431a      	orrs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	3b01      	subs	r3, #1
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	3b01      	subs	r3, #1
 800826e:	061b      	lsls	r3, r3, #24
 8008270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008274:	4931      	ldr	r1, [pc, #196]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008276:	4313      	orrs	r3, r2
 8008278:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800827a:	4b30      	ldr	r3, [pc, #192]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 800827c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	492d      	ldr	r1, [pc, #180]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008288:	4313      	orrs	r3, r2
 800828a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800828c:	4b2b      	ldr	r3, [pc, #172]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 800828e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008290:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	4928      	ldr	r1, [pc, #160]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 800829a:	4313      	orrs	r3, r2
 800829c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800829e:	4b27      	ldr	r3, [pc, #156]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	4a26      	ldr	r2, [pc, #152]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082aa:	4b24      	ldr	r3, [pc, #144]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ae:	4b24      	ldr	r3, [pc, #144]	@ (8008340 <RCCEx_PLL3_Config+0x160>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	69d2      	ldr	r2, [r2, #28]
 80082b6:	00d2      	lsls	r2, r2, #3
 80082b8:	4920      	ldr	r1, [pc, #128]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082be:	4b1f      	ldr	r3, [pc, #124]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c2:	4a1e      	ldr	r2, [pc, #120]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082d0:	4b1a      	ldr	r3, [pc, #104]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4a19      	ldr	r2, [pc, #100]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082dc:	e00f      	b.n	80082fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d106      	bne.n	80082f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082e4:	4b15      	ldr	r3, [pc, #84]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	4a14      	ldr	r2, [pc, #80]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082f0:	e005      	b.n	80082fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082f2:	4b12      	ldr	r3, [pc, #72]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f6:	4a11      	ldr	r2, [pc, #68]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 80082f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082fe:	4b0f      	ldr	r3, [pc, #60]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a0e      	ldr	r2, [pc, #56]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830a:	f7f9 f8d5 	bl	80014b8 <HAL_GetTick>
 800830e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008310:	e008      	b.n	8008324 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008312:	f7f9 f8d1 	bl	80014b8 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d901      	bls.n	8008324 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e006      	b.n	8008332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <RCCEx_PLL3_Config+0x15c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f0      	beq.n	8008312 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	58024400 	.word	0x58024400
 8008340:	ffff0007 	.word	0xffff0007

08008344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e042      	b.n	80083dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7f8 fc8f 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2224      	movs	r2, #36	@ 0x24
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0201 	bic.w	r2, r2, #1
 8008384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 f9f4 	bl	800977c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc89 	bl	8008cac <UART_SetConfig>
 800839a:	4603      	mov	r3, r0
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e01b      	b.n	80083dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0201 	orr.w	r2, r2, #1
 80083d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 fa73 	bl	80098c0 <UART_CheckIdleState>
 80083da:	4603      	mov	r3, r0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	@ 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d167      	bne.n	80084cc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Transmit_DMA+0x24>
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e060      	b.n	80084ce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	88fa      	ldrh	r2, [r7, #6]
 8008416:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2221      	movs	r2, #33	@ 0x21
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d028      	beq.n	800848c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800843e:	4a26      	ldr	r2, [pc, #152]	@ (80084d8 <HAL_UART_Transmit_DMA+0xf4>)
 8008440:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008446:	4a25      	ldr	r2, [pc, #148]	@ (80084dc <HAL_UART_Transmit_DMA+0xf8>)
 8008448:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800844e:	4a24      	ldr	r2, [pc, #144]	@ (80084e0 <HAL_UART_Transmit_DMA+0xfc>)
 8008450:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008456:	2200      	movs	r2, #0
 8008458:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008462:	4619      	mov	r1, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3328      	adds	r3, #40	@ 0x28
 800846a:	461a      	mov	r2, r3
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	f7f9 ffab 	bl	80023c8 <HAL_DMA_Start_IT>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2210      	movs	r2, #16
 800847c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2220      	movs	r2, #32
 8008484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e020      	b.n	80084ce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2240      	movs	r2, #64	@ 0x40
 8008492:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3308      	adds	r3, #8
 800849a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	613b      	str	r3, [r7, #16]
   return(result);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3308      	adds	r3, #8
 80084b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b4:	623a      	str	r2, [r7, #32]
 80084b6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	69f9      	ldr	r1, [r7, #28]
 80084ba:	6a3a      	ldr	r2, [r7, #32]
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e5      	bne.n	8008494 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e000      	b.n	80084ce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80084cc:	2302      	movs	r3, #2
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	@ 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	08009c3d 	.word	0x08009c3d
 80084dc:	08009cd3 	.word	0x08009cd3
 80084e0:	08009cef 	.word	0x08009cef

080084e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b0ba      	sub	sp, #232	@ 0xe8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800850a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800850e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008512:	4013      	ands	r3, r2
 8008514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d11b      	bne.n	8008558 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	d015      	beq.n	8008558 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d105      	bne.n	8008544 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d009      	beq.n	8008558 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8377 	beq.w	8008c3c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
      }
      return;
 8008556:	e371      	b.n	8008c3c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8123 	beq.w	80087a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008562:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008566:	4b8d      	ldr	r3, [pc, #564]	@ (800879c <HAL_UART_IRQHandler+0x2b8>)
 8008568:	4013      	ands	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800856e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008572:	4b8b      	ldr	r3, [pc, #556]	@ (80087a0 <HAL_UART_IRQHandler+0x2bc>)
 8008574:	4013      	ands	r3, r2
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8116 	beq.w	80087a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	d011      	beq.n	80085ac <HAL_UART_IRQHandler+0xc8>
 8008588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800858c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00b      	beq.n	80085ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2201      	movs	r2, #1
 800859a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a2:	f043 0201 	orr.w	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d011      	beq.n	80085dc <HAL_UART_IRQHandler+0xf8>
 80085b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2202      	movs	r2, #2
 80085ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d2:	f043 0204 	orr.w	r2, r3, #4
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d011      	beq.n	800860c <HAL_UART_IRQHandler+0x128>
 80085e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2204      	movs	r2, #4
 80085fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008602:	f043 0202 	orr.w	r2, r3, #2
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d017      	beq.n	8008648 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d105      	bne.n	8008630 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008624:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008628:	4b5c      	ldr	r3, [pc, #368]	@ (800879c <HAL_UART_IRQHandler+0x2b8>)
 800862a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2208      	movs	r2, #8
 8008636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863e:	f043 0208 	orr.w	r2, r3, #8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008650:	2b00      	cmp	r3, #0
 8008652:	d012      	beq.n	800867a <HAL_UART_IRQHandler+0x196>
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008658:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00c      	beq.n	800867a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 82dd 	beq.w	8008c40 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800869e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ce:	2b40      	cmp	r3, #64	@ 0x40
 80086d0:	d005      	beq.n	80086de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d054      	beq.n	8008788 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 fa46 	bl	8009b70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ee:	2b40      	cmp	r3, #64	@ 0x40
 80086f0:	d146      	bne.n	8008780 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800870c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800871e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800872a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1d9      	bne.n	80086f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008744:	2b00      	cmp	r3, #0
 8008746:	d017      	beq.n	8008778 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800874e:	4a15      	ldr	r2, [pc, #84]	@ (80087a4 <HAL_UART_IRQHandler+0x2c0>)
 8008750:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008758:	4618      	mov	r0, r3
 800875a:	f7fa fbbd 	bl	8002ed8 <HAL_DMA_Abort_IT>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d019      	beq.n	8008798 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008772:	4610      	mov	r0, r2
 8008774:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008776:	e00f      	b.n	8008798 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fa81 	bl	8008c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877e:	e00b      	b.n	8008798 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fa7d 	bl	8008c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008786:	e007      	b.n	8008798 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fa79 	bl	8008c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008796:	e253      	b.n	8008c40 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	bf00      	nop
    return;
 800879a:	e251      	b.n	8008c40 <HAL_UART_IRQHandler+0x75c>
 800879c:	10000001 	.word	0x10000001
 80087a0:	04000120 	.word	0x04000120
 80087a4:	08009d6f 	.word	0x08009d6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	f040 81e7 	bne.w	8008b80 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b6:	f003 0310 	and.w	r3, r3, #16
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 81e0 	beq.w	8008b80 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 81d9 	beq.w	8008b80 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2210      	movs	r2, #16
 80087d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e0:	2b40      	cmp	r3, #64	@ 0x40
 80087e2:	f040 8151 	bne.w	8008a88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a96      	ldr	r2, [pc, #600]	@ (8008a48 <HAL_UART_IRQHandler+0x564>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d068      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a93      	ldr	r2, [pc, #588]	@ (8008a4c <HAL_UART_IRQHandler+0x568>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d061      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a91      	ldr	r2, [pc, #580]	@ (8008a50 <HAL_UART_IRQHandler+0x56c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d05a      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a8e      	ldr	r2, [pc, #568]	@ (8008a54 <HAL_UART_IRQHandler+0x570>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d053      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a8c      	ldr	r2, [pc, #560]	@ (8008a58 <HAL_UART_IRQHandler+0x574>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d04c      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a89      	ldr	r2, [pc, #548]	@ (8008a5c <HAL_UART_IRQHandler+0x578>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d045      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a87      	ldr	r2, [pc, #540]	@ (8008a60 <HAL_UART_IRQHandler+0x57c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d03e      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a84      	ldr	r2, [pc, #528]	@ (8008a64 <HAL_UART_IRQHandler+0x580>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d037      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a82      	ldr	r2, [pc, #520]	@ (8008a68 <HAL_UART_IRQHandler+0x584>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d030      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a7f      	ldr	r2, [pc, #508]	@ (8008a6c <HAL_UART_IRQHandler+0x588>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d029      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a7d      	ldr	r2, [pc, #500]	@ (8008a70 <HAL_UART_IRQHandler+0x58c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d022      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a7a      	ldr	r2, [pc, #488]	@ (8008a74 <HAL_UART_IRQHandler+0x590>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d01b      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a78      	ldr	r2, [pc, #480]	@ (8008a78 <HAL_UART_IRQHandler+0x594>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d014      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a75      	ldr	r2, [pc, #468]	@ (8008a7c <HAL_UART_IRQHandler+0x598>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00d      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a73      	ldr	r2, [pc, #460]	@ (8008a80 <HAL_UART_IRQHandler+0x59c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d006      	beq.n	80088c6 <HAL_UART_IRQHandler+0x3e2>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a70      	ldr	r2, [pc, #448]	@ (8008a84 <HAL_UART_IRQHandler+0x5a0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d106      	bne.n	80088d4 <HAL_UART_IRQHandler+0x3f0>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	e005      	b.n	80088e0 <HAL_UART_IRQHandler+0x3fc>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 81ab 	beq.w	8008c44 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088f8:	429a      	cmp	r2, r3
 80088fa:	f080 81a3 	bcs.w	8008c44 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008904:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008914:	f000 8087 	beq.w	8008a26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800892c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008946:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800894e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800895a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1da      	bne.n	8008918 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3308      	adds	r3, #8
 8008968:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008986:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800898a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800898e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e1      	bne.n	8008962 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e3      	bne.n	800899e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089f4:	f023 0310 	bic.w	r3, r3, #16
 80089f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e4      	bne.n	80089e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f9 ff3b 	bl	800289c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f927 	bl	8008c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a46:	e0fd      	b.n	8008c44 <HAL_UART_IRQHandler+0x760>
 8008a48:	40020010 	.word	0x40020010
 8008a4c:	40020028 	.word	0x40020028
 8008a50:	40020040 	.word	0x40020040
 8008a54:	40020058 	.word	0x40020058
 8008a58:	40020070 	.word	0x40020070
 8008a5c:	40020088 	.word	0x40020088
 8008a60:	400200a0 	.word	0x400200a0
 8008a64:	400200b8 	.word	0x400200b8
 8008a68:	40020410 	.word	0x40020410
 8008a6c:	40020428 	.word	0x40020428
 8008a70:	40020440 	.word	0x40020440
 8008a74:	40020458 	.word	0x40020458
 8008a78:	40020470 	.word	0x40020470
 8008a7c:	40020488 	.word	0x40020488
 8008a80:	400204a0 	.word	0x400204a0
 8008a84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80cf 	beq.w	8008c48 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008aaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 80ca 	beq.w	8008c48 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ad8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008adc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e4      	bne.n	8008ab4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	623b      	str	r3, [r7, #32]
   return(result);
 8008afa:	6a3a      	ldr	r2, [r7, #32]
 8008afc:	4b55      	ldr	r3, [pc, #340]	@ (8008c54 <HAL_UART_IRQHandler+0x770>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e3      	bne.n	8008aea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0310 	bic.w	r3, r3, #16
 8008b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b58:	61fb      	str	r3, [r7, #28]
 8008b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69b9      	ldr	r1, [r7, #24]
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	617b      	str	r3, [r7, #20]
   return(result);
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e4      	bne.n	8008b36 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f88b 	bl	8008c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b7e:	e063      	b.n	8008c48 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00e      	beq.n	8008baa <HAL_UART_IRQHandler+0x6c6>
 8008b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 f924 	bl	8009df0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ba8:	e051      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d014      	beq.n	8008be0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d008      	beq.n	8008be0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d03a      	beq.n	8008c4c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
    }
    return;
 8008bde:	e035      	b.n	8008c4c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <HAL_UART_IRQHandler+0x71c>
 8008bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 f8ce 	bl	8009d9a <UART_EndTransmit_IT>
    return;
 8008bfe:	e026      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <HAL_UART_IRQHandler+0x73c>
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f8fd 	bl	8009e18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c1e:	e016      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d010      	beq.n	8008c4e <HAL_UART_IRQHandler+0x76a>
 8008c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da0c      	bge.n	8008c4e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 f8e5 	bl	8009e04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c3a:	e008      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
      return;
 8008c3c:	bf00      	nop
 8008c3e:	e006      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
    return;
 8008c40:	bf00      	nop
 8008c42:	e004      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
      return;
 8008c44:	bf00      	nop
 8008c46:	e002      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
      return;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <HAL_UART_IRQHandler+0x76a>
    return;
 8008c4c:	bf00      	nop
  }
}
 8008c4e:	37e8      	adds	r7, #232	@ 0xe8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	effffffe 	.word	0xeffffffe

08008c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb0:	b092      	sub	sp, #72	@ 0x48
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4bbe      	ldr	r3, [pc, #760]	@ (8008fd4 <UART_SetConfig+0x328>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ce4:	430b      	orrs	r3, r1
 8008ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4ab3      	ldr	r2, [pc, #716]	@ (8008fd8 <UART_SetConfig+0x32c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d004      	beq.n	8008d18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d14:	4313      	orrs	r3, r2
 8008d16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	4baf      	ldr	r3, [pc, #700]	@ (8008fdc <UART_SetConfig+0x330>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	f023 010f 	bic.w	r1, r3, #15
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4aa6      	ldr	r2, [pc, #664]	@ (8008fe0 <UART_SetConfig+0x334>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d177      	bne.n	8008e3c <UART_SetConfig+0x190>
 8008d4c:	4ba5      	ldr	r3, [pc, #660]	@ (8008fe4 <UART_SetConfig+0x338>)
 8008d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d54:	2b28      	cmp	r3, #40	@ 0x28
 8008d56:	d86d      	bhi.n	8008e34 <UART_SetConfig+0x188>
 8008d58:	a201      	add	r2, pc, #4	@ (adr r2, 8008d60 <UART_SetConfig+0xb4>)
 8008d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5e:	bf00      	nop
 8008d60:	08008e05 	.word	0x08008e05
 8008d64:	08008e35 	.word	0x08008e35
 8008d68:	08008e35 	.word	0x08008e35
 8008d6c:	08008e35 	.word	0x08008e35
 8008d70:	08008e35 	.word	0x08008e35
 8008d74:	08008e35 	.word	0x08008e35
 8008d78:	08008e35 	.word	0x08008e35
 8008d7c:	08008e35 	.word	0x08008e35
 8008d80:	08008e0d 	.word	0x08008e0d
 8008d84:	08008e35 	.word	0x08008e35
 8008d88:	08008e35 	.word	0x08008e35
 8008d8c:	08008e35 	.word	0x08008e35
 8008d90:	08008e35 	.word	0x08008e35
 8008d94:	08008e35 	.word	0x08008e35
 8008d98:	08008e35 	.word	0x08008e35
 8008d9c:	08008e35 	.word	0x08008e35
 8008da0:	08008e15 	.word	0x08008e15
 8008da4:	08008e35 	.word	0x08008e35
 8008da8:	08008e35 	.word	0x08008e35
 8008dac:	08008e35 	.word	0x08008e35
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008e35 	.word	0x08008e35
 8008db8:	08008e35 	.word	0x08008e35
 8008dbc:	08008e35 	.word	0x08008e35
 8008dc0:	08008e1d 	.word	0x08008e1d
 8008dc4:	08008e35 	.word	0x08008e35
 8008dc8:	08008e35 	.word	0x08008e35
 8008dcc:	08008e35 	.word	0x08008e35
 8008dd0:	08008e35 	.word	0x08008e35
 8008dd4:	08008e35 	.word	0x08008e35
 8008dd8:	08008e35 	.word	0x08008e35
 8008ddc:	08008e35 	.word	0x08008e35
 8008de0:	08008e25 	.word	0x08008e25
 8008de4:	08008e35 	.word	0x08008e35
 8008de8:	08008e35 	.word	0x08008e35
 8008dec:	08008e35 	.word	0x08008e35
 8008df0:	08008e35 	.word	0x08008e35
 8008df4:	08008e35 	.word	0x08008e35
 8008df8:	08008e35 	.word	0x08008e35
 8008dfc:	08008e35 	.word	0x08008e35
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e222      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e21e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e21a      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e216      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e24:	2320      	movs	r3, #32
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e212      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e2c:	2340      	movs	r3, #64	@ 0x40
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e20e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e34:	2380      	movs	r3, #128	@ 0x80
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e20a      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a69      	ldr	r2, [pc, #420]	@ (8008fe8 <UART_SetConfig+0x33c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d130      	bne.n	8008ea8 <UART_SetConfig+0x1fc>
 8008e46:	4b67      	ldr	r3, [pc, #412]	@ (8008fe4 <UART_SetConfig+0x338>)
 8008e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d826      	bhi.n	8008ea0 <UART_SetConfig+0x1f4>
 8008e52:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <UART_SetConfig+0x1ac>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008e79 	.word	0x08008e79
 8008e60:	08008e81 	.word	0x08008e81
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008e99 	.word	0x08008e99
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e1ec      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e1e8      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e80:	2308      	movs	r3, #8
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e1e4      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e1e0      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e90:	2320      	movs	r3, #32
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e1dc      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008e98:	2340      	movs	r3, #64	@ 0x40
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e1d8      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e1d4      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a4f      	ldr	r2, [pc, #316]	@ (8008fec <UART_SetConfig+0x340>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d130      	bne.n	8008f14 <UART_SetConfig+0x268>
 8008eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8008fe4 <UART_SetConfig+0x338>)
 8008eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d826      	bhi.n	8008f0c <UART_SetConfig+0x260>
 8008ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <UART_SetConfig+0x218>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008eed 	.word	0x08008eed
 8008ed0:	08008ef5 	.word	0x08008ef5
 8008ed4:	08008efd 	.word	0x08008efd
 8008ed8:	08008f05 	.word	0x08008f05
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e1b6      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e1b2      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008eec:	2308      	movs	r3, #8
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e1ae      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e1aa      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008efc:	2320      	movs	r3, #32
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e1a6      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f04:	2340      	movs	r3, #64	@ 0x40
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e1a2      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f0c:	2380      	movs	r3, #128	@ 0x80
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e19e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a35      	ldr	r2, [pc, #212]	@ (8008ff0 <UART_SetConfig+0x344>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d130      	bne.n	8008f80 <UART_SetConfig+0x2d4>
 8008f1e:	4b31      	ldr	r3, [pc, #196]	@ (8008fe4 <UART_SetConfig+0x338>)
 8008f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	2b05      	cmp	r3, #5
 8008f28:	d826      	bhi.n	8008f78 <UART_SetConfig+0x2cc>
 8008f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <UART_SetConfig+0x284>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f49 	.word	0x08008f49
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f59 	.word	0x08008f59
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f69 	.word	0x08008f69
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e180      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e17c      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e178      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e174      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f68:	2320      	movs	r3, #32
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e170      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f70:	2340      	movs	r3, #64	@ 0x40
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e16c      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f78:	2380      	movs	r3, #128	@ 0x80
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e168      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff4 <UART_SetConfig+0x348>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d142      	bne.n	8009010 <UART_SetConfig+0x364>
 8008f8a:	4b16      	ldr	r3, [pc, #88]	@ (8008fe4 <UART_SetConfig+0x338>)
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d838      	bhi.n	8009008 <UART_SetConfig+0x35c>
 8008f96:	a201      	add	r2, pc, #4	@ (adr r2, 8008f9c <UART_SetConfig+0x2f0>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fb5 	.word	0x08008fb5
 8008fa0:	08008fbd 	.word	0x08008fbd
 8008fa4:	08008fc5 	.word	0x08008fc5
 8008fa8:	08008fcd 	.word	0x08008fcd
 8008fac:	08008ff9 	.word	0x08008ff9
 8008fb0:	08009001 	.word	0x08009001
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e14a      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e146      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e142      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e13e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8008fd4:	cfff69f3 	.word	0xcfff69f3
 8008fd8:	58000c00 	.word	0x58000c00
 8008fdc:	11fff4ff 	.word	0x11fff4ff
 8008fe0:	40011000 	.word	0x40011000
 8008fe4:	58024400 	.word	0x58024400
 8008fe8:	40004400 	.word	0x40004400
 8008fec:	40004800 	.word	0x40004800
 8008ff0:	40004c00 	.word	0x40004c00
 8008ff4:	40005000 	.word	0x40005000
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e128      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009000:	2340      	movs	r3, #64	@ 0x40
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e124      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009008:	2380      	movs	r3, #128	@ 0x80
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e120      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4acb      	ldr	r2, [pc, #812]	@ (8009344 <UART_SetConfig+0x698>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d176      	bne.n	8009108 <UART_SetConfig+0x45c>
 800901a:	4bcb      	ldr	r3, [pc, #812]	@ (8009348 <UART_SetConfig+0x69c>)
 800901c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800901e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009022:	2b28      	cmp	r3, #40	@ 0x28
 8009024:	d86c      	bhi.n	8009100 <UART_SetConfig+0x454>
 8009026:	a201      	add	r2, pc, #4	@ (adr r2, 800902c <UART_SetConfig+0x380>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	080090d1 	.word	0x080090d1
 8009030:	08009101 	.word	0x08009101
 8009034:	08009101 	.word	0x08009101
 8009038:	08009101 	.word	0x08009101
 800903c:	08009101 	.word	0x08009101
 8009040:	08009101 	.word	0x08009101
 8009044:	08009101 	.word	0x08009101
 8009048:	08009101 	.word	0x08009101
 800904c:	080090d9 	.word	0x080090d9
 8009050:	08009101 	.word	0x08009101
 8009054:	08009101 	.word	0x08009101
 8009058:	08009101 	.word	0x08009101
 800905c:	08009101 	.word	0x08009101
 8009060:	08009101 	.word	0x08009101
 8009064:	08009101 	.word	0x08009101
 8009068:	08009101 	.word	0x08009101
 800906c:	080090e1 	.word	0x080090e1
 8009070:	08009101 	.word	0x08009101
 8009074:	08009101 	.word	0x08009101
 8009078:	08009101 	.word	0x08009101
 800907c:	08009101 	.word	0x08009101
 8009080:	08009101 	.word	0x08009101
 8009084:	08009101 	.word	0x08009101
 8009088:	08009101 	.word	0x08009101
 800908c:	080090e9 	.word	0x080090e9
 8009090:	08009101 	.word	0x08009101
 8009094:	08009101 	.word	0x08009101
 8009098:	08009101 	.word	0x08009101
 800909c:	08009101 	.word	0x08009101
 80090a0:	08009101 	.word	0x08009101
 80090a4:	08009101 	.word	0x08009101
 80090a8:	08009101 	.word	0x08009101
 80090ac:	080090f1 	.word	0x080090f1
 80090b0:	08009101 	.word	0x08009101
 80090b4:	08009101 	.word	0x08009101
 80090b8:	08009101 	.word	0x08009101
 80090bc:	08009101 	.word	0x08009101
 80090c0:	08009101 	.word	0x08009101
 80090c4:	08009101 	.word	0x08009101
 80090c8:	08009101 	.word	0x08009101
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e0bc      	b.n	8009252 <UART_SetConfig+0x5a6>
 80090d8:	2304      	movs	r3, #4
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e0b8      	b.n	8009252 <UART_SetConfig+0x5a6>
 80090e0:	2308      	movs	r3, #8
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e0b4      	b.n	8009252 <UART_SetConfig+0x5a6>
 80090e8:	2310      	movs	r3, #16
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e0b0      	b.n	8009252 <UART_SetConfig+0x5a6>
 80090f0:	2320      	movs	r3, #32
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e0ac      	b.n	8009252 <UART_SetConfig+0x5a6>
 80090f8:	2340      	movs	r3, #64	@ 0x40
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e0a8      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009100:	2380      	movs	r3, #128	@ 0x80
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e0a4      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a8f      	ldr	r2, [pc, #572]	@ (800934c <UART_SetConfig+0x6a0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d130      	bne.n	8009174 <UART_SetConfig+0x4c8>
 8009112:	4b8d      	ldr	r3, [pc, #564]	@ (8009348 <UART_SetConfig+0x69c>)
 8009114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	2b05      	cmp	r3, #5
 800911c:	d826      	bhi.n	800916c <UART_SetConfig+0x4c0>
 800911e:	a201      	add	r2, pc, #4	@ (adr r2, 8009124 <UART_SetConfig+0x478>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	0800913d 	.word	0x0800913d
 8009128:	08009145 	.word	0x08009145
 800912c:	0800914d 	.word	0x0800914d
 8009130:	08009155 	.word	0x08009155
 8009134:	0800915d 	.word	0x0800915d
 8009138:	08009165 	.word	0x08009165
 800913c:	2300      	movs	r3, #0
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e086      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009144:	2304      	movs	r3, #4
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e082      	b.n	8009252 <UART_SetConfig+0x5a6>
 800914c:	2308      	movs	r3, #8
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e07e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009154:	2310      	movs	r3, #16
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e07a      	b.n	8009252 <UART_SetConfig+0x5a6>
 800915c:	2320      	movs	r3, #32
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e076      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009164:	2340      	movs	r3, #64	@ 0x40
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e072      	b.n	8009252 <UART_SetConfig+0x5a6>
 800916c:	2380      	movs	r3, #128	@ 0x80
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e06e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a75      	ldr	r2, [pc, #468]	@ (8009350 <UART_SetConfig+0x6a4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d130      	bne.n	80091e0 <UART_SetConfig+0x534>
 800917e:	4b72      	ldr	r3, [pc, #456]	@ (8009348 <UART_SetConfig+0x69c>)
 8009180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	2b05      	cmp	r3, #5
 8009188:	d826      	bhi.n	80091d8 <UART_SetConfig+0x52c>
 800918a:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <UART_SetConfig+0x4e4>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091a9 	.word	0x080091a9
 8009194:	080091b1 	.word	0x080091b1
 8009198:	080091b9 	.word	0x080091b9
 800919c:	080091c1 	.word	0x080091c1
 80091a0:	080091c9 	.word	0x080091c9
 80091a4:	080091d1 	.word	0x080091d1
 80091a8:	2300      	movs	r3, #0
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e050      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091b0:	2304      	movs	r3, #4
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e04c      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091b8:	2308      	movs	r3, #8
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e048      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091c0:	2310      	movs	r3, #16
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e044      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091c8:	2320      	movs	r3, #32
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e040      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091d0:	2340      	movs	r3, #64	@ 0x40
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e03c      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091d8:	2380      	movs	r3, #128	@ 0x80
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091de:	e038      	b.n	8009252 <UART_SetConfig+0x5a6>
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a5b      	ldr	r2, [pc, #364]	@ (8009354 <UART_SetConfig+0x6a8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d130      	bne.n	800924c <UART_SetConfig+0x5a0>
 80091ea:	4b57      	ldr	r3, [pc, #348]	@ (8009348 <UART_SetConfig+0x69c>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	d826      	bhi.n	8009244 <UART_SetConfig+0x598>
 80091f6:	a201      	add	r2, pc, #4	@ (adr r2, 80091fc <UART_SetConfig+0x550>)
 80091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fc:	08009215 	.word	0x08009215
 8009200:	0800921d 	.word	0x0800921d
 8009204:	08009225 	.word	0x08009225
 8009208:	0800922d 	.word	0x0800922d
 800920c:	08009235 	.word	0x08009235
 8009210:	0800923d 	.word	0x0800923d
 8009214:	2302      	movs	r3, #2
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e01a      	b.n	8009252 <UART_SetConfig+0x5a6>
 800921c:	2304      	movs	r3, #4
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e016      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009224:	2308      	movs	r3, #8
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e012      	b.n	8009252 <UART_SetConfig+0x5a6>
 800922c:	2310      	movs	r3, #16
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e00e      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009234:	2320      	movs	r3, #32
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e00a      	b.n	8009252 <UART_SetConfig+0x5a6>
 800923c:	2340      	movs	r3, #64	@ 0x40
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e006      	b.n	8009252 <UART_SetConfig+0x5a6>
 8009244:	2380      	movs	r3, #128	@ 0x80
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e002      	b.n	8009252 <UART_SetConfig+0x5a6>
 800924c:	2380      	movs	r3, #128	@ 0x80
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a3f      	ldr	r2, [pc, #252]	@ (8009354 <UART_SetConfig+0x6a8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	f040 80f8 	bne.w	800944e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800925e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009262:	2b20      	cmp	r3, #32
 8009264:	dc46      	bgt.n	80092f4 <UART_SetConfig+0x648>
 8009266:	2b02      	cmp	r3, #2
 8009268:	f2c0 8082 	blt.w	8009370 <UART_SetConfig+0x6c4>
 800926c:	3b02      	subs	r3, #2
 800926e:	2b1e      	cmp	r3, #30
 8009270:	d87e      	bhi.n	8009370 <UART_SetConfig+0x6c4>
 8009272:	a201      	add	r2, pc, #4	@ (adr r2, 8009278 <UART_SetConfig+0x5cc>)
 8009274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009278:	080092fb 	.word	0x080092fb
 800927c:	08009371 	.word	0x08009371
 8009280:	08009303 	.word	0x08009303
 8009284:	08009371 	.word	0x08009371
 8009288:	08009371 	.word	0x08009371
 800928c:	08009371 	.word	0x08009371
 8009290:	08009313 	.word	0x08009313
 8009294:	08009371 	.word	0x08009371
 8009298:	08009371 	.word	0x08009371
 800929c:	08009371 	.word	0x08009371
 80092a0:	08009371 	.word	0x08009371
 80092a4:	08009371 	.word	0x08009371
 80092a8:	08009371 	.word	0x08009371
 80092ac:	08009371 	.word	0x08009371
 80092b0:	08009323 	.word	0x08009323
 80092b4:	08009371 	.word	0x08009371
 80092b8:	08009371 	.word	0x08009371
 80092bc:	08009371 	.word	0x08009371
 80092c0:	08009371 	.word	0x08009371
 80092c4:	08009371 	.word	0x08009371
 80092c8:	08009371 	.word	0x08009371
 80092cc:	08009371 	.word	0x08009371
 80092d0:	08009371 	.word	0x08009371
 80092d4:	08009371 	.word	0x08009371
 80092d8:	08009371 	.word	0x08009371
 80092dc:	08009371 	.word	0x08009371
 80092e0:	08009371 	.word	0x08009371
 80092e4:	08009371 	.word	0x08009371
 80092e8:	08009371 	.word	0x08009371
 80092ec:	08009371 	.word	0x08009371
 80092f0:	08009363 	.word	0x08009363
 80092f4:	2b40      	cmp	r3, #64	@ 0x40
 80092f6:	d037      	beq.n	8009368 <UART_SetConfig+0x6bc>
 80092f8:	e03a      	b.n	8009370 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80092fa:	f7fe fc01 	bl	8007b00 <HAL_RCCEx_GetD3PCLK1Freq>
 80092fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009300:	e03c      	b.n	800937c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fc10 	bl	8007b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800930c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009310:	e034      	b.n	800937c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009312:	f107 0318 	add.w	r3, r7, #24
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fd5c 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009320:	e02c      	b.n	800937c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <UART_SetConfig+0x69c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0320 	and.w	r3, r3, #32
 800932a:	2b00      	cmp	r3, #0
 800932c:	d016      	beq.n	800935c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800932e:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <UART_SetConfig+0x69c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	08db      	lsrs	r3, r3, #3
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	4a07      	ldr	r2, [pc, #28]	@ (8009358 <UART_SetConfig+0x6ac>)
 800933a:	fa22 f303 	lsr.w	r3, r2, r3
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009340:	e01c      	b.n	800937c <UART_SetConfig+0x6d0>
 8009342:	bf00      	nop
 8009344:	40011400 	.word	0x40011400
 8009348:	58024400 	.word	0x58024400
 800934c:	40007800 	.word	0x40007800
 8009350:	40007c00 	.word	0x40007c00
 8009354:	58000c00 	.word	0x58000c00
 8009358:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800935c:	4b9d      	ldr	r3, [pc, #628]	@ (80095d4 <UART_SetConfig+0x928>)
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009360:	e00c      	b.n	800937c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009362:	4b9d      	ldr	r3, [pc, #628]	@ (80095d8 <UART_SetConfig+0x92c>)
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009366:	e009      	b.n	800937c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936e:	e005      	b.n	800937c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800937a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800937c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 81de 	beq.w	8009740 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009388:	4a94      	ldr	r2, [pc, #592]	@ (80095dc <UART_SetConfig+0x930>)
 800938a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800938e:	461a      	mov	r2, r3
 8009390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009392:	fbb3 f3f2 	udiv	r3, r3, r2
 8009396:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	4413      	add	r3, r2
 80093a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d305      	bcc.n	80093b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d903      	bls.n	80093bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093ba:	e1c1      	b.n	8009740 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093be:	2200      	movs	r2, #0
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	60fa      	str	r2, [r7, #12]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c8:	4a84      	ldr	r2, [pc, #528]	@ (80095dc <UART_SetConfig+0x930>)
 80093ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	2200      	movs	r2, #0
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093de:	f7f6 ff7b 	bl	80002d8 <__aeabi_uldivmod>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4610      	mov	r0, r2
 80093e8:	4619      	mov	r1, r3
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	020b      	lsls	r3, r1, #8
 80093f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093f8:	0202      	lsls	r2, r0, #8
 80093fa:	6979      	ldr	r1, [r7, #20]
 80093fc:	6849      	ldr	r1, [r1, #4]
 80093fe:	0849      	lsrs	r1, r1, #1
 8009400:	2000      	movs	r0, #0
 8009402:	460c      	mov	r4, r1
 8009404:	4605      	mov	r5, r0
 8009406:	eb12 0804 	adds.w	r8, r2, r4
 800940a:	eb43 0905 	adc.w	r9, r3, r5
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	469a      	mov	sl, r3
 8009416:	4693      	mov	fp, r2
 8009418:	4652      	mov	r2, sl
 800941a:	465b      	mov	r3, fp
 800941c:	4640      	mov	r0, r8
 800941e:	4649      	mov	r1, r9
 8009420:	f7f6 ff5a 	bl	80002d8 <__aeabi_uldivmod>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4613      	mov	r3, r2
 800942a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009432:	d308      	bcc.n	8009446 <UART_SetConfig+0x79a>
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800943a:	d204      	bcs.n	8009446 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009442:	60da      	str	r2, [r3, #12]
 8009444:	e17c      	b.n	8009740 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800944c:	e178      	b.n	8009740 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009456:	f040 80c5 	bne.w	80095e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800945a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800945e:	2b20      	cmp	r3, #32
 8009460:	dc48      	bgt.n	80094f4 <UART_SetConfig+0x848>
 8009462:	2b00      	cmp	r3, #0
 8009464:	db7b      	blt.n	800955e <UART_SetConfig+0x8b2>
 8009466:	2b20      	cmp	r3, #32
 8009468:	d879      	bhi.n	800955e <UART_SetConfig+0x8b2>
 800946a:	a201      	add	r2, pc, #4	@ (adr r2, 8009470 <UART_SetConfig+0x7c4>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	080094fb 	.word	0x080094fb
 8009474:	08009503 	.word	0x08009503
 8009478:	0800955f 	.word	0x0800955f
 800947c:	0800955f 	.word	0x0800955f
 8009480:	0800950b 	.word	0x0800950b
 8009484:	0800955f 	.word	0x0800955f
 8009488:	0800955f 	.word	0x0800955f
 800948c:	0800955f 	.word	0x0800955f
 8009490:	0800951b 	.word	0x0800951b
 8009494:	0800955f 	.word	0x0800955f
 8009498:	0800955f 	.word	0x0800955f
 800949c:	0800955f 	.word	0x0800955f
 80094a0:	0800955f 	.word	0x0800955f
 80094a4:	0800955f 	.word	0x0800955f
 80094a8:	0800955f 	.word	0x0800955f
 80094ac:	0800955f 	.word	0x0800955f
 80094b0:	0800952b 	.word	0x0800952b
 80094b4:	0800955f 	.word	0x0800955f
 80094b8:	0800955f 	.word	0x0800955f
 80094bc:	0800955f 	.word	0x0800955f
 80094c0:	0800955f 	.word	0x0800955f
 80094c4:	0800955f 	.word	0x0800955f
 80094c8:	0800955f 	.word	0x0800955f
 80094cc:	0800955f 	.word	0x0800955f
 80094d0:	0800955f 	.word	0x0800955f
 80094d4:	0800955f 	.word	0x0800955f
 80094d8:	0800955f 	.word	0x0800955f
 80094dc:	0800955f 	.word	0x0800955f
 80094e0:	0800955f 	.word	0x0800955f
 80094e4:	0800955f 	.word	0x0800955f
 80094e8:	0800955f 	.word	0x0800955f
 80094ec:	0800955f 	.word	0x0800955f
 80094f0:	08009551 	.word	0x08009551
 80094f4:	2b40      	cmp	r3, #64	@ 0x40
 80094f6:	d02e      	beq.n	8009556 <UART_SetConfig+0x8aa>
 80094f8:	e031      	b.n	800955e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094fa:	f7fd f8cb 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 80094fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009500:	e033      	b.n	800956a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009502:	f7fd f8dd 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 8009506:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009508:	e02f      	b.n	800956a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800950a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fb0c 	bl	8007b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009518:	e027      	b.n	800956a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800951a:	f107 0318 	add.w	r3, r7, #24
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe fc58 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009528:	e01f      	b.n	800956a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800952a:	4b2d      	ldr	r3, [pc, #180]	@ (80095e0 <UART_SetConfig+0x934>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d009      	beq.n	800954a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009536:	4b2a      	ldr	r3, [pc, #168]	@ (80095e0 <UART_SetConfig+0x934>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	08db      	lsrs	r3, r3, #3
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	4a24      	ldr	r2, [pc, #144]	@ (80095d4 <UART_SetConfig+0x928>)
 8009542:	fa22 f303 	lsr.w	r3, r2, r3
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009548:	e00f      	b.n	800956a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800954a:	4b22      	ldr	r3, [pc, #136]	@ (80095d4 <UART_SetConfig+0x928>)
 800954c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954e:	e00c      	b.n	800956a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009550:	4b21      	ldr	r3, [pc, #132]	@ (80095d8 <UART_SetConfig+0x92c>)
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	e009      	b.n	800956a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800955c:	e005      	b.n	800956a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800956a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80e7 	beq.w	8009740 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009576:	4a19      	ldr	r2, [pc, #100]	@ (80095dc <UART_SetConfig+0x930>)
 8009578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800957c:	461a      	mov	r2, r3
 800957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009580:	fbb3 f3f2 	udiv	r3, r3, r2
 8009584:	005a      	lsls	r2, r3, #1
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	441a      	add	r2, r3
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	fbb2 f3f3 	udiv	r3, r2, r3
 8009596:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	2b0f      	cmp	r3, #15
 800959c:	d916      	bls.n	80095cc <UART_SetConfig+0x920>
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095a4:	d212      	bcs.n	80095cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f023 030f 	bic.w	r3, r3, #15
 80095ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	085b      	lsrs	r3, r3, #1
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80095be:	4313      	orrs	r3, r2
 80095c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	e0b9      	b.n	8009740 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095d2:	e0b5      	b.n	8009740 <UART_SetConfig+0xa94>
 80095d4:	03d09000 	.word	0x03d09000
 80095d8:	003d0900 	.word	0x003d0900
 80095dc:	0800a2b0 	.word	0x0800a2b0
 80095e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80095e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	dc49      	bgt.n	8009680 <UART_SetConfig+0x9d4>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	db7c      	blt.n	80096ea <UART_SetConfig+0xa3e>
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d87a      	bhi.n	80096ea <UART_SetConfig+0xa3e>
 80095f4:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <UART_SetConfig+0x950>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009687 	.word	0x08009687
 8009600:	0800968f 	.word	0x0800968f
 8009604:	080096eb 	.word	0x080096eb
 8009608:	080096eb 	.word	0x080096eb
 800960c:	08009697 	.word	0x08009697
 8009610:	080096eb 	.word	0x080096eb
 8009614:	080096eb 	.word	0x080096eb
 8009618:	080096eb 	.word	0x080096eb
 800961c:	080096a7 	.word	0x080096a7
 8009620:	080096eb 	.word	0x080096eb
 8009624:	080096eb 	.word	0x080096eb
 8009628:	080096eb 	.word	0x080096eb
 800962c:	080096eb 	.word	0x080096eb
 8009630:	080096eb 	.word	0x080096eb
 8009634:	080096eb 	.word	0x080096eb
 8009638:	080096eb 	.word	0x080096eb
 800963c:	080096b7 	.word	0x080096b7
 8009640:	080096eb 	.word	0x080096eb
 8009644:	080096eb 	.word	0x080096eb
 8009648:	080096eb 	.word	0x080096eb
 800964c:	080096eb 	.word	0x080096eb
 8009650:	080096eb 	.word	0x080096eb
 8009654:	080096eb 	.word	0x080096eb
 8009658:	080096eb 	.word	0x080096eb
 800965c:	080096eb 	.word	0x080096eb
 8009660:	080096eb 	.word	0x080096eb
 8009664:	080096eb 	.word	0x080096eb
 8009668:	080096eb 	.word	0x080096eb
 800966c:	080096eb 	.word	0x080096eb
 8009670:	080096eb 	.word	0x080096eb
 8009674:	080096eb 	.word	0x080096eb
 8009678:	080096eb 	.word	0x080096eb
 800967c:	080096dd 	.word	0x080096dd
 8009680:	2b40      	cmp	r3, #64	@ 0x40
 8009682:	d02e      	beq.n	80096e2 <UART_SetConfig+0xa36>
 8009684:	e031      	b.n	80096ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009686:	f7fd f805 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 800968a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800968c:	e033      	b.n	80096f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800968e:	f7fd f817 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 8009692:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009694:	e02f      	b.n	80096f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fa46 	bl	8007b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a4:	e027      	b.n	80096f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096a6:	f107 0318 	add.w	r3, r7, #24
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fb92 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b4:	e01f      	b.n	80096f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096b6:	4b2d      	ldr	r3, [pc, #180]	@ (800976c <UART_SetConfig+0xac0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d009      	beq.n	80096d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096c2:	4b2a      	ldr	r3, [pc, #168]	@ (800976c <UART_SetConfig+0xac0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	08db      	lsrs	r3, r3, #3
 80096c8:	f003 0303 	and.w	r3, r3, #3
 80096cc:	4a28      	ldr	r2, [pc, #160]	@ (8009770 <UART_SetConfig+0xac4>)
 80096ce:	fa22 f303 	lsr.w	r3, r2, r3
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096d4:	e00f      	b.n	80096f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80096d6:	4b26      	ldr	r3, [pc, #152]	@ (8009770 <UART_SetConfig+0xac4>)
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096da:	e00c      	b.n	80096f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096dc:	4b25      	ldr	r3, [pc, #148]	@ (8009774 <UART_SetConfig+0xac8>)
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e009      	b.n	80096f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e8:	e005      	b.n	80096f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096f4:	bf00      	nop
    }

    if (pclk != 0U)
 80096f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d021      	beq.n	8009740 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	4a1d      	ldr	r2, [pc, #116]	@ (8009778 <UART_SetConfig+0xacc>)
 8009702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009706:	461a      	mov	r2, r3
 8009708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800970a:	fbb3 f2f2 	udiv	r2, r3, r2
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	441a      	add	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	fbb2 f3f3 	udiv	r3, r2, r3
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	2b0f      	cmp	r3, #15
 8009724:	d909      	bls.n	800973a <UART_SetConfig+0xa8e>
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800972c:	d205      	bcs.n	800973a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	b29a      	uxth	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60da      	str	r2, [r3, #12]
 8009738:	e002      	b.n	8009740 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2201      	movs	r2, #1
 8009744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2201      	movs	r2, #1
 800974c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2200      	movs	r2, #0
 8009754:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2200      	movs	r2, #0
 800975a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800975c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009760:	4618      	mov	r0, r3
 8009762:	3748      	adds	r7, #72	@ 0x48
 8009764:	46bd      	mov	sp, r7
 8009766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800976a:	bf00      	nop
 800976c:	58024400 	.word	0x58024400
 8009770:	03d09000 	.word	0x03d09000
 8009774:	003d0900 	.word	0x003d0900
 8009778:	0800a2b0 	.word	0x0800a2b0

0800977c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00a      	beq.n	80097ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ee:	f003 0304 	and.w	r3, r3, #4
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00a      	beq.n	800982e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01a      	beq.n	8009892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800987a:	d10a      	bne.n	8009892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
  }
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b098      	sub	sp, #96	@ 0x60
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098d0:	f7f7 fdf2 	bl	80014b8 <HAL_GetTick>
 80098d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0308 	and.w	r3, r3, #8
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d12f      	bne.n	8009944 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ec:	2200      	movs	r2, #0
 80098ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f88e 	bl	8009a14 <UART_WaitOnFlagUntilTimeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d022      	beq.n	8009944 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009912:	653b      	str	r3, [r7, #80]	@ 0x50
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800991c:	647b      	str	r3, [r7, #68]	@ 0x44
 800991e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800992a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e6      	bne.n	80098fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2220      	movs	r2, #32
 8009934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e063      	b.n	8009a0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0304 	and.w	r3, r3, #4
 800994e:	2b04      	cmp	r3, #4
 8009950:	d149      	bne.n	80099e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009952:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800995a:	2200      	movs	r2, #0
 800995c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f857 	bl	8009a14 <UART_WaitOnFlagUntilTimeout>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d03c      	beq.n	80099e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	623b      	str	r3, [r7, #32]
   return(result);
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800998a:	633b      	str	r3, [r7, #48]	@ 0x30
 800998c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e6      	bne.n	800996c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3308      	adds	r3, #8
 80099a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099be:	61fa      	str	r2, [r7, #28]
 80099c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	69b9      	ldr	r1, [r7, #24]
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	617b      	str	r3, [r7, #20]
   return(result);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e5      	bne.n	800999e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e012      	b.n	8009a0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3758      	adds	r7, #88	@ 0x58
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	4613      	mov	r3, r2
 8009a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a24:	e04f      	b.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2c:	d04b      	beq.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a2e:	f7f7 fd43 	bl	80014b8 <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d302      	bcc.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e04e      	b.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0304 	and.w	r3, r3, #4
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d037      	beq.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b80      	cmp	r3, #128	@ 0x80
 8009a5a:	d034      	beq.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2b40      	cmp	r3, #64	@ 0x40
 8009a60:	d031      	beq.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d110      	bne.n	8009a92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2208      	movs	r2, #8
 8009a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 f879 	bl	8009b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2208      	movs	r2, #8
 8009a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e029      	b.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aa0:	d111      	bne.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 f85f 	bl	8009b70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e00f      	b.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	69da      	ldr	r2, [r3, #28]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	2300      	movne	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d0a0      	beq.n	8009a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b08f      	sub	sp, #60	@ 0x3c
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e6      	bne.n	8009af6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009b3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3308      	adds	r3, #8
 8009b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b48:	61ba      	str	r2, [r7, #24]
 8009b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	6979      	ldr	r1, [r7, #20]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	613b      	str	r3, [r7, #16]
   return(result);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e5      	bne.n	8009b28 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009b64:	bf00      	nop
 8009b66:	373c      	adds	r7, #60	@ 0x3c
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b095      	sub	sp, #84	@ 0x54
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	461a      	mov	r2, r3
 8009b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e6      	bne.n	8009b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3308      	adds	r3, #8
 8009bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8009c38 <UART_EndRxTransfer+0xc8>)
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e5      	bne.n	8009baa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d118      	bne.n	8009c18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	e853 3f00 	ldrex	r3, [r3]
 8009bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f023 0310 	bic.w	r3, r3, #16
 8009bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	461a      	mov	r2, r3
 8009c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c04:	61bb      	str	r3, [r7, #24]
 8009c06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c08:	6979      	ldr	r1, [r7, #20]
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	e841 2300 	strex	r3, r2, [r1]
 8009c10:	613b      	str	r3, [r7, #16]
   return(result);
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1e6      	bne.n	8009be6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c2c:	bf00      	nop
 8009c2e:	3754      	adds	r7, #84	@ 0x54
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	effffffe 	.word	0xeffffffe

08009c3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b090      	sub	sp, #64	@ 0x40
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c52:	d037      	beq.n	8009cc4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e5      	bne.n	8009c5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	69b9      	ldr	r1, [r7, #24]
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	617b      	str	r3, [r7, #20]
   return(result);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e6      	bne.n	8009c90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cc2:	e002      	b.n	8009cca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009cc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009cc6:	f7fe ffc7 	bl	8008c58 <HAL_UART_TxCpltCallback>
}
 8009cca:	bf00      	nop
 8009ccc:	3740      	adds	r7, #64	@ 0x40
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7fe ffc3 	bl	8008c6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b086      	sub	sp, #24
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	2b80      	cmp	r3, #128	@ 0x80
 8009d18:	d109      	bne.n	8009d2e <UART_DMAError+0x40>
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b21      	cmp	r3, #33	@ 0x21
 8009d1e:	d106      	bne.n	8009d2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009d28:	6978      	ldr	r0, [r7, #20]
 8009d2a:	f7ff fee0 	bl	8009aee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d38:	2b40      	cmp	r3, #64	@ 0x40
 8009d3a:	d109      	bne.n	8009d50 <UART_DMAError+0x62>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b22      	cmp	r3, #34	@ 0x22
 8009d40:	d106      	bne.n	8009d50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009d4a:	6978      	ldr	r0, [r7, #20]
 8009d4c:	f7ff ff10 	bl	8009b70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d56:	f043 0210 	orr.w	r2, r3, #16
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d60:	6978      	ldr	r0, [r7, #20]
 8009d62:	f7fe ff8d 	bl	8008c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d66:	bf00      	nop
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7fe ff77 	bl	8008c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d92:	bf00      	nop
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b088      	sub	sp, #32
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	61bb      	str	r3, [r7, #24]
 8009dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6979      	ldr	r1, [r7, #20]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e6      	bne.n	8009da2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7fe ff38 	bl	8008c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009de8:	bf00      	nop
 8009dea:	3720      	adds	r7, #32
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e027      	b.n	8009e92 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2224      	movs	r2, #36	@ 0x24
 8009e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0201 	bic.w	r2, r2, #1
 8009e68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e02d      	b.n	8009f12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2224      	movs	r2, #36	@ 0x24
 8009ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0201 	bic.w	r2, r2, #1
 8009edc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f850 	bl	8009f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e02d      	b.n	8009f8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2224      	movs	r2, #36	@ 0x24
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0201 	bic.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f812 	bl	8009f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d108      	bne.n	8009fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fb8:	e031      	b.n	800a01e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fba:	2310      	movs	r3, #16
 8009fbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fbe:	2310      	movs	r3, #16
 8009fc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	0e5b      	lsrs	r3, r3, #25
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0307 	and.w	r3, r3, #7
 8009fd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	0f5b      	lsrs	r3, r3, #29
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f003 0307 	and.w	r3, r3, #7
 8009fe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	7b3a      	ldrb	r2, [r7, #12]
 8009fe6:	4911      	ldr	r1, [pc, #68]	@ (800a02c <UARTEx_SetNbDataToProcess+0x94>)
 8009fe8:	5c8a      	ldrb	r2, [r1, r2]
 8009fea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fee:	7b3a      	ldrb	r2, [r7, #12]
 8009ff0:	490f      	ldr	r1, [pc, #60]	@ (800a030 <UARTEx_SetNbDataToProcess+0x98>)
 8009ff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	7b7a      	ldrb	r2, [r7, #13]
 800a004:	4909      	ldr	r1, [pc, #36]	@ (800a02c <UARTEx_SetNbDataToProcess+0x94>)
 800a006:	5c8a      	ldrb	r2, [r1, r2]
 800a008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a00c:	7b7a      	ldrb	r2, [r7, #13]
 800a00e:	4908      	ldr	r1, [pc, #32]	@ (800a030 <UARTEx_SetNbDataToProcess+0x98>)
 800a010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a012:	fb93 f3f2 	sdiv	r3, r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	0800a2c8 	.word	0x0800a2c8
 800a030:	0800a2d0 	.word	0x0800a2d0

0800a034 <memset>:
 800a034:	4402      	add	r2, r0
 800a036:	4603      	mov	r3, r0
 800a038:	4293      	cmp	r3, r2
 800a03a:	d100      	bne.n	800a03e <memset+0xa>
 800a03c:	4770      	bx	lr
 800a03e:	f803 1b01 	strb.w	r1, [r3], #1
 800a042:	e7f9      	b.n	800a038 <memset+0x4>

0800a044 <__libc_init_array>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	4d0d      	ldr	r5, [pc, #52]	@ (800a07c <__libc_init_array+0x38>)
 800a048:	4c0d      	ldr	r4, [pc, #52]	@ (800a080 <__libc_init_array+0x3c>)
 800a04a:	1b64      	subs	r4, r4, r5
 800a04c:	10a4      	asrs	r4, r4, #2
 800a04e:	2600      	movs	r6, #0
 800a050:	42a6      	cmp	r6, r4
 800a052:	d109      	bne.n	800a068 <__libc_init_array+0x24>
 800a054:	4d0b      	ldr	r5, [pc, #44]	@ (800a084 <__libc_init_array+0x40>)
 800a056:	4c0c      	ldr	r4, [pc, #48]	@ (800a088 <__libc_init_array+0x44>)
 800a058:	f000 f826 	bl	800a0a8 <_init>
 800a05c:	1b64      	subs	r4, r4, r5
 800a05e:	10a4      	asrs	r4, r4, #2
 800a060:	2600      	movs	r6, #0
 800a062:	42a6      	cmp	r6, r4
 800a064:	d105      	bne.n	800a072 <__libc_init_array+0x2e>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06c:	4798      	blx	r3
 800a06e:	3601      	adds	r6, #1
 800a070:	e7ee      	b.n	800a050 <__libc_init_array+0xc>
 800a072:	f855 3b04 	ldr.w	r3, [r5], #4
 800a076:	4798      	blx	r3
 800a078:	3601      	adds	r6, #1
 800a07a:	e7f2      	b.n	800a062 <__libc_init_array+0x1e>
 800a07c:	0800a2e0 	.word	0x0800a2e0
 800a080:	0800a2e0 	.word	0x0800a2e0
 800a084:	0800a2e0 	.word	0x0800a2e0
 800a088:	0800a2e4 	.word	0x0800a2e4

0800a08c <memcpy>:
 800a08c:	440a      	add	r2, r1
 800a08e:	4291      	cmp	r1, r2
 800a090:	f100 33ff 	add.w	r3, r0, #4294967295
 800a094:	d100      	bne.n	800a098 <memcpy+0xc>
 800a096:	4770      	bx	lr
 800a098:	b510      	push	{r4, lr}
 800a09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a2:	4291      	cmp	r1, r2
 800a0a4:	d1f9      	bne.n	800a09a <memcpy+0xe>
 800a0a6:	bd10      	pop	{r4, pc}

0800a0a8 <_init>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <_fini>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr
